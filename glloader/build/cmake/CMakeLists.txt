PROJECT(glloader)

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules/")
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.7)

IF(COMMAND cmake_policy)
  CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(GLLOADER_MAJOR_VERSION 3)
SET(GLLOADER_MINOR_VERSION 6)
SET(GLLOADER_PATCH_VERSION 0)
SET(GLLOADER_VERSION ${GLLOADER_MAJOR_VERSION}.${GLLOADER_MINOR_VERSION}.${GLLOADER_PATCH_VERSION})

FIND_PACKAGE(OpenGL)

IF(WIN32)
    IF(MSVC)
        OPTION(WIN32_USE_MP "Set to ON to build KlayGE with the /MP option (Visual Studio 2005 and above)." OFF)
        MARK_AS_ADVANCED(WIN32_USE_MP)
        IF(WIN32_USE_MP)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
        ENDIF(WIN32_USE_MP)

        # More MSVC specific compilation flags
        ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
        ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
        
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4996 /wd4355 /wd4244 /wd4985 /wd4267 /wd4619")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996 /wd4355 /wd4244 /wd4985 /wd4267 /wd4619")
    ENDIF(MSVC)
ENDIF(WIN32)

IF(NOT WIN32)
    SET(CMAKE_CXX_FLAGS "-W -Wall -Wno-unused")
ENDIF(NOT WIN32)

# On CMake 2.4.x use EXECUTABLE_OUTPUT_PATH and LIBRARY_OUTPUT_PATH and later
# we work around the DLL placement by use of the PREFIX target property hack
#
# On CMake 2.6.x use the newly minted CMAKE_LIBRARY_OUTPUT_DIRECTORY,
# CMAKE_ARCHIVE_OUTPUT_DIRECTORY & CMAKE_RUNTIME_OUTPUT_DIRECTORY

IF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 5)
    SET(EXECUTABLE_OUTPUT_PATH ${OUTPUT_BINDIR})
    SET(LIBRARY_OUTPUT_PATH    ${OUTPUT_LIBDIR})
ELSE()
    # If CMake >= 2.6.0
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
    IF(WIN32)
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
    ELSE(WIN32)
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
    ENDIF(WIN32)
ENDIF()


# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "_rd" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "_s" CACHE STRING "add a postfix, usually empty on windows")


# The project settings
INCLUDE_DIRECTORIES(${CMAKE_INCLUDE_PATH})
LINK_DIRECTORIES(${CMAKE_LIBRARY_PATH})

SET(LIB_NAME glloader)
OPTION(GLLOADER_USE_GLES "Set to ON to use OpenGL ES to build glloader" OFF)

SET(GLLOADER_SOURCE_FILES
    ../../src/glloader_egl.c
    ../../src/glloader_gl.c
    ../../src/glloader_gles.c
    ../../src/glloader_glx.c
    ../../src/glloader_wgl.c
    ../../src/utils.cpp
)
SET(GLLOADER_INCLUDE_FILES
    ../../include/glloader/glloader.h
    ../../include/glloader/glloader_egl.h
    ../../include/glloader/glloader_gl.h
    ../../include/glloader/glloader_gles.h
    ../../include/glloader/glloader_glx.h
    ../../include/glloader/glloader_wgl.h
)
SET(GLLOADER_HEADER_FILES
    ../../src/utils.h
)
SOURCE_GROUP( "Source Files" FILES ${GLLOADER_SOURCE_FILES} )
SOURCE_GROUP( "Header Files" FILES ${GLLOADER_INCLUDE_FILES} ${GLLOADER_HEADER_FILES} )

ADD_DEFINITIONS(-DGLLOADER_SOURCE)
IF(GLLOADER_USE_GLES)
    ADD_DEFINITIONS(-DGLLOADER_GLES_SUPPORT)
ENDIF(GLLOADER_USE_GLES)

INCLUDE_DIRECTORIES(../../include ${OPENGL_INCLUDE_DIR})
ADD_LIBRARY(${LIB_NAME} SHARED
    ${GLLOADER_SOURCE_FILES} ${GLLOADER_HEADER_FILES}
)

SET(LIB_OUTPUT_NAME ${LIB_NAME})
IF(MSVC)
    SET(LIB_ARCHITECTURE "_x86")
    IF(CMAKE_CL_64)
        SET(LIB_ARCHITECTURE "_x64")
    ENDIF(CMAKE_CL_64)
    
    SET(LIB_OUTPUT_NAME "${LIB_OUTPUT_NAME}${LIB_ARCHITECTURE}")
ENDIF(MSVC)

SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES PROJECT_LABEL "${LIB_NAME}")
SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES OUTPUT_NAME ${LIB_OUTPUT_NAME})
TARGET_LINK_LIBRARIES(${LIB_NAME} ${OPENGL_LIBRARIES})

SET(INSTALL_INCDIR include)
SET(INSTALL_BINDIR bin)
SET(INSTALL_LIB_POSTFIX "")
IF(WIN32)
    SET(INSTALL_LIBDIR bin)
    SET(INSTALL_ARCHIVEDIR lib)
ELSE(WIN32)
    SET(INSTALL_LIBDIR lib${INSTALL_LIB_POSTFIX})
    SET(INSTALL_ARCHIVEDIR lib${INSTALL_LIB_POSTFIX})
ENDIF(WIN32)

INSTALL(TARGETS ${LIB_NAME}
    RUNTIME DESTINATION ${INSTALL_BINDIR}
    LIBRARY DESTINATION ${INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR}
)
INSTALL(FILES ${GLLOADER_INCLUDE_FILES} DESTINATION ${INSTALL_INCDIR}/${LIB_NAME})


# Uninstalling configuration
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET(uninstall
  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
