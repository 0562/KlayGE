PROJECT(KFL)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(KFL_MAJOR_VERSION 1)
SET(KFL_MINOR_VERSION 0)
SET(KFL_PATCH_VERSION 0)
SET(KFL_VERSION ${KFL_MAJOR_VERSION}.${KFL_MINOR_VERSION}.${KFL_PATCH_VERSION})

OPTION(KFL_WITH_WINRT "WinRT support." FALSE)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF(WIN32)
	IF(CMAKE_GENERATOR MATCHES "Win64")
		SET(KFL_ARCH_NAME "x64")
	ELSEIF(CMAKE_GENERATOR MATCHES "ARM")
		SET(KFL_ARCH_NAME "arm")
		SET(KFL_WITH_WINRT TRUE)
	ELSE()
		SET(KFL_ARCH_NAME "x86")
	ENDIF()
	SET(KFL_PLATFORM_NAME "win")
ENDIF()
IF(UNIX)
	IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
		SET(KFL_ARCH_NAME "x64")
	ELSE()
		SET(KFL_ARCH_NAME "x86")
	ENDIF()
	SET(KFL_PLATFORM_NAME "linux")
ENDIF()
IF(KFL_WITH_WINRT)
	SET(KFL_ARCH_NAME ${KFL_ARCH_NAME}_app)
ENDIF()
SET(KFL_PLATFORM_NAME ${KFL_PLATFORM_NAME}_${KFL_ARCH_NAME})

IF(WIN32)
	IF(MSVC)
		SET(CMAKE_C_FLAGS "/DWIN32 /D_WINDOWS /W4 /WX /GR /EHsc")
		SET(CMAKE_CXX_FLAGS "/DWIN32 /D_WINDOWS /W4 /WX /GR /EHsc")
		IF(NOT KFL_WITH_WINRT)
			SET(CMAKE_MODULE_LINKER_FLAGS "/WX")
		ENDIF()

		SET(KFL_COMPILER_NAME "vc")
		IF(MSVC_VERSION GREATER 1600)
			SET(KFL_COMPILER_VERSION "11")
		ELSEIF(MSVC_VERSION GREATER 1500)
			SET(KFL_COMPILER_VERSION "10")
		ELSEIF(MSVC_VERSION GREATER 1400)
			SET(KFL_COMPILER_VERSION "9")
		ENDIF()

		IF(MSVC_VERSION GREATER 1500)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MP")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MP")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MP")
		ENDIF()
		IF(MSVC_VERSION GREATER 1600)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Qpar")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Qpar")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /Qpar")
		ENDIF()
	ELSEIF(MINGW)
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W -Wall -Wno-unused -march=core2 -std=c11")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused -march=core2 -std=c++11")
		SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE "-s")
		
		SET(KFL_COMPILER_NAME "mgw")
		SET(KFL_COMPILER_VERSION "")
	ENDIF()
ELSE()
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W -Wall -Wno-unused -march=core2 -std=c11")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused -march=core2 -std=c++11")
	SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE "-s")

	SET(KFL_COMPILER_NAME "gcc")
	SET(KFL_COMPILER_VERSION "")
ENDIF()

SET(KFL_PROJECT_DIR "${CMAKE_HOME_DIRECTORY}/../../")
SET(KFL_OUTPUT_DIR "${KFL_PROJECT_DIR}/lib/${KFL_PLATFORM_NAME}")

# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")


# The project settings

SET(LIB_NAME KFL)

SET(KERNEL_HEADER_FILES
	${KFL_PROJECT_DIR}/include/KFL/AlignedAllocator.hpp
	${KFL_PROJECT_DIR}/include/KFL/COMPtr.hpp
	${KFL_PROJECT_DIR}/include/KFL/Config.hpp
	${KFL_PROJECT_DIR}/include/KFL/CpuInfo.hpp
	${KFL_PROJECT_DIR}/include/KFL/DllLoader.hpp
	${KFL_PROJECT_DIR}/include/KFL/KFL.hpp
	${KFL_PROJECT_DIR}/include/KFL/Log.hpp
	${KFL_PROJECT_DIR}/include/KFL/PreDeclare.hpp
	${KFL_PROJECT_DIR}/include/KFL/ResIdentifier.hpp
	${KFL_PROJECT_DIR}/include/KFL/Thread.hpp
	${KFL_PROJECT_DIR}/include/KFL/ThrowErr.hpp
	${KFL_PROJECT_DIR}/include/KFL/Timer.hpp
	${KFL_PROJECT_DIR}/include/KFL/Trace.hpp
	${KFL_PROJECT_DIR}/include/KFL/Types.hpp
	${KFL_PROJECT_DIR}/include/KFL/Util.hpp
	${KFL_PROJECT_DIR}/include/KFL/XMLDom.hpp
)
SET(KERNEL_SOURCE_FILES
	${KFL_PROJECT_DIR}/src/Kernel/CpuInfo.cpp
	${KFL_PROJECT_DIR}/src/Kernel/DllLoader.cpp
	${KFL_PROJECT_DIR}/src/Kernel/KFL.cpp
	${KFL_PROJECT_DIR}/src/Kernel/Log.cpp
	${KFL_PROJECT_DIR}/src/Kernel/ThrowErr.cpp
	${KFL_PROJECT_DIR}/src/Kernel/Timer.cpp
	${KFL_PROJECT_DIR}/src/Kernel/Util.cpp
	${KFL_PROJECT_DIR}/src/Kernel/XMLDom.cpp
)

SET(MATH_HEADER_FILES
	${KFL_PROJECT_DIR}/include/KFL/Detail/MathHelper.hpp
	${KFL_PROJECT_DIR}/include/KFL/AABBox.hpp
	${KFL_PROJECT_DIR}/include/KFL/Bound.hpp
	${KFL_PROJECT_DIR}/include/KFL/Color.hpp
	${KFL_PROJECT_DIR}/include/KFL/Frustum.hpp
	${KFL_PROJECT_DIR}/include/KFL/Half.hpp
	${KFL_PROJECT_DIR}/include/KFL/Math.hpp
	${KFL_PROJECT_DIR}/include/KFL/Matrix.hpp
	${KFL_PROJECT_DIR}/include/KFL/Noise.hpp
	${KFL_PROJECT_DIR}/include/KFL/OBBox.hpp
	${KFL_PROJECT_DIR}/include/KFL/Plane.hpp
	${KFL_PROJECT_DIR}/include/KFL/Quaternion.hpp
	${KFL_PROJECT_DIR}/include/KFL/Rect.hpp
	${KFL_PROJECT_DIR}/include/KFL/Size.hpp
	${KFL_PROJECT_DIR}/include/KFL/Sphere.hpp
	${KFL_PROJECT_DIR}/include/KFL/Vector.hpp
)
SET(MATH_SOURCE_FILES
	${KFL_PROJECT_DIR}/src/Math/Math.cpp
)

SOURCE_GROUP("Kernel\\Source Files" FILES ${KERNEL_SOURCE_FILES})
SOURCE_GROUP("Kernel\\Header Files" FILES ${KERNEL_HEADER_FILES})
SOURCE_GROUP("Math\\Source Files" FILES ${MATH_SOURCE_FILES})
SOURCE_GROUP("Math\\Header Files" FILES ${MATH_HEADER_FILES})

ADD_DEFINITIONS(-DKFL_SOURCE)
IF(KFL_WITH_WINRT)
	ADD_DEFINITIONS(-ZW)
ENDIF()

INCLUDE_DIRECTORIES(${KFL_PROJECT_DIR}/../External/boost)
INCLUDE_DIRECTORIES(${KFL_PROJECT_DIR}/../External/rapidxml)
INCLUDE_DIRECTORIES(${KFL_PROJECT_DIR}/include)
LINK_DIRECTORIES(${KFL_PROJECT_DIR}/../External/boost/lib_${KFL_COMPILER_NAME}${KFL_COMPILER_VERSION}_${KFL_ARCH_NAME}/lib)
ADD_LIBRARY(${LIB_NAME} STATIC
	${KERNEL_SOURCE_FILES} ${KERNEL_HEADER_FILES}
	${MATH_SOURCE_FILES} ${MATH_HEADER_FILES}
)

SET(LIB_OUTPUT_NAME ${LIB_NAME}_${KFL_COMPILER_NAME}_${KFL_ARCH_NAME})

SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
	ARCHIVE_OUTPUT_DIRECTORY ${KFL_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${KFL_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${KFL_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${KFL_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${KFL_OUTPUT_DIR}
	PROJECT_LABEL ${LIB_NAME}
	DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
	OUTPUT_NAME ${LIB_OUTPUT_NAME}
)
IF(KFL_WITH_WINRT)
	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VS_WINRT_EXTENSIONS TRUE)
ENDIF()

FUNCTION(ADD_PRECOMPILED_HEADER TARGET_NAME PRECOMPILEDHEADER PRECOMPILEDSOURCE)
	IF(MSVC)
		GET_FILENAME_COMPONENT(PRECOMPILEDBASENAME ${PRECOMPILEDHEADER} NAME_WE)
		SET(PCHOUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${PRECOMPILEDBASENAME}.pch")

		SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES COMPILE_FLAGS "/Yu\"${PRECOMPILEDHEADER}\" /Fp\"${PCHOUTPUT}\"" OBJECT_DEPENDS "${PCHOUTPUT}")
		SET_SOURCE_FILES_PROPERTIES(${PRECOMPILEDSOURCE} PROPERTIES COMPILE_FLAGS "/Yc\"${PRECOMPILEDHEADER}\" /Fp\"${PCHOUTPUT}\"" OBJECT_OUTPUTS "${PCHOUTPUT}")
	ENDIF()
ENDFUNCTION()
ADD_PRECOMPILED_HEADER(${LIB_NAME} "KFL/KFL.hpp" "${KFL_PROJECT_DIR}/src/Kernel/KFL.cpp")

TARGET_LINK_LIBRARIES(${LIB_NAME})
