PROJECT(kfont)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(KFONT_MAJOR_VERSION 1)
SET(KFONT_MINOR_VERSION 0)
SET(KFONT_PATCH_VERSION 0)
SET(KFONT_VERSION ${KFONT_MAJOR_VERSION}.${KFONT_MINOR_VERSION}.${KFONT_PATCH_VERSION})

OPTION(KFONT_WITH_WINRT "WinRT support." FALSE)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF(WIN32)
	IF(CMAKE_GENERATOR MATCHES "Win64")
		SET(KFONT_ARCH_NAME "x64")
	ELSEIF(CMAKE_GENERATOR MATCHES "ARM")
		SET(KFONT_ARCH_NAME "arm")
		SET(KFONT_WITH_WINRT TRUE)
	ELSE()
		SET(KFONT_ARCH_NAME "x86")
	ENDIF()
	SET(KFONT_PLATFORM_NAME "win")
ENDIF()
IF(UNIX)
	IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
		SET(KFONT_ARCH_NAME "x64")
	ELSE()
		SET(KFONT_ARCH_NAME "x86")
	ENDIF()
	SET(KFONT_PLATFORM_NAME "linux")
ENDIF()
IF(KFONT_WITH_WINRT)
	SET(KFONT_ARCH_NAME ${KFONT_ARCH_NAME}_app)
ENDIF()
SET(KFONT_PLATFORM_NAME ${KFONT_PLATFORM_NAME}_${KFONT_ARCH_NAME})

IF(WIN32)
	IF(MSVC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /WX")
		IF(KFONT_WITH_WINRT)
			SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "/DEBUG /WX /INCREMENTAL:NO")
			SET(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "/DEBUG /WX /INCREMENTAL:NO")
		ENDIF()

		SET(KFONT_COMPILER_NAME "vc")
		IF(MSVC_VERSION GREATER 1600)
			SET(KFONT_COMPILER_VERSION "11")
		ELSEIF(MSVC_VERSION GREATER 1500)
			SET(KFONT_COMPILER_VERSION "10")
		ELSEIF(MSVC_VERSION GREATER 1400)
			SET(KFONT_COMPILER_VERSION "9")
		ENDIF()

		IF(MSVC_VERSION GREATER 1500)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MP")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MP")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MP")

			SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /LARGEADDRESSAWARE")
		ENDIF()
		IF(MSVC_VERSION GREATER 1600)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Qpar")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Qpar")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /Qpar")
		ENDIF()
	ENDIF()
	IF(MINGW)
		SET(KFONT_COMPILER_NAME "mgw")
		SET(KFONT_COMPILER_VERSION "")
	ENDIF()
ELSE()
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused")
ENDIF()

SET(KFONT_OUTPUT_DIR "${CMAKE_HOME_DIRECTORY}/../../lib/${KFONT_PLATFORM_NAME}" )
SET(KFONT_BIN_DIR "${CMAKE_HOME_DIRECTORY}/../../../KlayGE/bin/${KFONT_PLATFORM_NAME}" )

# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")


# The project settings

SET(LIB_NAME kfont)

SET(KFONT_SOURCE_FILES
	../../src/kfont.cpp
)
SET(KFONT_HEADER_FILES
	../../include/kfont/kfont.hpp
)
SOURCE_GROUP("Source Files" FILES ${KFONT_SOURCE_FILES})
SOURCE_GROUP("Header Files" FILES ${KFONT_HEADER_FILES})

ADD_DEFINITIONS(-DKFONT_SOURCE)
IF(KFONT_WITH_WINRT)
	ADD_DEFINITIONS(-ZW)
ENDIF()

INCLUDE_DIRECTORIES(../../../External/boost ../../../External/7z ../../include)
LINK_DIRECTORIES(${CMAKE_HOME_DIRECTORY}/../../../External/boost/lib_${KFONT_COMPILER_NAME}${KFONT_COMPILER_VERSION}_${KFONT_ARCH_NAME}/lib)
ADD_LIBRARY(${LIB_NAME} SHARED
	${KFONT_SOURCE_FILES} ${KFONT_HEADER_FILES}
)

SET(LIB_OUTPUT_NAME ${LIB_NAME}_${KFONT_COMPILER_NAME}_${KFONT_ARCH_NAME})

SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
	ARCHIVE_OUTPUT_DIRECTORY ${KFONT_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${KFONT_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${KFONT_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${KFONT_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${KFONT_OUTPUT_DIR}
	PROJECT_LABEL ${LIB_NAME}
	DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
	OUTPUT_NAME ${LIB_OUTPUT_NAME}
)
IF(KFONT_WITH_WINRT)
	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VS_WINRT_EXTENSIONS TRUE)
ENDIF()

TARGET_LINK_LIBRARIES(${LIB_NAME})


GET_PROPERTY(OUT_LOCATION_DEBUG TARGET ${LIB_NAME} PROPERTY LOCATION_DEBUG)
ADD_CUSTOM_COMMAND(TARGET ${LIB_NAME}
	POST_BUILD
	COMMAND IF EXIST ${OUT_LOCATION_DEBUG} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_DEBUG} ${KFONT_BIN_DIR})

GET_PROPERTY(OUT_LOCATION_RELEASE TARGET ${LIB_NAME} PROPERTY LOCATION_RELEASE)
ADD_CUSTOM_COMMAND(TARGET ${LIB_NAME}
	POST_BUILD
	COMMAND IF EXIST ${OUT_LOCATION_RELEASE} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_RELWITHDEBINFO} ${KFONT_BIN_DIR})

GET_PROPERTY(OUT_LOCATION_RELWITHDEBINFO TARGET ${LIB_NAME} PROPERTY LOCATION_RELWITHDEBINFO)
ADD_CUSTOM_COMMAND(TARGET ${LIB_NAME}
	POST_BUILD
	COMMAND IF EXIST ${OUT_LOCATION_RELWITHDEBINFO} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_RELWITHDEBINFO} ${KFONT_BIN_DIR})

GET_PROPERTY(OUT_LOCATION_MINSIZEREL TARGET ${LIB_NAME} PROPERTY LOCATION_MINSIZEREL)
ADD_CUSTOM_COMMAND(TARGET ${LIB_NAME}
	POST_BUILD
	COMMAND IF EXIST ${OUT_LOCATION_MINSIZEREL} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_RELWITHDEBINFO} ${KFONT_BIN_DIR})


INSTALL(TARGETS ${LIB_NAME}
	RUNTIME DESTINATION ${KFONT_BIN_DIR}
	LIBRARY DESTINATION ${KFONT_BIN_DIR}
	ARCHIVE DESTINATION ${KFONT_OUTPUT_DIR}
)
