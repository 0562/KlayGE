From 54e8ed2a6396ead254e7565838e4b5d016366cd2 Mon Sep 17 00:00:00 2001
From: Minmin Gong <gongminmin@msn.com>
Date: Sun, 20 Jan 2019 20:21:33 -0800
Subject: [PATCH 1/2] Fix for MinGW and UWP

---
 Modules/_io/winconsoleio.c     |  13 ++++
 Modules/_randommodule.c        |   4 ++
 Modules/_stat.c                |   4 ++
 Modules/clinic/posixmodule.c.h |   8 +--
 Modules/faulthandler.c         |   6 +-
 Modules/posixmodule.c          | 114 +++++++++++++++++++++++++++++----
 PC/getpathp.c                  |  20 ++++++
 PC/pyconfig.h                  |  23 +++++++
 PC/winreg.c                    |  85 ++++++++++++++++++++++++
 Python/bootstrap_hash.c        |  12 ++++
 Python/dynload_win.c           |   8 +++
 Python/fileutils.c             |  13 ++++
 Python/pytime.c                |  15 +++++
 Python/sysmodule.c             |   2 +
 14 files changed, 306 insertions(+), 21 deletions(-)

diff --git a/Modules/_io/winconsoleio.c b/Modules/_io/winconsoleio.c
index ea5d24f950..387b35c9b7 100644
--- a/Modules/_io/winconsoleio.c
+++ b/Modules/_io/winconsoleio.c
@@ -269,6 +269,9 @@ _io__WindowsConsoleIO___init___impl(winconsoleio *self, PyObject *nameobj,
     int rwa = 0;
     int fd = -1;
     int fd_is_own = 0;
+#ifdef MS_WINDOWS_STORE
+    CREATEFILE2_EXTENDED_PARAMETERS param;
+#endif
 
     assert(PyWindowsConsoleIO_Check(self));
     if (self->handle >= 0) {
@@ -369,11 +372,21 @@ _io__WindowsConsoleIO___init___impl(winconsoleio *self, PyObject *nameobj,
            on the specific access. This is required for modern names
            CONIN$ and CONOUT$, which allow reading/writing state as
            well as reading/writing content. */
+#ifdef MS_WINDOWS_STORE
+        ZeroMemory(&param, sizeof(param));
+        param.dwSize = sizeof(param);
+        self->handle = CreateFile2(name, GENERIC_READ | GENERIC_WRITE,
+            FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING, &param);
+        if (self->handle == INVALID_HANDLE_VALUE)
+            self->handle = CreateFile2(name, access,
+                FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING, &param);
+#else
         self->handle = CreateFileW(name, GENERIC_READ | GENERIC_WRITE,
             FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
         if (self->handle == INVALID_HANDLE_VALUE)
             self->handle = CreateFileW(name, access,
                 FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
+#endif
         Py_END_ALLOW_THREADS
 
         if (self->handle == INVALID_HANDLE_VALUE) {
diff --git a/Modules/_randommodule.c b/Modules/_randommodule.c
index 4e9ac4073c..b6c4cce977 100644
--- a/Modules/_randommodule.c
+++ b/Modules/_randommodule.c
@@ -71,6 +71,10 @@
 #ifdef HAVE_PROCESS_H
 #  include <process.h>          /* needed for getpid() */
 #endif
+#ifdef MS_WINDOWS_STORE
+#  define WIN32_LEAN_AND_MEAN
+#  include <windows.h>          /* needed for getpid()/GetCurrentProcessId() */
+#endif
 
 /* Period parameters -- These are all magic.  Don't change. */
 #define N 624
diff --git a/Modules/_stat.c b/Modules/_stat.c
index 6a3020a00d..db6182dc8e 100644
--- a/Modules/_stat.c
+++ b/Modules/_stat.c
@@ -244,6 +244,10 @@ typedef unsigned short mode_t;
 #  define SF_SNAPSHOT 0x00200000
 #endif
 
+#ifndef IO_REPARSE_TAG_APPEXECLINK
+#  define IO_REPARSE_TAG_APPEXECLINK 0x8000001BL
+#endif
+
 static mode_t
 _PyLong_AsMode_t(PyObject *op)
 {
diff --git a/Modules/clinic/posixmodule.c.h b/Modules/clinic/posixmodule.c.h
index c0d1d4df79..301eed6165 100644
--- a/Modules/clinic/posixmodule.c.h
+++ b/Modules/clinic/posixmodule.c.h
@@ -8104,7 +8104,7 @@ exit:
 
 #endif /* defined(HAVE_GETRANDOM_SYSCALL) */
 
-#if defined(MS_WINDOWS)
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
 
 PyDoc_STRVAR(os__add_dll_directory__doc__,
 "_add_dll_directory($module, /, path)\n"
@@ -8150,9 +8150,9 @@ exit:
     return return_value;
 }
 
-#endif /* defined(MS_WINDOWS) */
+#endif /* defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE) */
 
-#if defined(MS_WINDOWS)
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
 
 PyDoc_STRVAR(os__remove_dll_directory__doc__,
 "_remove_dll_directory($module, /, cookie)\n"
@@ -8190,7 +8190,7 @@ exit:
     return return_value;
 }
 
-#endif /* defined(MS_WINDOWS) */
+#endif /* defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE) */
 
 #ifndef OS_TTYNAME_METHODDEF
     #define OS_TTYNAME_METHODDEF
diff --git a/Modules/faulthandler.c b/Modules/faulthandler.c
index 230cde4934..3da1a13439 100644
--- a/Modules/faulthandler.c
+++ b/Modules/faulthandler.c
@@ -473,7 +473,7 @@ faulthandler_enable(void)
         handler->enabled = 1;
     }
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     assert(fatal_error.exc_handler == NULL);
     fatal_error.exc_handler = AddVectoredExceptionHandler(1, faulthandler_exc_handler);
 #endif
@@ -525,7 +525,7 @@ faulthandler_disable(void)
             faulthandler_disable_fatal_handler(handler);
         }
     }
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     if (fatal_error.exc_handler != NULL) {
         RemoveVectoredExceptionHandler(fatal_error.exc_handler);
         fatal_error.exc_handler = NULL;
@@ -923,7 +923,7 @@ faulthandler_unregister_py(PyObject *self, PyObject *args)
 static void
 faulthandler_suppress_crash_report(void)
 {
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     UINT mode;
 
     /* Configure Windows to not display the Windows Error Reporting dialog */
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 850769fd95..2eff367cfc 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -163,7 +163,9 @@ corresponding Unix manual entries for more information on calls.");
 #endif
 
 #if defined(MS_WINDOWS)
+#if !defined(MS_WINDOWS_STORE)
 #  define TERMSIZE_USE_CONIO
+#endif
 #elif defined(HAVE_SYS_IOCTL_H)
 #  include <sys/ioctl.h>
 #  if defined(HAVE_TERMIOS_H)
@@ -181,9 +183,11 @@ corresponding Unix manual entries for more information on calls.");
 #define HAVE_SYSTEM     1
 #include <process.h>
 #else
-#ifdef _MSC_VER         /* Microsoft compiler */
+#if defined(_MSC_VER) || defined(__MINGW32__)         /* Microsoft compiler or MinGW */
+#ifndef MS_WINDOWS_STORE
 #define HAVE_GETPPID    1
 #define HAVE_GETLOGIN   1
+#endif  /* ! MS_WINDOWS_STORE */
 #define HAVE_SPAWNV     1
 #define HAVE_EXECV      1
 #define HAVE_WSPAWNV    1
@@ -213,7 +217,7 @@ corresponding Unix manual entries for more information on calls.");
 #define HAVE_SYSTEM     1
 #define HAVE_WAIT       1
 #define HAVE_TTYNAME    1
-#endif  /* _MSC_VER */
+#endif  /* _MSC_VER || __MINGW32__ */
 #endif  /* ! __WATCOMC__ || __QNX__ */
 
 
@@ -223,7 +227,7 @@ module os
 [clinic start generated code]*/
 /*[clinic end generated code: output=da39a3ee5e6b4b0d input=94a0f0f978acae17]*/
 
-#ifndef _MSC_VER
+#if !defined(_MSC_VER) && !defined(__MINGW32__)
 
 #if defined(__sgi)&&_COMPILER_VERSION>=700
 /* declare ctermid_r if compiling with MIPSPro 7.x in ANSI C mode
@@ -231,7 +235,7 @@ module os
 extern char        *ctermid_r(char *);
 #endif
 
-#endif /* !_MSC_VER */
+#endif /* !_MSC_VER && !__MINGW32__ */
 
 #if defined(__VXWORKS__)
 #include <vxCpuLib.h>
@@ -292,7 +296,7 @@ extern char        *ctermid_r(char *);
 #endif
 #endif
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
 #ifdef HAVE_DIRECT_H
 #include <direct.h>
 #endif
@@ -313,8 +317,10 @@ extern char        *ctermid_r(char *);
 #include <windows.h>
 #include <shellapi.h>   /* for ShellExecute() */
 #include <lmcons.h>     /* for UNLEN */
+#ifndef MS_WINDOWS_STORE
 #define HAVE_SYMLINK
-#endif /* _MSC_VER */
+#endif
+#endif /* _MSC_VER || __MINGW32__ */
 
 #ifndef MAXPATHLEN
 #if defined(PATH_MAX) && PATH_MAX > 1024
@@ -1663,6 +1669,9 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
                  BOOL traverse)
 {
     HANDLE hFile;
+#ifdef MS_WINDOWS_STORE
+    CREATEFILE2_EXTENDED_PARAMETERS param;
+#endif
     BY_HANDLE_FILE_INFORMATION fileInfo;
     FILE_ATTRIBUTE_TAG_INFO tagInfo = { 0 };
     DWORD fileType, error;
@@ -1675,7 +1684,15 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
         flags |= FILE_FLAG_OPEN_REPARSE_POINT;
     }
 
+#ifdef MS_WINDOWS_STORE
+    ZeroMemory(&param, sizeof(param));
+    param.dwSize = sizeof(param);
+    param.dwFileAttributes = FILE_ATTRIBUTE_NORMAL;
+    param.dwFileFlags = flags;
+    hFile = CreateFile2(path, access, 0, OPEN_EXISTING, &param);
+#else
     hFile = CreateFileW(path, access, 0, NULL, OPEN_EXISTING, flags, NULL);
+#endif
     if (hFile == INVALID_HANDLE_VALUE) {
         /* Either the path doesn't exist, or the caller lacks access. */
         error = GetLastError();
@@ -1700,9 +1717,15 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
 
         case ERROR_INVALID_PARAMETER:
             /* \\.\con requires read or write access. */
+#ifdef MS_WINDOWS_STORE
+            hFile = CreateFile2(path, access | GENERIC_READ,
+                        FILE_SHARE_READ | FILE_SHARE_WRITE,
+                        OPEN_EXISTING, &param);
+#else
             hFile = CreateFileW(path, access | GENERIC_READ,
                         FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                         OPEN_EXISTING, flags, NULL);
+#endif
             if (hFile == INVALID_HANDLE_VALUE) {
                 SetLastError(error);
                 return -1;
@@ -1714,8 +1737,13 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
             if (traverse) {
                 traverse = FALSE;
                 isUnhandledTag = TRUE;
+#ifdef MS_WINDOWS_STORE
+                param.dwFileFlags = flags | FILE_FLAG_OPEN_REPARSE_POINT;
+                hFile = CreateFile2(path, access, 0, OPEN_EXISTING, &param);
+#else
                 hFile = CreateFileW(path, access, 0, NULL, OPEN_EXISTING,
                             flags | FILE_FLAG_OPEN_REPARSE_POINT, NULL);
+#endif
             }
             if (hFile == INVALID_HANDLE_VALUE) {
                 SetLastError(error);
@@ -3508,7 +3536,7 @@ os_getcwdb_impl(PyObject *module)
 }
 
 
-#if ((!defined(HAVE_LINK)) && defined(MS_WINDOWS))
+#if ((!defined(HAVE_LINK)) && defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE))
 #define HAVE_LINK 1
 #endif
 
@@ -3894,8 +3922,23 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
     int buf_size = Py_ARRAY_LENGTH(buf);
     int result_length;
     PyObject *result;
+#ifdef MS_WINDOWS_STORE
+    CREATEFILE2_EXTENDED_PARAMETERS param;
+#endif
 
     Py_BEGIN_ALLOW_THREADS
+#ifdef MS_WINDOWS_STORE
+    ZeroMemory(&param, sizeof(param));
+    param.dwSize = sizeof(param);
+    /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
+    param.dwFileFlags = FILE_FLAG_BACKUP_SEMANTICS;
+    hFile = CreateFile2(
+        path->wide,
+        0, /* desired access */
+        0, /* share mode */
+        OPEN_EXISTING,
+        &param);
+#else
     hFile = CreateFileW(
         path->wide,
         0, /* desired access */
@@ -3905,6 +3948,7 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
         /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
         FILE_FLAG_BACKUP_SEMANTICS,
         NULL);
+#endif
     Py_END_ALLOW_THREADS
 
     if (hFile == INVALID_HANDLE_VALUE) {
@@ -3967,6 +4011,9 @@ static PyObject *
 os__getvolumepathname_impl(PyObject *module, path_t *path)
 /*[clinic end generated code: output=804c63fd13a1330b input=722b40565fa21552]*/
 {
+#ifdef MS_WINDOWS_STORE
+    return NULL;
+#else
     PyObject *result;
     wchar_t *mountpath=NULL;
     size_t buflen;
@@ -4000,6 +4047,7 @@ os__getvolumepathname_impl(PyObject *module, path_t *path)
 exit:
     PyMem_Free(mountpath);
     return result;
+#endif
 }
 
 #endif /* MS_WINDOWS */
@@ -4781,6 +4829,9 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
 #ifdef MS_WINDOWS
     HANDLE hFile;
     FILETIME atime, mtime;
+#ifdef MS_WINDOWS_STORE
+    CREATEFILE2_EXTENDED_PARAMETERS param;
+#endif
 #else
     int result;
 #endif
@@ -4857,9 +4908,18 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
 
 #ifdef MS_WINDOWS
     Py_BEGIN_ALLOW_THREADS
+#ifdef MS_WINDOWS_STORE
+    ZeroMemory(&param, sizeof(param));
+    param.dwSize = sizeof(param);
+    param.dwFileFlags = FILE_FLAG_BACKUP_SEMANTICS;
+    hFile = CreateFile2(path->wide, FILE_WRITE_ATTRIBUTES, 0,
+                        OPEN_EXISTING,
+                        &param);
+#else
     hFile = CreateFileW(path->wide, FILE_WRITE_ATTRIBUTES, 0,
                         NULL, OPEN_EXISTING,
                         FILE_FLAG_BACKUP_SEMANTICS, NULL);
+#endif
     Py_END_ALLOW_THREADS
     if (hFile == INVALID_HANDLE_VALUE) {
         path_error(path);
@@ -7183,9 +7243,9 @@ os_getuid_impl(PyObject *module)
 #endif /* HAVE_GETUID */
 
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
 #define HAVE_KILL
-#endif /* MS_WINDOWS */
+#endif /* MS_WINDOWS && !MS_WINDOWS_STORE */
 
 #ifdef HAVE_KILL
 /*[clinic input]
@@ -7822,7 +7882,7 @@ os_readlink_impl(PyObject *module, path_t *path, int dir_fd)
         return PyUnicode_DecodeFSDefaultAndSize(buffer, length);
     else
         return PyBytes_FromStringAndSize(buffer, length);
-#elif defined(MS_WINDOWS)
+#elif defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     DWORD n_bytes_returned;
     DWORD io_result = 0;
     HANDLE reparse_point_handle;
@@ -11541,6 +11601,13 @@ os_abort_impl(PyObject *module)
 }
 
 #ifdef MS_WINDOWS
+#ifdef MS_WINDOWS_STORE
+static PyObject *
+os_startfile_impl(PyObject *module, path_t *filepath, Py_UNICODE *operation)
+{
+    Py_RETURN_NONE;
+}
+#else
 /* Grab ShellExecute dynamically from shell32 */
 static int has_ShellExecute = -1;
 static HINSTANCE (CALLBACK *Py_ShellExecuteW)(HWND, LPCWSTR, LPCWSTR, LPCWSTR,
@@ -11619,6 +11686,7 @@ os_startfile_impl(PyObject *module, path_t *filepath,
     }
     Py_RETURN_NONE;
 }
+#endif /* MS_WINDOWS_STORE */
 #endif /* MS_WINDOWS */
 
 
@@ -12199,9 +12267,15 @@ os_cpu_count_impl(PyObject *module)
 {
     int ncpu = 0;
 #ifdef MS_WINDOWS
+#ifdef MS_WINDOWS_STORE
+    SYSTEM_INFO sysinfo;
+    GetNativeSystemInfo(&sysinfo);
+    ncpu = sysinfo.dwNumberOfProcessors;
+#else
     /* Declare prototype here to avoid pulling in all of the Win7 APIs in 3.8 */
     DWORD WINAPI GetActiveProcessorCount(WORD group);
     ncpu = GetActiveProcessorCount(ALL_PROCESSOR_GROUPS);
+#endif
 #elif defined(__hpux)
     ncpu = mpctl(MPC_GETNUMSPUS, NULL, NULL);
 #elif defined(HAVE_SYSCONF) && defined(_SC_NPROCESSORS_ONLN)
@@ -12283,6 +12357,10 @@ static int
 os_get_handle_inheritable_impl(PyObject *module, intptr_t handle)
 /*[clinic end generated code: output=36be5afca6ea84d8 input=cfe99f9c05c70ad1]*/
 {
+#ifdef MS_WINDOWS_STORE
+    /* No subprocesses on UWP */
+    return 0;
+#else
     DWORD flags;
 
     if (!GetHandleInformation((HANDLE)handle, &flags)) {
@@ -12291,6 +12369,7 @@ os_get_handle_inheritable_impl(PyObject *module, intptr_t handle)
     }
 
     return flags & HANDLE_FLAG_INHERIT;
+#endif
 }
 
 
@@ -12308,12 +12387,17 @@ os_set_handle_inheritable_impl(PyObject *module, intptr_t handle,
                                int inheritable)
 /*[clinic end generated code: output=021d74fe6c96baa3 input=7a7641390d8364fc]*/
 {
+#ifdef MS_WINDOWS_STORE
+    PyErr_SetString(PyExc_NotImplementedError, "No subprocesses on UWP");
+    return NULL;
+#else
     DWORD flags = inheritable ? HANDLE_FLAG_INHERIT : 0;
     if (!SetHandleInformation((HANDLE)handle, HANDLE_FLAG_INHERIT, flags)) {
         PyErr_SetFromWindowsErr(0);
         return NULL;
     }
     Py_RETURN_NONE;
+#endif
 }
 #endif /* MS_WINDOWS */
 
@@ -13427,7 +13511,7 @@ error:
 }
 #endif   /* HAVE_GETRANDOM_SYSCALL */
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
 /* bpo-36085: Helper functions for managing DLL search directories
  * on win32
  */
@@ -13611,7 +13695,7 @@ static PyMethodDef posix_methods[] = {
     OS_KILL_METHODDEF
     OS_KILLPG_METHODDEF
     OS_PLOCK_METHODDEF
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     OS_STARTFILE_METHODDEF
 #endif
     OS_SETUID_METHODDEF
@@ -13691,10 +13775,12 @@ static PyMethodDef posix_methods[] = {
     OS_FPATHCONF_METHODDEF
     OS_PATHCONF_METHODDEF
     OS_ABORT_METHODDEF
+#ifndef MS_WINDOWS_STORE
     OS__GETFULLPATHNAME_METHODDEF
     OS__GETDISKUSAGE_METHODDEF
     OS__GETFINALPATHNAME_METHODDEF
     OS__GETVOLUMEPATHNAME_METHODDEF
+#endif
     OS_GETLOADAVG_METHODDEF
     OS_URANDOM_METHODDEF
     OS_SETRESUID_METHODDEF
@@ -13723,7 +13809,7 @@ static PyMethodDef posix_methods[] = {
     OS_FSPATH_METHODDEF
     OS_GETRANDOM_METHODDEF
     OS_MEMFD_CREATE_METHODDEF
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     OS__ADD_DLL_DIRECTORY_METHODDEF
     OS__REMOVE_DLL_DIRECTORY_METHODDEF
 #endif
@@ -14226,7 +14312,7 @@ all_ins(PyObject *m)
     if (PyModule_AddIntConstant(m, "_COPYFILE_DATA", COPYFILE_DATA)) return -1;
 #endif
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(MS_WINDOWS_STORE)
     if (PyModule_AddIntConstant(m, "_LOAD_LIBRARY_SEARCH_DEFAULT_DIRS", LOAD_LIBRARY_SEARCH_DEFAULT_DIRS)) return -1;
     if (PyModule_AddIntConstant(m, "_LOAD_LIBRARY_SEARCH_APPLICATION_DIR", LOAD_LIBRARY_SEARCH_APPLICATION_DIR)) return -1;
     if (PyModule_AddIntConstant(m, "_LOAD_LIBRARY_SEARCH_SYSTEM32", LOAD_LIBRARY_SEARCH_SYSTEM32)) return -1;
diff --git a/PC/getpathp.c b/PC/getpathp.c
index 04f24d986f..8f4492c242 100644
--- a/PC/getpathp.c
+++ b/PC/getpathp.c
@@ -241,15 +241,22 @@ ismodule(wchar_t *filename, int update_filename)
    stuff as fits will be appended.
 */
 
+#ifndef MS_WINDOWS_STORE
 static int _PathCchCombineEx_Initialized = 0;
 typedef HRESULT(__stdcall *PPathCchCombineEx) (PWSTR pszPathOut, size_t cchPathOut,
                                                PCWSTR pszPathIn, PCWSTR pszMore,
                                                unsigned long dwFlags);
 static PPathCchCombineEx _PathCchCombineEx;
+#endif
 
 static void
 join(wchar_t *buffer, const wchar_t *stuff)
 {
+#ifdef MS_WINDOWS_STORE
+    if (FAILED(PathCchCombineEx(buffer, MAXPATHLEN+1, buffer, stuff, 0))) {
+        Py_FatalError("buffer overflow in getpathp.c's join()");
+    }
+#else
     if (_PathCchCombineEx_Initialized == 0) {
         HMODULE pathapi = LoadLibraryW(L"api-ms-win-core-path-l1-1-0.dll");
         if (pathapi) {
@@ -270,12 +277,15 @@ join(wchar_t *buffer, const wchar_t *stuff)
             Py_FatalError("buffer overflow in getpathp.c's join()");
         }
     }
+#endif
 }
 
+#ifndef MS_WINDOWS_STORE
 static int _PathCchCanonicalizeEx_Initialized = 0;
 typedef HRESULT(__stdcall *PPathCchCanonicalizeEx) (PWSTR pszPathOut, size_t cchPathOut,
     PCWSTR pszPathIn, unsigned long dwFlags);
 static PPathCchCanonicalizeEx _PathCchCanonicalizeEx;
+#endif
 
 /* Call PathCchCanonicalizeEx(path): remove navigation elements such as "."
    and ".." to produce a direct, well-formed path. */
@@ -286,6 +296,11 @@ canonicalize(wchar_t *buffer, const wchar_t *path)
         return _PyStatus_NO_MEMORY();
     }
 
+#ifdef MS_WINDOWS_STORE
+    if (FAILED(PathCchCanonicalizeEx(buffer, MAXPATHLEN + 1, path, 0))) {
+        Py_FatalError("buffer overflow in getpathp.c's canonicalize()");
+    }
+#else
     if (_PathCchCanonicalizeEx_Initialized == 0) {
         HMODULE pathapi = LoadLibraryW(L"api-ms-win-core-path-l1-1-0.dll");
         if (pathapi) {
@@ -307,6 +322,7 @@ canonicalize(wchar_t *buffer, const wchar_t *path)
             return INIT_ERR_BUFFER_OVERFLOW();
         }
     }
+#endif
     return _PyStatus_OK();
 }
 
@@ -1145,6 +1161,9 @@ static HANDLE hPython3;
 int
 _Py_CheckPython3(void)
 {
+#ifdef MS_WINDOWS_STORE
+    return 0;
+#else
     wchar_t py3path[MAXPATHLEN+1];
     wchar_t *s;
     if (python3_checked) {
@@ -1175,4 +1194,5 @@ _Py_CheckPython3(void)
     wcscat(py3path, L"\\DLLs\\python3.dll");
     hPython3 = LoadLibraryExW(py3path, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
     return hPython3 != NULL;
+#endif
 }
diff --git a/PC/pyconfig.h b/PC/pyconfig.h
index b40e24f438..34dea875f4 100644
--- a/PC/pyconfig.h
+++ b/PC/pyconfig.h
@@ -14,6 +14,8 @@ the following #defines
 MS_WIN64 - Code specific to the MS Win64 API
 MS_WIN32 - Code specific to the MS Win32 (and Win64) API (obsolete, this covers all supported APIs)
 MS_WINDOWS - Code specific to Windows, but all versions.
+MS_WINDOWS_DESKTOP - Code specific to the MS Windows desktop API
+MS_WINDOWS_STORE - Code specific to the MS Windows store (UWP) API
 Py_ENABLE_SHARED - Code if the Python core is built as a DLL.
 
 Also note that neither "_M_IX86" or "_MSC_VER" should be used for
@@ -48,6 +50,21 @@ WIN32 is still required for the locale module.
 #define _CRT_NONSTDC_NO_DEPRECATE 1
 #endif
 
+#if (_WIN32_WINNT >= 0x0A00 /* _WIN32_WINNT_WIN8 */)
+#  include <winapifamily.h>
+#  if defined(WINAPI_FAMILY)
+#    if WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP
+#      define MS_WINDOWS_DESKTOP
+#    else
+#      define MS_WINDOWS_STORE
+#    endif
+#  else
+#    define MS_WINDOWS_DESKTOP
+#  endif
+#else
+#  define MS_WINDOWS_DESKTOP
+#endif
+
 #define HAVE_IO_H
 #define HAVE_SYS_UTIME_H
 #define HAVE_TEMPNAM
@@ -405,7 +422,9 @@ Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
 
 /* Define if you don't have tm_zone but do have the external array
    tzname.  */
+#ifndef MS_WINDOWS_STORE
 #define HAVE_TZNAME
+#endif
 
 /* Define to `int' if <sys/types.h> doesn't define.  */
 /* #undef mode_t */
@@ -500,6 +519,10 @@ Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
 /* Define if you have getpid.  */
 #define HAVE_GETPID
 
+#ifdef MS_WINDOWS_STORE
+#define getpid GetCurrentProcessId
+#endif
+
 /* Define if you have gettimeofday.  */
 /* #undef HAVE_GETTIMEOFDAY */
 
diff --git a/PC/winreg.c b/PC/winreg.c
index 5dff7deadf..449aa059d2 100644
--- a/PC/winreg.c
+++ b/PC/winreg.c
@@ -106,6 +106,84 @@ PyDoc_STRVAR(PyHKEY_doc,
   The PyHKEY object definition
 
 ************************************************************************/
+#ifdef MS_WINDOWS_STORE
+/* Windows Runtime: provide all functions as not-implemented.  */
+#define _not_implemented(fn) \
+    static PyObject* winreg_##fn(PyObject *self, PyObject *args) { \
+    PyErr_SetExcFromWindowsErr(PyExc_WindowsError, ERROR_ACCESS_DENIED); \
+    return NULL;  \
+    }
+_not_implemented(CloseKey)
+_not_implemented(ConnectRegistry)
+_not_implemented(CreateKey)
+_not_implemented(CreateKeyEx)
+_not_implemented(DeleteKey)
+_not_implemented(DeleteKeyEx)
+_not_implemented(DeleteValue)
+_not_implemented(DisableReflectionKey)
+_not_implemented(EnableReflectionKey)
+_not_implemented(EnumKey)
+_not_implemented(EnumValue)
+_not_implemented(ExpandEnvironmentStrings)
+_not_implemented(FlushKey)
+_not_implemented(LoadKey)
+_not_implemented(OpenKey)
+_not_implemented(OpenKeyEx)
+_not_implemented(QueryValue)
+_not_implemented(QueryValueEx)
+_not_implemented(QueryInfoKey)
+_not_implemented(QueryReflectionKey)
+_not_implemented(SaveKey)
+_not_implemented(SetValue)
+_not_implemented(SetValueEx)
+
+#define WINREG_CLOSEKEY_METHODDEF \
+    {"CloseKey", (PyCFunction)winreg_CloseKey, METH_O, NULL},
+#define WINREG_CONNECTREGISTRY_METHODDEF \
+    {"ConnectRegistry", (PyCFunction)winreg_ConnectRegistry, METH_VARARGS, NULL},
+#define WINREG_CREATEKEY_METHODDEF \
+    {"CreateKey", (PyCFunction)winreg_CreateKey, METH_VARARGS, NULL},
+#define WINREG_CREATEKEYEX_METHODDEF \
+    {"CreateKeyEx", (PyCFunction)winreg_CreateKeyEx, METH_VARARGS|METH_KEYWORDS, NULL},
+#define WINREG_DELETEKEY_METHODDEF \
+    {"DeleteKey", (PyCFunction)winreg_DeleteKey, METH_VARARGS, NULL},
+#define WINREG_DELETEKEYEX_METHODDEF \
+    {"DeleteKeyEx", (PyCFunction)winreg_DeleteKeyEx, METH_VARARGS|METH_KEYWORDS, NULL},
+#define WINREG_DELETEVALUE_METHODDEF \
+    {"DeleteValue", (PyCFunction)winreg_DeleteValue, METH_VARARGS, NULL},
+#define WINREG_DISABLEREFLECTIONKEY_METHODDEF \
+    {"DisableReflectionKey", (PyCFunction)winreg_DisableReflectionKey, METH_O, NULL},
+#define WINREG_ENABLEREFLECTIONKEY_METHODDEF \
+    {"EnableReflectionKey", (PyCFunction)winreg_EnableReflectionKey, METH_O, NULL},
+#define WINREG_ENUMKEY_METHODDEF \
+    {"EnumKey", (PyCFunction)winreg_EnumKey, METH_VARARGS, NULL},
+#define WINREG_ENUMVALUE_METHODDEF \
+    {"EnumValue", (PyCFunction)winreg_EnumValue, METH_VARARGS, NULL},
+#define WINREG_EXPANDENVIRONMENTSTRINGS_METHODDEF \
+    {"ExpandEnvironmentStrings", (PyCFunction)winreg_ExpandEnvironmentStrings, METH_O, NULL},
+#define WINREG_FLUSHKEY_METHODDEF \
+    {"FlushKey", (PyCFunction)winreg_FlushKey, METH_O, NULL},
+#define WINREG_LOADKEY_METHODDEF \
+    {"LoadKey", (PyCFunction)winreg_LoadKey, METH_VARARGS, NULL},
+#define WINREG_OPENKEY_METHODDEF \
+    {"OpenKey", (PyCFunction)winreg_OpenKey, METH_VARARGS|METH_KEYWORDS, NULL},
+#define WINREG_OPENKEYEX_METHODDEF \
+    {"OpenKeyEx", (PyCFunction)winreg_OpenKeyEx, METH_VARARGS|METH_KEYWORDS, NULL},
+#define WINREG_QUERYVALUE_METHODDEF \
+    {"QueryValue", (PyCFunction)winreg_QueryValue, METH_VARARGS, NULL},
+#define WINREG_QUERYVALUEEX_METHODDEF \
+    {"QueryValueEx", (PyCFunction)winreg_QueryValueEx, METH_VARARGS, NULL},
+#define WINREG_QUERYINFOKEY_METHODDEF \
+    {"QueryInfoKey", (PyCFunction)winreg_QueryInfoKey, METH_O, NULL},
+#define WINREG_QUERYREFLECTIONKEY_METHODDEF \
+    {"QueryReflectionKey", (PyCFunction)winreg_QueryReflectionKey, METH_O, NULL},
+#define WINREG_SAVEKEY_METHODDEF \
+    {"SaveKey", (PyCFunction)winreg_SaveKey, METH_VARARGS, NULL},
+#define WINREG_SETVALUE_METHODDEF \
+    {"SetValue", (PyCFunction)winreg_SetValue, METH_VARARGS, NULL},
+#define WINREG_SETVALUEEX_METHODDEF \
+    {"SetValueEx", (PyCFunction)winreg_SetValueEx, METH_VARARGS, NULL},
+#else
 typedef struct {
     PyObject_VAR_HEAD
     HKEY hkey;
@@ -1941,6 +2019,7 @@ winreg_QueryReflectionKey_impl(PyObject *module, HKEY key)
                                                    "RegQueryReflectionKey");
     return PyBool_FromLong(result);
 }
+#endif
 
 static struct PyMethodDef winreg_methods[] = {
     WINREG_CLOSEKEY_METHODDEF
@@ -1989,7 +2068,11 @@ inskey(PyObject * d, char * name, HKEY key)
     Py_XDECREF(v);
 }
 
+#ifdef MS_WINDOWS_STORE
+#define ADD_KEY(val) inskey(d, #val, INVALID_HANDLE_VALUE)
+#else
 #define ADD_KEY(val) inskey(d, #val, val)
+#endif
 
 
 static struct PyModuleDef winregmodule = {
@@ -2011,6 +2094,7 @@ PyMODINIT_FUNC PyInit_winreg(void)
     if (m == NULL)
         return NULL;
     d = PyModule_GetDict(m);
+#ifndef MS_WINDOWS_STORE
     PyHKEY_Type.tp_doc = PyHKEY_doc;
     if (PyType_Ready(&PyHKEY_Type) < 0)
         return NULL;
@@ -2019,6 +2103,7 @@ PyMODINIT_FUNC PyInit_winreg(void)
                              (PyObject *)&PyHKEY_Type) != 0)
         return NULL;
     Py_INCREF(PyExc_OSError);
+#endif
     if (PyDict_SetItemString(d, "error",
                              PyExc_OSError) != 0)
         return NULL;
diff --git a/Python/bootstrap_hash.c b/Python/bootstrap_hash.c
index 43f5264d86..d95b2767ad 100644
--- a/Python/bootstrap_hash.c
+++ b/Python/bootstrap_hash.c
@@ -32,11 +32,14 @@ static int _Py_HashSecret_Initialized = 0;
 #endif
 
 #ifdef MS_WINDOWS
+#ifndef MS_WINDOWS_STORE
 static HCRYPTPROV hCryptProv = 0;
+#endif
 
 static int
 win32_urandom_init(int raise)
 {
+#ifndef MS_WINDOWS_STORE
     /* Acquire context */
     if (!CryptAcquireContext(&hCryptProv, NULL, NULL,
                              PROV_RSA_FULL, CRYPT_VERIFYCONTEXT))
@@ -48,6 +51,7 @@ error:
     if (raise) {
         PyErr_SetFromWindowsErr(0);
     }
+#endif
     return -1;
 }
 
@@ -56,6 +60,9 @@ error:
 static int
 win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)
 {
+#ifdef MS_WINDOWS_STORE
+    return -1;
+#else
     if (hCryptProv == 0)
     {
         if (win32_urandom_init(raise) == -1) {
@@ -78,6 +85,7 @@ win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)
         size -= chunk;
     }
     return 0;
+#endif
 }
 
 #else /* !MS_WINDOWS */
@@ -578,10 +586,12 @@ _Py_HashRandomization_Init(const PyConfig *config)
            _PyRandom_Init() must not block Python initialization: call
            pyurandom() is non-blocking mode (blocking=0): see the PEP 524. */
         res = pyurandom(secret, secret_size, 0, 0);
+#ifndef MS_WINDOWS_STORE
         if (res < 0) {
             return _PyStatus_ERR("failed to get random numbers "
                                 "to initialize Python");
         }
+#endif
     }
     return _PyStatus_OK();
 }
@@ -591,10 +601,12 @@ void
 _Py_HashRandomization_Fini(void)
 {
 #ifdef MS_WINDOWS
+#ifndef MS_WINDOWS_STORE
     if (hCryptProv) {
         CryptReleaseContext(hCryptProv, 0);
         hCryptProv = 0;
     }
+#endif
 #else
     dev_urandom_close();
 #endif
diff --git a/Python/dynload_win.c b/Python/dynload_win.c
index 6deba1134e..33eb1ef5ac 100644
--- a/Python/dynload_win.c
+++ b/Python/dynload_win.c
@@ -192,7 +192,9 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
 #endif
 
         /* Don't display a message box when Python can't load a DLL */
+#ifndef MS_WINDOWS_STORE
         old_mode = SetErrorMode(SEM_FAILCRITICALERRORS);
+#endif
 
 #if HAVE_SXS
         cookie = _Py_ActivateActCtx();
@@ -202,16 +204,22 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
            AddDllDirectory function. We add SEARCH_DLL_LOAD_DIR to
            ensure DLLs adjacent to the PYD are preferred. */
         Py_BEGIN_ALLOW_THREADS
+#ifdef MS_WINDOWS_STORE
+        hDLL = LoadPackagedLibrary(wpathname, 0);
+#else
         hDLL = LoadLibraryExW(wpathname, NULL,
                               LOAD_LIBRARY_SEARCH_DEFAULT_DIRS |
                               LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
+#endif
         Py_END_ALLOW_THREADS
 #if HAVE_SXS
         _Py_DeactivateActCtx(cookie);
 #endif
 
         /* restore old error mode settings */
+#ifndef MS_WINDOWS_STORE
         SetErrorMode(old_mode);
+#endif
 
         if (hDLL==NULL){
             PyObject *message;
diff --git a/Python/fileutils.c b/Python/fileutils.c
index e79e732d1f..4dedc9808c 100644
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -1045,6 +1045,9 @@ static int
 get_inheritable(int fd, int raise)
 {
 #ifdef MS_WINDOWS
+#ifdef MS_WINDOWS_STORE
+    return 0;
+#else
     HANDLE handle;
     DWORD flags;
 
@@ -1064,6 +1067,7 @@ get_inheritable(int fd, int raise)
     }
 
     return (flags & HANDLE_FLAG_INHERIT);
+#endif
 #else
     int flags;
 
@@ -1092,8 +1096,10 @@ static int
 set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
 {
 #ifdef MS_WINDOWS
+#ifndef MS_WINDOWS_STORE
     HANDLE handle;
     DWORD flags;
+#endif
 #else
 #if defined(HAVE_SYS_IOCTL_H) && defined(FIOCLEX) && defined(FIONCLEX)
     static int ioctl_works = -1;
@@ -1121,6 +1127,12 @@ set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
     }
 
 #ifdef MS_WINDOWS
+#ifdef MS_WINDOWS_STORE
+    if (!inheritable)
+        return 0;
+    PyErr_SetString(PyExc_NotImplementedError, "set_inheritable is not implemented on UWP");
+    return -1;
+#else
     _Py_BEGIN_SUPPRESS_IPH
     handle = (HANDLE)_get_osfhandle(fd);
     _Py_END_SUPPRESS_IPH
@@ -1147,6 +1159,7 @@ set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
     }
 #undef CONSOLE_PSEUDOHANDLE
     return 0;
+#endif
 
 #else
 
diff --git a/Python/pytime.c b/Python/pytime.c
index 9ff300699f..9936b8dccd 100644
--- a/Python/pytime.c
+++ b/Python/pytime.c
@@ -1,6 +1,9 @@
 #include "Python.h"
 #ifdef MS_WINDOWS
 #include <windows.h>
+#ifdef MS_WINDOWS_STORE
+#  include <winsock2.h>         /* struct timeval */
+#endif
 #endif
 
 #if defined(__APPLE__)
@@ -666,11 +669,16 @@ pygettimeofday(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
        days). */
     *tp = large.QuadPart * 100 - 11644473600000000000;
     if (info) {
+#ifndef MS_WINDOWS_STORE
         DWORD timeAdjustment, timeIncrement;
         BOOL isTimeAdjustmentDisabled, ok;
+#endif
 
         info->implementation = "GetSystemTimeAsFileTime()";
         info->monotonic = 0;
+#ifdef MS_WINDOWS_STORE
+        info->resolution = -1;
+#else
         ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                                      &isTimeAdjustmentDisabled);
         if (!ok) {
@@ -678,6 +686,7 @@ pygettimeofday(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
             return -1;
         }
         info->resolution = timeIncrement * 1e-7;
+#endif
         info->adjustable = 1;
     }
 
@@ -785,10 +794,15 @@ pymonotonic(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
     *tp = t * MS_TO_NS;
 
     if (info) {
+#ifndef MS_WINDOWS_STORE
         DWORD timeAdjustment, timeIncrement;
         BOOL isTimeAdjustmentDisabled, ok;
+#endif
         info->implementation = "GetTickCount64()";
         info->monotonic = 1;
+#ifdef MS_WINDOWS_STORE
+        info->resolution = 1;
+#else
         ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                                      &isTimeAdjustmentDisabled);
         if (!ok) {
@@ -796,6 +810,7 @@ pymonotonic(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
             return -1;
         }
         info->resolution = timeIncrement * 1e-7;
+#endif
         info->adjustable = 0;
     }
 
diff --git a/Python/sysmodule.c b/Python/sysmodule.c
index da4b6e1a78..dd79f01cfd 100644
--- a/Python/sysmodule.c
+++ b/Python/sysmodule.c
@@ -1430,6 +1430,7 @@ sys_getwindowsversion_impl(PyObject *module)
     realMinor = ver.dwMinorVersion;
     realBuild = ver.dwBuildNumber;
 
+#ifndef MS_WINDOWS_STORE
     // GetVersion will lie if we are running in a compatibility mode.
     // We need to read the version info from a system file resource
     // to accurately identify the OS version. If we fail for any reason,
@@ -1451,6 +1452,7 @@ sys_getwindowsversion_impl(PyObject *module)
         }
         PyMem_RawFree(verblock);
     }
+#endif
     PyStructSequence_SET_ITEM(version, pos++, Py_BuildValue("(kkk)",
         realMajor,
         realMinor,
-- 
2.17.1.windows.2

