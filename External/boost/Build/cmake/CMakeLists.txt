PROJECT(boost)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

OPTION(WITH_ATOMIC "Build with atomic" OFF)
OPTION(WITH_CHRONO "Build with chrono" OFF)
OPTION(WITH_DATE_TIME "Build with date_time" OFF)
OPTION(WITH_FILESYSTEM "Build with filesystem" OFF)
OPTION(WITH_PROGRAM_OPTIONS "Build with program_options" OFF)
OPTION(WITH_REGEX "Build with regex" OFF)
OPTION(WITH_SYSTEM "Build with system" OFF)
OPTION(WITH_TEST "Build with test" OFF)
OPTION(WITH_THREAD "Build with thread" OFF)

SET(BOOST_MAJOR_VERSION 1)
SET(BOOST_MINOR_VERSION 58)
SET(BOOST_VERSION ${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION})

FIND_PACKAGE(PythonInterp)

SET(BOOST_PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../..")
SET(KLAYGE_ROOT_DIR "${BOOST_PROJECT_DIR}/../..")

INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Common.cmake)
INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Platform.cmake)
INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Compiler.cmake)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

SET(BOOST_OUTPUT_DIR "${BOOST_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME}")
SET(KLAYGE_BIN_DIR "${KLAYGE_ROOT_DIR}/KlayGE/bin/${KLAYGE_PLATFORM_NAME}")
SET(REL_PATH "External/Downloads/boost_${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_0.patched.7z")
SET(DST_PATH "${KLAYGE_ROOT_DIR}/External/boost/boost/version.hpp")
SET(SEVENZIP_PATH "${KLAYGE_ROOT_DIR}/External/Downloads/${KLAYGE_PLATFORM_NAME}/7z")

SET(REGEN FALSE)
IF(EXISTS ${DST_PATH})
	SET(BOOST_VERSION_STR 0)
	FILE(STRINGS ${DST_PATH} BOOST_VERSION_STR REGEX "#define BOOST_LIB_VERSION ")
	STRING(FIND "${BOOST_VERSION_STR}" "${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}" POS)
	IF(NOT POS EQUAL 27)
		SET(REGEN TRUE)
	ENDIF()
ELSE()
	SET(REGEN TRUE)
ENDIF()

IF(REGEN)
	IF(KLAYGE_PLATFORM_WINDOWS)
		DOWNLOAD_FILE("External/Downloads/${KLAYGE_PLATFORM_NAME}/7z.exe" "cbda47a1678ce70b6720856736100979d469e159")
		DOWNLOAD_FILE("External/Downloads/${KLAYGE_PLATFORM_NAME}/7z.dll" "cbda47a1678ce70b6720856736100979d469e159")
	ELSE()
		DOWNLOAD_FILE("External/Downloads/${KLAYGE_PLATFORM_NAME}/7z" "cbda47a1678ce70b6720856736100979d469e159")
		DOWNLOAD_FILE("External/Downloads/${KLAYGE_PLATFORM_NAME}/7z.so" "cbda47a1678ce70b6720856736100979d469e159")
		FILE(COPY ${SEVENZIP_PATH} DESTINATION "${KLAYGE_ROOT_DIR}/External/Downloads")
		FILE(COPY "${KLAYGE_ROOT_DIR}/External/Downloads/7z" DESTINATION "${KLAYGE_ROOT_DIR}/External/Downloads/${KLAYGE_PLATFORM_NAME}/" FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)
	ENDIF()
	DOWNLOAD_FILE(${REL_PATH} "df3d6434abac841118b7ae9cdc7e92cadabea57c")

	EXECUTE_PROCESS(COMMAND "${SEVENZIP_PATH}" "x" "-y" "${KLAYGE_ROOT_DIR}/${REL_PATH}" WORKING_DIRECTORY "${KLAYGE_ROOT_DIR}/External/boost")
ENDIF()

INCLUDE(${KLAYGE_ROOT_DIR}/cmake/ConfigBoost.cmake)

IF(MSVC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /WX-")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX-")
ENDIF()

IF(KLAYGE_PLATFORM_WINDOWS_RUNTIME)
	ADD_DEFINITIONS(-DBOOST_NO_ANSI_APIS)
ENDIF()
IF(CMAKE_GENERATOR MATCHES "ARM")
	ADD_DEFINITIONS(-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE)
ENDIF()
IF(MSVC)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
	ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
ENDIF()
IF(MINGW)
	IF(KLAYGE_ARCH_NAME STREQUAL "x64")
		ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
	ENDIF()
ENDIF()
IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
	ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
ENDIF()

IF(KLAYGE_PREFERRED_LIB_TYPE STREQUAL "SHARED")
	ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK=1)
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-gd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-d")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "")
ELSE()
	ADD_DEFINITIONS(-DBOOST_All_STATIC_LINK=1)
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-sgd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-sd")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "-s")
ENDIF()

SET(BOOST_LIB_NAME_SUFFIX_DEBUG -${KLAYGE_COMPILER_NAME}${KLAYGE_COMPILER_VERSION}-mt${ABI_SUFFIX_DEBUG}-${Boost_LIB_VERSION})
SET(BOOST_LIB_NAME_SUFFIX_OPTIMIZED -${KLAYGE_COMPILER_NAME}${KLAYGE_COMPILER_VERSION}-mt${ABI_SUFFIX_OPTIMIZED}-${Boost_LIB_VERSION})

MACRO(SETUP_BOOST_LIBRARY LIB_NAME)
	SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})

	INCLUDE_DIRECTORIES(${BOOST_PROJECT_DIR}/)
	LINK_DIRECTORIES(${BOOST_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME})

	ADD_LIBRARY(${LIB_NAME} ${KLAYGE_PREFERRED_LIB_TYPE}
		${SOURCE_FILES}
	)

	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
		ARCHIVE_OUTPUT_DIRECTORY ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${BOOST_OUTPUT_DIR}
		PROJECT_LABEL ${LIB_NAME}
		DEBUG_POSTFIX ""
		DEBUG_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_DEBUG}
		RELEASE_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		RELWITHDEBINFO_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		MINSIZEREL_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	)
	IF(KLAYGE_PLATFORM_DARWIN OR KLAYGE_PLATFORM_LINUX)
		SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
			LIBRARY_OUTPUT_DIRECTORY ${KLAYGE_BIN_DIR}
			LIBRARY_OUTPUT_DIRECTORY_DEBUG ${KLAYGE_BIN_DIR}
			LIBRARY_OUTPUT_DIRECTORY_RELEASE ${KLAYGE_BIN_DIR}
			LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${KLAYGE_BIN_DIR}
			LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${KLAYGE_BIN_DIR})
	ENDIF()

	TARGET_LINK_LIBRARIES(${LIB_NAME}
		${EXTRA_LINKED_LIBRARIES})

	IF(KLAYGE_PLATFORM_WINDOWS)
		INSTALL(TARGETS ${LIB_NAME}
			RUNTIME DESTINATION ${KLAYGE_BIN_DIR}
			LIBRARY DESTINATION ${KLAYGE_BIN_DIR}
		)
	ENDIF()
ENDMACRO()

IF(WITH_ATOMIC)
	ADD_SUBDIRECTORY(atomic)
ENDIF()
IF(WITH_CHRONO)
	ADD_SUBDIRECTORY(chrono)
ENDIF()
IF(WITH_DATE_TIME)
	ADD_SUBDIRECTORY(date_time)
ENDIF()
IF(WITH_FILESYSTEM)
	ADD_SUBDIRECTORY(filesystem)
ENDIF()
IF(WITH_PROGRAM_OPTIONS)
	ADD_SUBDIRECTORY(program_options)
ENDIF()
IF(WITH_REGEX)
	ADD_SUBDIRECTORY(regex)
ENDIF()
IF(WITH_SYSTEM)
	ADD_SUBDIRECTORY(system)
ENDIF()
IF(WITH_TEST)
	ADD_SUBDIRECTORY(test)
ENDIF()
IF(WITH_THREAD)
	ADD_SUBDIRECTORY(thread)
ENDIF()
