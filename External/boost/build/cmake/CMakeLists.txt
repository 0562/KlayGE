PROJECT(boost)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

OPTION(WITH_ATOMIC "Build with atomic" OFF)
OPTION(WITH_CHRONO "Build with chrono" OFF)
OPTION(WITH_DATE_TIME "Build with date_time" OFF)
OPTION(WITH_FILESYSTEM "Build with filesystem" OFF)
OPTION(WITH_PROGRAM_OPTIONS "Build with program_options" OFF)
OPTION(WITH_REGEX "Build with regex" OFF)
OPTION(WITH_SYSTEM "Build with system" OFF)
OPTION(WITH_THREAD "Build with thread" OFF)

SET(BOOST_PROJECT_DIR "${CMAKE_HOME_DIRECTORY}/../..")
SET(KLAYGE_ROOT_DIR "${BOOST_PROJECT_DIR}/../..")

INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Common.cmake)
INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Platform.cmake)
INCLUDE(${KLAYGE_ROOT_DIR}/cmake/Compiler.cmake)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

SET(BOOST_OUTPUT_DIR "${BOOST_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME}")
SET(KLAYGE_BIN_DIR "${KLAYGE_ROOT_DIR}/KlayGE/bin/${KLAYGE_PLATFORM_NAME}")

IF(MSVC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /WX-")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX-")
ENDIF()

IF(KLAYGE_PLATFORM_WINDOWS_RUNTIME)
	ADD_DEFINITIONS(-DBOOST_NO_ANSI_APIS)
ENDIF()
IF(CMAKE_GENERATOR MATCHES "ARM")
	ADD_DEFINITIONS(-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE)
ENDIF()
IF(MSVC)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
	ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
ENDIF()
IF(MINGW)
	IF(KLAYGE_ARCH_NAME STREQUAL "x64")
		ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
	ENDIF()
ENDIF()
IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
	ADD_DEFINITIONS(-DBOOST_USE_WINDOWS_H)
ENDIF()

IF(KLAYGE_PREFERRED_LIB_TYPE STREQUAL "SHARED")
	ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK=1)
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-gd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-d")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "")
ELSE()
	ADD_DEFINITIONS(-DBOOST_All_STATIC_LINK=1)
	IF(MSVC)
		SET(ABI_SUFFIX_DEBUG "-sgd")
	ELSE()
		SET(ABI_SUFFIX_DEBUG "-sd")
	ENDIF()
	SET(ABI_SUFFIX_OPTIMIZED "-s")
ENDIF()

SET(BOOST_LIB_NAME_SUFFIX_DEBUG -${KLAYGE_COMPILER_NAME}${KLAYGE_COMPILER_VERSION}-mt${ABI_SUFFIX_DEBUG}-${Boost_LIB_VERSION})
SET(BOOST_LIB_NAME_SUFFIX_OPTIMIZED -${KLAYGE_COMPILER_NAME}${KLAYGE_COMPILER_VERSION}-mt${ABI_SUFFIX_OPTIMIZED}-${Boost_LIB_VERSION})

MACRO(SETUP_BOOST_LIBRARY LIB_NAME)
	SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})

	IF(KLAYGE_PLATFORM_WINDOWS_RUNTIME)
		ADD_DEFINITIONS(-ZW)
	ENDIF()

	INCLUDE_DIRECTORIES(${BOOST_PROJECT_DIR}/)
	LINK_DIRECTORIES(${BOOST_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME})

	ADD_LIBRARY(${LIB_NAME} ${KLAYGE_PREFERRED_LIB_TYPE}
		${SOURCE_FILES}
	)

	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
		ARCHIVE_OUTPUT_DIRECTORY ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BOOST_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${BOOST_OUTPUT_DIR}
		PROJECT_LABEL ${LIB_NAME}
		DEBUG_POSTFIX ""
		DEBUG_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_DEBUG}
		RELEASE_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		RELWITHDEBINFO_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		MINSIZEREL_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	)
	IF(KLAYGE_PLATFORM_WINDOWS_RUNTIME)
		SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VS_WINRT_EXTENSIONS TRUE)
	ENDIF()
	IF(KLAYGE_PLATFORM_DARWIN)
		SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
			LIBRARY_OUTPUT_DIRECTORY ${BOOST_OUTPUT_DIR}
			LIBRARY_OUTPUT_DIRECTORY_DEBUG ${BOOST_OUTPUT_DIR}
			LIBRARY_OUTPUT_DIRECTORY_RELEASE ${BOOST_OUTPUT_DIR}
			LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BOOST_OUTPUT_DIR}
			LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${BOOST_OUTPUT_DIR})
	ENDIF()

	TARGET_LINK_LIBRARIES(${LIB_NAME}
		${EXTRA_LINKED_LIBRARIES})

	IF(KLAYGE_PREFERRED_LIB_TYPE STREQUAL "SHARED")
		INSTALL(TARGETS ${LIB_NAME}
			RUNTIME DESTINATION ${KLAYGE_BIN_DIR}
			LIBRARY DESTINATION ${KLAYGE_BIN_DIR}
		)
	ENDIF()
ENDMACRO()

IF(WITH_ATOMIC)
	ADD_SUBDIRECTORY(atomic)
ENDIF()
IF(WITH_CHRONO)
	ADD_SUBDIRECTORY(chrono)
ENDIF()
IF(WITH_DATE_TIME)
	ADD_SUBDIRECTORY(date_time)
ENDIF()
IF(WITH_FILESYSTEM)
	ADD_SUBDIRECTORY(filesystem)
ENDIF()
IF(WITH_PROGRAM_OPTIONS)
	ADD_SUBDIRECTORY(program_options)
ENDIF()
IF(WITH_REGEX)
	ADD_SUBDIRECTORY(regex)
ENDIF()
IF(WITH_SYSTEM)
	ADD_SUBDIRECTORY(system)
ENDIF()
IF(WITH_THREAD)
	ADD_SUBDIRECTORY(thread)
ENDIF()
