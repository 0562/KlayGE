<?xml version='1.0'?>

<effect>
	<include name="GBuffer.fxml"/>
	<include name="Tessellation.fxml"/>

	<cbuffer name="less_freq">
		<parameter type="int" name="vertex_usage"/>
		<parameter type="int" name="vertex_usage_index"/>
		<parameter type="int" name="texture_slot"/>
	</cbuffer>

	<macro name="VEU_Position" value="0"/>
	<macro name="VEU_Normal" value="1"/>
	<macro name="VEU_Diffuse" value="2"/>
	<macro name="VEU_Specular" value="3"/>
	<macro name="VEU_BlendWeight" value="4"/>
	<macro name="VEU_BlendIndex" value="5"/>
	<macro name="VEU_TextureCoord" value="6"/>
	<macro name="VEU_Tangent" value="7"/>
	<macro name="VEU_Binormal" value="8"/>
	
	<macro name="TS_Diffuse" value="0"/>
	<macro name="TS_Specular" value="1"/>
	<macro name="TS_Shininess" value="2"/>
	<macro name="TS_Normal" value="3"/>
	<macro name="TS_Height" value="4"/>
	<macro name="TS_Emit" value="5"/>
	<macro name="TS_Opacity" value="6"/>

	<shader>
		<![CDATA[
void RestoreTBN(float4 tangent_quat,
		out float3 oTangent, out float3 oBinormal, out float3 oNormal)
{
	oTangent = transform_quat(float3(1, 0, 0), tangent_quat);
	oBinormal = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	oNormal = transform_quat(float3(0, 0, 1), tangent_quat);
}

void CalcPosLH(float3 pos,
				float3x3 obj_to_ts,
				out float4 oPos,
				out float2 oTsToView0_2xy,
				out float4 oTsToView0_2z,
				out float4 oTsToView1_Depth,
#ifdef NOPERSPECTIVE_SUPPORT
				out noperspective float2 oScreenTc
#else
				out float3 oScreenTc
#endif
				)
{
	oPos = mul(float4(pos, 1), mvp);

	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTsToView0_2xy.xy = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;
	
	oTsToView1_Depth.w = oPos.w;
	
	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;
	
#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float4 VisualizeVertex(float3 pos, float3 tangent, float3 binormal, float3 normal,
						float4 blend_weights, int4 blend_indices, float2 tex)
{
	float4 oClr;
	if (VEU_Position == vertex_usage)
	{
		oClr = float4(pos, 1);
	}
	else if (VEU_Normal == vertex_usage)
	{
		oClr = float4(normal / 2 + 0.5f, 1);
	}
	else if (VEU_BlendWeight == vertex_usage)
	{
		oClr = blend_weights;
	}
	else if (VEU_BlendIndex == vertex_usage)
	{
		oClr = blend_indices / 255.0f;
	}
	else if (VEU_TextureCoord == vertex_usage)
	{
		oClr = float4(tex, 0, 1);
	}
	else if (VEU_Tangent == vertex_usage)
	{
		oClr = float4(tangent / 2 + 0.5f, 1);
	}
	else// if (VEU_Binormal == vertex_usage)
	{
		oClr = float4(binormal / 2 + 0.5f, 1);
	}

	return oClr;
}

float4 VisualizeTexture(float2 tex0)
{
	float4 ret;
	if (TS_Diffuse == texture_slot)
	{
		if (diffuse_clr.w > 0.5f)
		{
			ret = float4(diffuse_tex.Sample(aniso_sampler, tex0).rgb, 1);
		}
		else
		{
			ret = float4(diffuse_clr.rgb, 1);
		}
	}
	else if (TS_Specular == texture_slot)
	{
		if (specular_clr.w > 0.5f)
		{
			ret = float4(specular_tex.Sample(aniso_sampler, tex0).rgb, 1);
		}
		else
		{
			ret = float4(specular_clr.rgb, 1);
		}
	}
	else if (TS_Shininess == texture_slot)
	{
		if (shininess_clr.y > 0.5f)
		{
			ret = float4(shininess_tex.Sample(aniso_sampler, tex0).rrr, 1);
		}
		else
		{
			ret = float4(shininess_clr.rrr, 1);
		}
	}
	else if (TS_Normal == texture_slot)
	{
		if (normal_map_enabled)
		{
			ret = float4(decompress_normal(normal_tex.Sample(aniso_sampler, tex0)).rgb, 1);
		}
		else
		{
			ret = float4(0, 0, 1, 1);
		}
	}
	else if (TS_Height == texture_slot)
	{
		if (height_map_enabled)
		{
			ret = float4(height_tex.Sample(aniso_sampler, tex0).rrr, 1);
		}
		else
		{
			ret = float4(0, 0, 0, 1);
		}
	}
	else if (TS_Emit == texture_slot)
	{
		if (emit_clr.w > 0.5f)
		{
			ret = float4(emit_tex.Sample(aniso_sampler, tex0).rgb * 16, 1);
		}
		else
		{
			ret = float4(emit_clr.rgb, 1);
		}
	}
	else //if (TS_Opacity == texture_slot)
	{
		if (opacity_map_enabled)
		{
			ret = diffuse_tex.Sample(aniso_sampler, tex0).a;
		}
		else
		{
			ret = opacity_clr;
		}
	}

	return ret;
}

void VisualizeVertexVS(float4 pos : POSITION,
				float2 texcoord : TEXCOORD0,
				float4 tangent_quat	: TANGENT,	// in object space
#if SKINNING_ON
				float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
				float4 blend_indices_f : BLENDINDICES,
#else
				uint4 blend_indices : BLENDINDICES,
#endif
#endif
				out float4 oClr : COLOR,
				out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;
	
	float3 result_pos;
	float4 result_tangent_quat;
	float2 oTex;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTex, result_pos,
				result_tangent_quat);
				
	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);

	oPos = mul(float4(result_pos, 1), mvp);
	oClr = VisualizeVertex(result_pos, obj_to_ts[0], obj_to_ts[1], obj_to_ts[2], blend_weights, blend_indices, oTex);
}

float4 VisualizeVertexRT0PS() : SV_Target
{
	return 0;
}

float4 VisualizeVertexRT1PS(float4 clr : COLOR) : SV_Target
{
	return clr;
}

void VisualizeVertexMRTPS(float4 clr : COLOR,
				out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	mrt_1 = clr;
}

float4 VisualizeTextureRT0PS() : SV_Target
{
	return 0;
}

float4 VisualizeTextureRT1PS(float2 tex0 : TEXCOORD0) : SV_Target
{
	return VisualizeTexture(tex0);
}

void VisualizeTextureMRTPS(float2 tex0 : TEXCOORD0,
				out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	mrt_1 = VisualizeTexture(tex0);
}
		]]>
	</shader>

	<technique name="VisualizeVertexRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="VisualizeVertexVS()"/>
			<state name="pixel_shader" value="VisualizeVertexRT0PS()"/>
		</pass>
	</technique>

	<technique name="VisualizeVertexRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="VisualizeVertexVS()"/>
			<state name="pixel_shader" value="VisualizeVertexRT1PS()"/>
		</pass>
	</technique>

	<technique name="VisualizeVertexMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="VisualizeVertexVS()"/>
			<state name="pixel_shader" value="VisualizeVertexMRTPS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="VisualizeTextureRT0PS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="VisualizeTextureRT1PS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="VisualizeTextureMRTPS()"/>
		</pass>
	</technique>


	<parameter type="bool" name="adaptive_tess"/>
	<parameter type="float4" name="tess_factors"/>
	<parameter type="int2" name="frame_size"/>
	<parameter type="float3" name="view_vec"/>

	<shader version="5">
		<![CDATA[
struct CONTROL_POINT
{
	float3 Pos : POSITION;
	float2 Texcoord0 : TEXCOORD0;
	float4 TangentQuat : TEXCOORD1;
};

CONTROL_POINT SmoothVS(float4 pos : POSITION,
				float2 texcoord : TEXCOORD0,				
				float4 tangent_quat	: TANGENT
#if SKINNING_ON
				, float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
				float4 blend_indices_f : BLENDINDICES
#else
				uint4 blend_indices : BLENDINDICES
#endif
#endif
)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#endif

	CONTROL_POINT output;

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				output.Texcoord0, output.Pos,
				output.TangentQuat);

	return output;
}

struct HS_CONSTANT_DATA_OUTPUT
{
	// Tess factor for the FF HW block
	float edges[3]	: SV_TessFactor;
	float inside	: SV_InsideTessFactor;
};

float2 ScreenCoord(float3 pos)
{
	float4 p = mul(float4(pos, 1), mvp);
	p /= p.w;
	p.y *= KLAYGE_FLIPPING;
	return (p.xy * 0.5f + 0.5f) * frame_size;
}

float3 OrientationFactor(float3 orientation)
{
	const float ORIENTATION_THRESHOLD = 0.05f;

	float3 f = 1 - abs(orientation);
	return (f - ORIENTATION_THRESHOLD) / (1 - ORIENTATION_THRESHOLD);
}

float EdgeFactor(float2 p0_ss, float2 p1_ss, float3 p0_ws, float3 p1_ws)
{
	float np = distance(p0_ss, p1_ss);
	float dist = length(mul(float4((p0_ws + p1_ws) / 2, 1), model_view).xyz);
	return np / dist;
}

//--------------------------------------------------------------------------------------
// Constant data function for the SmoothHS.  This is executed once per patch.
//--------------------------------------------------------------------------------------
HS_CONSTANT_DATA_OUTPUT SmoothConstantsHS(InputPatch<CONTROL_POINT, 3> ip)
{	
	HS_CONSTANT_DATA_OUTPUT output;

	if (adaptive_tess)
	{
		const float BACK_FACE_THRESHOLD = 0.4f;
		
		float3 normal0 = transform_quat(float3(0, 0, 1), ip[0].TangentQuat);
		float3 normal1 = transform_quat(float3(0, 0, 1), ip[1].TangentQuat);
		float3 normal2 = transform_quat(float3(0, 0, 1), ip[2].TangentQuat);
		
		float3 edge0_normal = (normal2 + normal0) * 0.5f;
		float3 edge1_normal = (normal0 + normal1) * 0.5f;
		float3 edge2_normal = (normal1 + normal2) * 0.5f;

		float3 orientation;
		orientation.x = dot(edge0_normal, view_vec);
		orientation.y = dot(edge1_normal, view_vec);
		orientation.z = dot(edge2_normal, view_vec);
		
		if (all(orientation > BACK_FACE_THRESHOLD))
		{
			output.inside = 0;
			output.edges[0] = 0;
			output.edges[1] = 0;
			output.edges[2] = 0;
		}
		else
		{
			float2 p0 = ScreenCoord(ip[0].Pos);
			float2 p1 = ScreenCoord(ip[1].Pos);
			float2 p2 = ScreenCoord(ip[2].Pos);

			float3 edges_factors = OrientationFactor(orientation)
				* float3(EdgeFactor(p2, p0, ip[2].Pos, ip[0].Pos),
					EdgeFactor(p0, p1, ip[0].Pos, ip[1].Pos),
					EdgeFactor(p1, p2, ip[1].Pos, ip[2].Pos))
				* tess_factors.x * 0.3f;

			output.edges[0] = clamp(edges_factors.x, tess_factors.z, tess_factors.w);
			output.edges[1] = clamp(edges_factors.y, tess_factors.z, tess_factors.w);
			output.edges[2] = clamp(edges_factors.z, tess_factors.z, tess_factors.w);
			output.inside = clamp((edges_factors.x + edges_factors.y + edges_factors.z) / 3,
				tess_factors.z, tess_factors.w);
		}
	}
	else
	{
		// Simply output the tessellation factors from constant space 
		// for use by the FF tessellation unit
		output.edges[0] = output.edges[1] = output.edges[2] = tess_factors.x;
		output.inside = tess_factors.y;
	}

	return output;
}

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("SmoothConstantsHS")]
CONTROL_POINT SmoothHS(InputPatch<CONTROL_POINT, 3> p, 
								uint i : SV_OutputControlPointID)
{
	return p[i];
}

[domain("tri")]
void SmoothDS(HS_CONSTANT_DATA_OUTPUT HSConstantData, 
							float3 bc_coords : SV_DomainLocation,
							const OutputPatch<CONTROL_POINT, 3> patch,

							out float4 oTexCoord_2xy : TEXCOORD0,
							out float4 oTsToView0_2z : TEXCOORD1,
							out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
							out noperspective float2 oScreenTc : TEXCOORD3,
#else
							out float3 oScreenTc : TEXCOORD3,
#endif
							out float4 oPos : SV_Position)
{
	float3 pos;
	float4 tangent_quat;
	InterpolatePhongAttrs(bc_coords,
				patch[0].Pos, patch[1].Pos, patch[2].Pos,
				patch[0].Texcoord0, patch[1].Texcoord0, patch[2].Texcoord0,
				patch[0].TangentQuat, patch[1].TangentQuat, patch[2].TangentQuat,

				pos, oTexCoord_2xy.xy,
				tangent_quat);

	float3x3 obj_to_ts;
	RestoreTBN(tangent_quat, obj_to_ts[0], obj_to_ts[1], obj_to_ts[2]);

	CalcPosLH(pos, obj_to_ts,
				oPos, oTexCoord_2xy.zw, oTsToView0_2z, oTsToView1_Depth,
				oScreenTc);
}
		]]>
	</shader>

	<technique name="DepthSmoothTech" inherit="DepthTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="DepthAlphaTestSmoothTech" inherit="DepthAlphaTestTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="DepthAlphaBlendBackSmoothTech" inherit="DepthAlphaBlendBackTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaBlendFrontSmoothTech" inherit="DepthAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferSmoothRT0Tech" inherit="GBufferRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaTestSmoothRT0Tech" inherit="GBufferAlphaTestRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaBlendBackSmoothRT0Tech" inherit="GBufferAlphaBlendBackRT0Tech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontSmoothRT0Tech" inherit="GBufferAlphaBlendFrontRT0Tech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferSmoothRT1Tech" inherit="GBufferRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaTestSmoothRT1Tech" inherit="GBufferAlphaTestRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaBlendBackSmoothRT1Tech" inherit="GBufferAlphaBlendBackRT1Tech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontSmoothRT1Tech" inherit="GBufferAlphaBlendFrontRT1Tech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferSmoothMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaTestSmoothMRTTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="GBufferAlphaBlendBackSmoothMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontSmoothMRTTech" inherit="GBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="VisualizeVertexSmoothRT0Tech" inherit="VisualizeVertexRT0Tech">
		<pass name="p0">
		</pass>
	</technique>

	<technique name="VisualizeVertexSmoothRT1Tech" inherit="VisualizeVertexRT1Tech">
		<pass name="p0">
		</pass>
	</technique>

	<technique name="VisualizeVertexSmoothMRTTech" inherit="VisualizeVertexMRTTech">
		<pass name="p0">
		</pass>
	</technique>

	<technique name="VisualizeTextureSmoothRT0Tech" inherit="VisualizeTextureRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureSmoothRT1Tech" inherit="VisualizeTextureRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureSmoothMRTTech" inherit="VisualizeTextureMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	

	<technique name="SpecialShadingSmoothTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackSmoothTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontSmoothTech" inherit="SpecialShadingAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="SmoothVS()"/>
			<state name="hull_shader" value="SmoothHS()"/>
			<state name="domain_shader" value="SmoothDS()"/>
		</pass>
	</technique>
</effect>
