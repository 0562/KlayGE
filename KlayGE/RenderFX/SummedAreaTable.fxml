<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>

	<parameter type="float3" name="addr_offset"/>
	<parameter type="int" name="length"/>
	<parameter type="float" name="scale"/>

	<parameter type="sampler2D" name="src_sampler">
		<state name="filtering" value="point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>

	<parameter type="sampler2D" name="child_sampler">
		<state name="filtering" value="point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>

	<shader>
		<![CDATA[
float4 SATScanXUpSweepPS(float2 tex_coord0 : TEXCOORD0) : COLOR
{
	float tar_x = tex_coord0.x * scale;
	return tex2D(src_sampler, float2(tar_x - addr_offset.y, tex_coord0.y))
				+ tex2D(src_sampler, float2(tar_x - addr_offset.x, tex_coord0.y))
				+ tex2D(src_sampler, float2(tar_x + addr_offset.x, tex_coord0.y))
				+ tex2D(src_sampler, float2(tar_x + addr_offset.y, tex_coord0.y));
}

float4 SATScanXDownSweepPS(float2 tex_coord0 : TEXCOORD0) : COLOR
{
	float4 clr;
	float x = floor(tex_coord0.x * length);
	int r = fmod(x, 4);
	if (3 == r)
	{
		clr = tex2D(src_sampler, float2(tex_coord0.x * scale, tex_coord0.y));
	}
	else
	{
		clr = tex2D(child_sampler, tex_coord0);
		if (x > 3)
		{
			clr += tex2D(src_sampler, float2(tex_coord0.x * scale - addr_offset.x, tex_coord0.y));
		}
		if (r >= 1)
		{
			clr += tex2D(child_sampler, tex_coord0 - float2(addr_offset.y, 0));
		}
		if (r >= 2)
		{
			clr += tex2D(child_sampler, tex_coord0 - float2(addr_offset.z, 0));
		}
	}
	return clr;
}

float4 SATScanYUpSweepPS(float2 tex_coord0 : TEXCOORD0) : COLOR
{
	float tar_y = tex_coord0.y * scale;
	return tex2D(src_sampler, float2(tex_coord0.x, tar_y - addr_offset.y))
				+ tex2D(src_sampler, float2(tex_coord0.x, tar_y - addr_offset.x))
				+ tex2D(src_sampler, float2(tex_coord0.x, tar_y + addr_offset.x))
				+ tex2D(src_sampler, float2(tex_coord0.x, tar_y + addr_offset.y));
}

float4 SATScanYDownSweepPS(float2 tex_coord0 : TEXCOORD0) : COLOR
{
	float4 clr;
	float y = floor(tex_coord0.y * length);
	int r = fmod(y, 4);
	if (3 == r)
	{
		clr = tex2D(src_sampler, float2(tex_coord0.x, tex_coord0.y * scale));
	}
	else
	{
		clr = tex2D(child_sampler, tex_coord0);
		if (y > 3)
		{
			clr += tex2D(src_sampler, float2(tex_coord0.x, tex_coord0.y * scale - addr_offset.x));
		}
		if (r >= 1)
		{
			clr += tex2D(child_sampler, tex_coord0 - float2(0, addr_offset.y));
		}
		if (r >= 2)
		{
			clr += tex2D(child_sampler, tex_coord0 - float2(0, addr_offset.z));
		}
	}
	return clr;
}
		]]>
	</shader>
	<technique name="SATScanXUpSweep">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SATScanXUpSweepPS()"/>
		</pass>
	</technique>
	<technique name="SATScanXDownSweep">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SATScanXDownSweepPS()"/>
		</pass>
	</technique>	

	<technique name="SATScanYUpSweep">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SATScanYUpSweepPS()"/>
		</pass>
	</technique>

	<technique name="SATScanYDownSweep">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SATScanYDownSweepPS()"/>
		</pass>
	</technique>
</effect>
