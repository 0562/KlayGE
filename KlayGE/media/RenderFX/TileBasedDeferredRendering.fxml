<?xml version='1.0'?>

<effect>
	<macro name="LIGHT_BATCH" value="1024"/>
	
	<include name="DeferredRendering.fxml"/>

	<macro name="BLOCK_X" value="8"/>
	<macro name="BLOCK_Y" value="8"/>
	<macro name="BLOCK_SIZE" value="(BLOCK_X * BLOCK_Y)"/>
	<macro name="TILE_SIZE" value="32"/>

	<parameter type="uint2" name="width_height"/>
	<parameter type="texture2D" name="depth_in_tex"/>
	<parameter type="rw_texture2D" elem_type="float2" name="min_max_depth_rw_tex"/>

	<shader type="compute_shader" version="5">
		<![CDATA[
groupshared float2 min_max_z_sh[BLOCK_SIZE];

[numthreads(BLOCK_X, BLOCK_Y, 1)]
void DepthToTiledMinMaxCS(uint3 gid : SV_GroupID,
							uint3 gtid : SV_GroupThreadID,
							uint GI : SV_GroupIndex)
{
	float2 min_max_z = float2(asfloat(0x7F7FFFFF), 0.0f);
	
	uint2 tile_start = gid.xy * TILE_SIZE + gtid.xy;
	for (uint tile_y = 0; tile_y < TILE_SIZE; tile_y += BLOCK_Y)
	{
		for (uint tile_x = 0; tile_x < TILE_SIZE; tile_x += BLOCK_X)
		{
			float depth = depth_in_tex.Load(uint3(min(tile_start + uint2(tile_x, tile_y), width_height), 0)).x;
			min_max_z = float2(min(min_max_z.x, depth), max(min_max_z.y, depth));
		}
	}

	min_max_z_sh[GI] = min_max_z;
	GroupMemoryBarrierWithGroupSync();

	[unroll]
	for (uint offset = BLOCK_SIZE >> 1; offset > 32; offset >>= 1)
	{
		if (GI < offset)
		{
			min_max_z_sh[GI].x = min(min_max_z_sh[GI].x, min_max_z_sh[GI + offset].x);
			min_max_z_sh[GI].y = max(min_max_z_sh[GI].y, min_max_z_sh[GI + offset].y);
		}
		GroupMemoryBarrierWithGroupSync();
	}
	[unroll]
	for (offset = 32; offset > 0; offset >>= 1)
	{
		if (GI < offset)
		{
			min_max_z_sh[GI].x = min(min_max_z_sh[GI].x, min_max_z_sh[GI + offset].x);
			min_max_z_sh[GI].y = max(min_max_z_sh[GI].y, min_max_z_sh[GI + offset].y);
		}
	}
	
	if (0 == GI)
	{
		min_max_depth_rw_tex[gid.xy] = min_max_z_sh[0];
	}
}
		]]>
	</shader>

	<technique name="DepthToTiledMinMax">
		<pass name="p0">
			<state name="compute_shader" value="DepthToTiledMinMaxCS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void TileBasedDeferredRenderingLightingMaskVS(float4 pos : POSITION,
			out float4 oPos : SV_Position)
{
	oPos = pos;
}

float4 TileBasedDeferredRenderingLightingMaskPS() : SV_Target
{
	return 1;
}
		]]>
	</shader>

	<technique name="TileBasedDeferredRenderingLightingMask">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="not_equal"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="not_equal"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="keep"/>

			<state name="vertex_shader" value="TileBasedDeferredRenderingLightingMaskVS()"/>
			<state name="pixel_shader" value="TileBasedDeferredRenderingLightingMaskPS()"/>
		</pass>
	</technique>

	<cbuffer name="overlap_test">
		<parameter type="float4" name="tile_scale"/>
		<parameter type="float2" name="camera_proj_01"/>
		<parameter type="float3" name="lights_aabb_min" array_size="LIGHT_BATCH"/>
		<parameter type="float3" name="lights_aabb_max" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<cbuffer name="light_batch1">
		<parameter type="float4" name="lights_color" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_pos_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_dir_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_falloff_range" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<cbuffer name="light_batch2">
		<parameter type="float4" name="lights_attrib" array_size="LIGHT_BATCH"/>
		<parameter type="int" name="lights_shadowing_channel" array_size="6"/>
		<parameter type="uint" name="lights_type" array_size="8"/>
	</cbuffer>
	<parameter type="texture2D" name="min_max_depth_tex"/>
	<parameter type="texture2D" name="lighting_mask_tex"/>
	<parameter type="texture2D" name="shading_in_tex"/>
	<parameter type="rw_texture2D" name="shading_rw_tex"/>

	<parameter type="float3" name="upper_left"/>
	<parameter type="float3" name="x_dir"/>
	<parameter type="float3" name="y_dir"/>

	<shader type="compute_shader" version="5">
		<![CDATA[
void CalcTileViewFrustum(uint2 coord, float2 min_max, out float4 planes[6])
{
	float near_plane = min_max.x;
	float far_plane = min_max.y;
	
	if (far_plane - near_plane < 1e-3f)
	{
		far_plane += 1e-3f;
	}

	float2 tile_bias = tile_scale.xy - coord;
	float q = far_plane / (far_plane - near_plane);

	float4 column1 = float4(camera_proj_01.x, 0, tile_bias.x, 0);
	float4 column2 = float4(0, -camera_proj_01.y, tile_bias.y, 0);
	float4 column3 = float4(0, 0, q, -near_plane * q);
	float4 column4 = float4(0, 0, 1, 0);
	planes[0] = column4 - column1;
	planes[1] = column4 + column1;
	planes[2] = column4 - column2;
	planes[3] = column4 + column2;
	planes[4] = column4 - column3;
	// TODO: Should be column3 only
	planes[5] = column4 + column3;
	for (int i = 0; i < 6; ++ i)
	{
		planes[i] /= length(planes[i].xyz);
	}
}

int OverlapTestPoint(float4 planes[6], int light_index)
{
	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float d = dot(planes[j], float4(lights_pos_es[light_index].xyz, 1));
		overlap *= (d > -lights_falloff_range[light_index].w);
	}

	return overlap;
}

int OverlapTestSpot(float4 planes[6], int light_index)
{
	float3 min_pt = lights_aabb_min[light_index];
	float3 max_pt = lights_aabb_max[light_index];

	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float4 plane = planes[j];
		float3 v0 = plane.xyz < 0 ? min_pt : max_pt;
		overlap *= (dot(plane, float4(v0, 1)) >= 0);
	}

	return overlap;
}

float3 texcoord_to_view(float2 tex)
{
	return upper_left + x_dir * tex.x + y_dir * tex.y;
}

float4 NearestDepthUpsamplingShadowLevel(float2 tc, int channel)
{
	float2 l1_inv_width_height = inv_width_height * 2;
	float2 tc0 = tc - inv_width_height;
	float z00 = ReadAFloat(depth_tex.SampleLevel(point_sampler, tc0, 1), depth_near_far_invfar.y);
	float z10 = ReadAFloat(depth_tex.SampleLevel(point_sampler, tc0 + float2(l1_inv_width_height.x, 0), 1), depth_near_far_invfar.y);
	float z01 = ReadAFloat(depth_tex.SampleLevel(point_sampler, tc0 + float2(0, l1_inv_width_height.y), 1), depth_near_far_invfar.y);
	float z11 = ReadAFloat(depth_tex.SampleLevel(point_sampler, tc0 + l1_inv_width_height, 1), depth_near_far_invfar.y);
	float z_full = ReadAFloat(depth_tex.SampleLevel(point_sampler, tc, 0), depth_near_far_invfar.y);
	float threshold = 0.25f;

	float3 ndus = NearestDepthUpsampling(tc0, float4(z00, z10, z01, z11), z_full, l1_inv_width_height, threshold);
	if (ndus.z > 0)
	{
		if (channel < 4)
		{
			return shadowing_tex.SampleLevel(linear_sampler, tc, 0)[channel];
		}
		else
		{
			return projective_shadowing_tex.SampleLevel(linear_sampler, tc, 0);
		}
	}
	else
	{
		if (channel < 4)
		{
			return shadowing_tex.SampleLevel(point_sampler, ndus.xy, 0)[channel];
		}
		else
		{
			return projective_shadowing_tex.SampleLevel(point_sampler, ndus.xy, 0);
		}
	}
}

float4 CalcTileBasedDeferredRenderingPoint(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, bool with_shadow)
{
	float4 lighting = 0;
	float3 dir = lights_pos_es[index].xyz - pos_es;
	float dist = length(dir);
	if (dist < lights_falloff_range[index].w)
	{
		dir /= dist;
		float n_dot_l = dot(normal, dir);
		if (n_dot_l > 0)
		{
			float3 shadow = 1;
			if (with_shadow)
			{
				shadow = NearestDepthUpsamplingShadowLevel(tc, lights_shadowing_channel[shadow_index + 1]).xyz;
			}

			float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
			float atten = attenuation_term(lights_pos_es[index].xyz, pos_es, lights_falloff_range[index].xyz);
			lighting = CalcColor(n_dot_l, spec, atten, shadow, lights_color[index], lights_attrib[index]);
		}
	}
	return lighting;
}

float4 CalcTileBasedDeferredRenderingSpot(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, bool with_shadow)
{
	float4 lighting = 0;
	float spot = spot_lighting(lights_pos_es[index].xyz, lights_dir_es[index].xyz,
		float2(lights_pos_es[index].w, lights_dir_es[index].w), pos_es);
	if (spot > 0)
	{
		float3 dir = lights_pos_es[index].xyz - pos_es;
		float dist = length(dir);
		if (dist < lights_falloff_range[index].w)
		{
			dir /= dist;
			float n_dot_l = dot(normal, dir);
			if (n_dot_l > 0)
			{
				float3 shadow = 1;
				if (with_shadow)
				{
					shadow = NearestDepthUpsamplingShadowLevel(tc, lights_shadowing_channel[shadow_index + 2]).xyz;
				}

				float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
				float atten = spot * attenuation_term(lights_pos_es[index].xyz, pos_es, lights_falloff_range[index].xyz);
				lighting = CalcColor(n_dot_l, spec, atten, shadow, lights_color[index], lights_attrib[index]);
			}
		}
	}
	
	return lighting;
}

groupshared uint intersected_light_indices_sh[LIGHT_BATCH];
groupshared uint num_intersected_lights_sh;

[numthreads(BLOCK_X, BLOCK_Y, 1)]
void TileBasedDeferredRenderingUnifiedCS(uint3 gid : SV_GroupID,
							uint3 gtid : SV_GroupThreadID,
							uint GI : SV_GroupIndex)
{
	if (0 == GI)
	{
		num_intersected_lights_sh = 0;
	}
	GroupMemoryBarrierWithGroupSync();
	
	float4 planes[6];
	float2 min_max = min_max_depth_tex.Load(gid).xy;
	CalcTileViewFrustum(gid.xy, min_max, planes);

	uint light_start[4];

	for (uint index = lights_type[3] + GI; index < lights_type[4]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();
	
	light_start[0] = num_intersected_lights_sh;

	for (index = lights_type[4] + GI; index < lights_type[5]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();
	
	light_start[1] = num_intersected_lights_sh;

	for (index = lights_type[5] + GI; index < lights_type[6]; index += BLOCK_SIZE)
	{
		if (OverlapTestSpot(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();
	
	light_start[2] = num_intersected_lights_sh;
	
	for (index = lights_type[6] + GI; index < lights_type[7]; index += BLOCK_SIZE)
	{
		if (OverlapTestSpot(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();
	
	light_start[3] = num_intersected_lights_sh;
	
	uint2 tile_start = gid.xy * TILE_SIZE + gtid.xy;
	for (uint tile_y = 0; tile_y < TILE_SIZE; tile_y += BLOCK_Y)
	{
		for (uint tile_x = 0; tile_x < TILE_SIZE; tile_x += BLOCK_X)
		{
			uint3 coord = uint3(tile_start + uint2(tile_x, tile_y), 0);

			[branch]
			if (all(coord.xy < width_height) && (lighting_mask_tex.Load(coord).x > 0))
			{
				float2 tc = (coord.xy + 0.5f) * inv_width_height;

				float4 mrt0 = g_buffer_tex.Load(coord);
				float3 view_dir = normalize(texcoord_to_view(tc));
				float3 normal = GetNormal(mrt0);
				float shininess = GetShininess(mrt0);
				float3 pos_es = view_dir * (ReadAFloat(depth_tex.Load(coord), depth_near_far_invfar.y) / view_dir.z);

				float4 lighting = 0;
				for (uint i = lights_type[0]; i < lights_type[1]; ++ i)
				{
					lighting += CalcColor(0.5f + 0.5f * dot(lights_dir_es[i].xyz, normal), 0, 1, 1, lights_color[i], lights_attrib[i]);
				}
				for (i = lights_type[1]; i < lights_type[2]; ++ i)
				{
					float3 dir = lights_dir_es[i].xyz;
					float n_dot_l = dot(normal, dir);
					if (n_dot_l > 0)
					{
						float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
						float3 shadow = 1;
						if (lights_shadowing_channel[0] >= 0)
						{
							shadow = NearestDepthUpsamplingShadowLevel(tc, lights_shadowing_channel[0]).xyz;
						}
						lighting += CalcColor(n_dot_l, spec, 1, shadow, lights_color[i], lights_attrib[i]);
					}
				}
				for (i = lights_type[2]; i < lights_type[3]; ++ i)
				{
					float3 dir = lights_dir_es[i].xyz;
					float n_dot_l = dot(normal, dir);
					if (n_dot_l > 0)
					{
						float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
						lighting += CalcColor(n_dot_l, spec, 1, 1, lights_color[i], lights_attrib[i]);
					}
				}

				for (i = 0; i < light_start[0]; ++ i)
				{
					lighting += CalcTileBasedDeferredRenderingPoint(intersected_light_indices_sh[i], -1,
						pos_es, normal, view_dir, shininess, tc, false);
				}
				for (i = light_start[0]; i < light_start[1]; ++ i)
				{
					lighting += CalcTileBasedDeferredRenderingPoint(intersected_light_indices_sh[i],
						intersected_light_indices_sh[i] - lights_type[4],
						pos_es, normal, view_dir, shininess, tc, true);
				}
				for (i = light_start[1]; i < light_start[2]; ++ i)
				{
					lighting += CalcTileBasedDeferredRenderingSpot(intersected_light_indices_sh[i], -1,
						pos_es, normal, view_dir, shininess, tc, false);
				}
				for (i = light_start[2]; i < light_start[3]; ++ i)
				{
					lighting += CalcTileBasedDeferredRenderingSpot(intersected_light_indices_sh[i],
						intersected_light_indices_sh[i] - lights_type[6],
						pos_es, normal, view_dir, shininess, tc, true);
				}
	
				float4 mrt1 = g_buffer_1_tex.Load(coord);
				float4 shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
				if (lights_type[0] == lights_type[1])
				{
					shading += shading_in_tex.Load(coord);
				}
				shading_rw_tex[coord.xy] = shading;
			}
		}
	}
}
		]]>
	</shader>

	<technique name="TileBasedDeferredRenderingUnified">
		<pass name="p0">
			<state name="compute_shader" value="TileBasedDeferredRenderingUnifiedCS()"/>
		</pass>
	</technique>
</effect>
