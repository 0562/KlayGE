<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="util.fxml"/>
	<include name="FXAA.fxml"/>
	<include name="ColorGrading.fxml"/>

	<parameter type="int3" name="psaa_gamma_grading"/>
	
	<shader>
		<![CDATA[
float4 PostToneMapping0PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = color_tex.Sample(linear_wrap_sampler, tc0).xyz;
	return float4(rgb, 1);
}

float4 PostToneMapping1PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = color_tex.Sample(linear_wrap_sampler, tc0).xyz;
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping2PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = color_tex.Sample(linear_wrap_sampler, tc0).xyz;
	rgb = SRGBCorrection(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping3PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = color_tex.Sample(linear_wrap_sampler, tc0).xyz;
	rgb = SRGBCorrection(rgb);
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping4PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = FxaaPixelShader(tc0);
	return float4(rgb, 1);
}

float4 PostToneMapping5PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = FxaaPixelShader(tc0);
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping6PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = FxaaPixelShader(tc0);
	rgb = SRGBCorrection(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping7PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = FxaaPixelShader(tc0);
	rgb = SRGBCorrection(rgb);
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping8PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = DebugFxaaPixelShader(tc0);
	return float4(rgb, 1);
}

float4 PostToneMapping9PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = DebugFxaaPixelShader(tc0);
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping10PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = DebugFxaaPixelShader(tc0);
	rgb = SRGBCorrection(rgb);
	return float4(rgb, 1);
}

float4 PostToneMapping11PS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float3 rgb = DebugFxaaPixelShader(tc0);
	rgb = SRGBCorrection(rgb);
	rgb = ColorGrading(rgb);
	return float4(rgb, 1);
}
		]]>
	</shader>

	<technique name="PostToneMapping0">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping0PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping1">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping1PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping2">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping2PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping3">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping3PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping4">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping4PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping5">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping5PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping6">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping6PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping7">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping7PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping8">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping8PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping9">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping9PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping10">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping10PS()"/>
		</pass>
	</technique>
	<technique name="PostToneMapping11">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="PostToneMapping11PS()"/>
		</pass>
	</technique>
</effect>
