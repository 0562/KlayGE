<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="PostProcess.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float4" name="delta_offset"/>
	<parameter type="float" name="prev_level"/>

	<parameter type="texture2D" name="gbuffer_tex"/>
	<parameter type="texture2D" name="depth_deriv_tex"/>
	<parameter type="texture2D" name="normal_cone_tex"/>

	<parameter type="float2" name="kernel" array_size="9">
		<value>
			<![CDATA[
				0,  0,  -1,  0,  -1,  1,
				0,  1,   1,  1,   1,  0,
				1, -1,   0, -1,  -1, -1
				]]>
		</value>
	</parameter>

	<shader>
		<![CDATA[    
float4 GBuffer2DepthDerivatePS(float2 tc : TEXCOORD0) : SV_Target
{
	tc = tc + delta_offset.zw;
	float max_depth = GetDepth(gbuffer_tex.SampleLevel(point_sampler, tc, 0));
	float min_depth = max_depth;
	for (int i = 1; i < 9; ++i)
	{
		float2 ntc = tc + kernel[i] * delta_offset.xy;
		float depth = GetDepth(gbuffer_tex.SampleLevel(point_sampler, ntc, 0));
		max_depth = max(max_depth, depth);
		min_depth = min(min_depth, depth);
	}
	return float4(max_depth - min_depth, 0, 0, 1);
}

float4 DepthDerivateMipMapPS(float2 tc : TEXCOORD0) : SV_Target
{
	tc = tc + delta_offset.zw;
	float max_depth_deriv = depth_deriv_tex.SampleLevel(point_sampler, tc, prev_level).r;
	for (int i = 1; i < 9; ++i)
	{
		float2 ntc = tc + kernel[i] * delta_offset.xy;
		float depth_deriv = depth_deriv_tex.SampleLevel(point_sampler, ntc, prev_level).r;
		max_depth_deriv = max(max_depth_deriv, depth_deriv);
	}
	return max_depth_deriv;
}

float4 GBuffer2NormalConePS(float2 tc : TEXCOORD0) : SV_Target
{
	tc = tc + delta_offset.zw;
	float2 max_nxy = GetNormal(gbuffer_tex.SampleLevel(point_sampler, tc, 0)).xy;
	float2 min_nxy = max_nxy;
	for (int i = 1; i < 9; ++i)
	{
		float2 ntc = tc + kernel[i] * delta_offset.xy;
		float2 nxy = GetNormal(gbuffer_tex.SampleLevel(point_sampler, ntc, 0)).xy;
		max_nxy = max(max_nxy, nxy);
		min_nxy = min(min_nxy, nxy);
	}
	return float4(max_nxy, min_nxy);
}

float4 NormalConeMipMapPS(float2 tc : TEXCOORD0) : SV_Target
{
	tc = tc + delta_offset.zw;  
	float4 max_min_nxy = normal_cone_tex.SampleLevel(point_sampler, tc, prev_level);
	for (int i = 1; i < 9; ++i)
	{
		float2 ntc = tc + kernel[i] * delta_offset.xy;
		float4 nxy = normal_cone_tex.SampleLevel(point_sampler, ntc, prev_level);
		max_min_nxy.xy = max(max_min_nxy.xy, nxy.xy);
		max_min_nxy.zw = min(max_min_nxy.zw, nxy.zw);
	}
	return max_min_nxy;
}
		]]>
	</shader>

	<technique name="GBuffer2DepthDerivate">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="GBuffer2DepthDerivatePS()"/>
		</pass>
	</technique>

	<technique name="DepthDerivateMipMap">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="DepthDerivateMipMapPS()"/>
		</pass>
	</technique>

	<technique name="GBuffer2NormalCone">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="GBuffer2NormalConePS()"/>
		</pass>
	</technique>

	<technique name="NormalConeMipMap">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="NormalConeMipMapPS()"/>
		</pass>
	</technique>
</effect>
