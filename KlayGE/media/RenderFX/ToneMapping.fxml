<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="src_tex"/>
	<parameter type="texture2D" name="lum_tex"/>
	<parameter type="texture2D" name="bloom_tex"/>
	<parameter type="structured_buffer" elem_type="float" name="lum_buff"/>

	<parameter type="bool" name="blue_shift"/>

	<shader>
		<![CDATA[
float4 ToneMapping(float3 color, float3 blur, float adapted_lum)
{
	const float MIDDLE_GREY = 0.36f;
	const float3 RGB_TO_LUM = float3(0.27, 0.67, 0.06);
	const float3 BLUE_SHIFT = float3(1.05, 0.97, 1.27); 

	color += blur * 0.25f;

	if (blue_shift)
	{
		float blue_shift_coef = 1.0f - (adapted_lum + 1.5f) / 4.1f;
		float3 rod_clr = dot(color, RGB_TO_LUM) * BLUE_SHIFT;
		color = lerp(color, rod_clr, saturate(blue_shift_coef));
	}

	// Tone mapping
	color *= MIDDLE_GREY / adapted_lum;
	color /= 1.0f + color;

	return float4(color, 1);
}

void ToneMapping30VS(float4 pos : POSITION,
					out float3 oTex : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	oPos = AdjustPos(pos);

	oTex.xy = TexCoordFromPos(pos);
	oTex.z = max(0.001f, lum_tex.SampleLevel(point_sampler, 0.5f.xx, 0).r);
}

float4 ToneMapping30PS(float3 iTex : TEXCOORD0) : SV_Target
{
	return ToneMapping(src_tex.Sample(linear_sampler, iTex.xy).rgb, bloom_tex.Sample(linear_sampler, iTex.xy).rgb, iTex.z);
}


float4 ToneMapping20PS(float2 iTex : TEXCOORD0) : SV_Target
{
	float lum = max(0.001f, lum_tex.Sample(point_sampler, 0.5f.xx).r);
	return ToneMapping(src_tex.Sample(linear_sampler, iTex).rgb, bloom_tex.Sample(linear_sampler, iTex).rgb, lum);
}


void ToneMapping50VS(float4 pos : POSITION,
					out float3 oTex : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	oPos = AdjustPos(pos);

	oTex.xy = TexCoordFromPos(pos);
#ifdef KLAYGE_D3D11
	oTex.z = max(0.001f, lum_buff[0]);
#else
	oTex.z = 1;
#endif
}

float4 ToneMapping50PS(float3 iTex : TEXCOORD0) : SV_Target
{
	return ToneMapping(src_tex.Sample(linear_sampler, iTex.xy).rgb, bloom_tex.Sample(linear_sampler, iTex.xy).rgb, iTex.z);
}
		]]>
	</shader>
	
	<technique name="ToneMapping30">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="ToneMapping30VS()"/>
			<state name="pixel_shader" value="ToneMapping30PS()"/>
		</pass>
	</technique>
	
	<technique name="ToneMapping20">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="ToneMapping20PS()"/>
		</pass>
	</technique>

	<technique name="ToneMapping50">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="ToneMapping50VS()"/>
			<state name="pixel_shader" value="ToneMapping50PS()"/>
		</pass>
	</technique>
</effect>
