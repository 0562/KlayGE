<?xml version='1.0'?>

<effect>
	<shader>
		<![CDATA[
float directional_lighting(float3 light_dir, float3 normal)
{
	return dot(-light_dir, normal);
}

float point_lighting(float3 light_pos, float3 pos, float3 normal)
{
	return dot(normalize(light_pos - pos), normal);
}

float spot_lighting(float3 light_pos, float3 light_dir, float2 cos_cone, float3 pos)
{
	// cos_cone is (cos_outer_cone, cos_inner_cone)
	
	float3 v = normalize(pos - light_pos);
	float cos_direction = dot(v, light_dir);

	return smoothstep(cos_cone.x, cos_cone.y, cos_direction);
}


float fresnel_term_schlick(float3 light_vec, float3 halfway_vec, float f0)
{
	float e_n = max(dot(light_vec, halfway_vec), 0);
	return f0 + (1 - f0) * pow(1 - e_n, 5);
}


float diffuse_term(float3 light_vec, float3 normal)
{
	return dot(light_vec, normal);
}

float specular_normalize_factor(float roughness)
{
	return (roughness + 2) / 2;
}

float specular_normalize_factor(float roughness, float fresnel)
{
	const float PI = 3.141592f;
	return (roughness + 2) * PI / 8;
}

float roughness_term(float3 halfway_vec, float3 normal, float roughness)
{
	return pow(max(dot(halfway_vec, normal), 0.0f), roughness);
}

float roughness_term(float f0, float3 light_vec, float3 halfway_vec, float3 normal, float roughness)
{
	return pow(max(dot(halfway_vec, normal), 0.0f), roughness) * fresnel_term_schlick(light_vec, halfway_vec, f0);
}


// diffuse only
float3 calc_brdf(float3 c_diff, float3 l, float3 n)
{
	return max(c_diff * dot(n, l), 0);
}
// with out fresnel
float3 calc_brdf(float3 c_diff, float3 c_specular, float roughness, float3 l, float3 h, float3 n)
{
	return max((c_diff + specular_normalize_factor(roughness) * roughness_term(h, n, roughness) * c_specular) * dot(n, l), 0);
}
// with fresnel
float3 calc_brdf(float3 c_diff, float3 c_specular, float roughness, float fresnel, float3 l, float3 h, float3 n)
{
	return max((c_diff + specular_normalize_factor(roughness, fresnel) * roughness_term(fresnel, l, h, n, roughness) * c_specular) * dot(n, l), 0);
}


float attenuation_term(float3 light_pos, float3 pos, float3 atten)
{
	float d = distance(light_pos, pos);
	return 1 / (atten.x + d * atten.y + d * d * atten.z);
}
    ]]>
	</shader>
</effect>
