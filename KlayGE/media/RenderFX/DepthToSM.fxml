<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="util.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float2" name="near_q"/>
	<parameter type="float4x4" name="inv_proj"/>

	<parameter type="texture2D" name="src_tex"/>

	<shader>
		<![CDATA[
void DepthToSMVS(float4 pos : POSITION,
					out float2 oTex : TEXCOORD0,
					out float3 oViewDir : TEXCOORD1,
					out float4 oPos : SV_Position)
{
	oTex = TexCoordFromPos(pos);
	oPos = pos;
	oViewDir = mul(pos, inv_proj).xyz;
}

float4 DepthToSMPS(float2 tc : TEXCOORD0) : SV_Target
{
	return non_linear_depth_to_linear(src_tex.Sample(point_sampler, tc).r, near_q.x, near_q.y);
}

float4 DepthToVSMPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float dist = non_linear_depth_to_linear(src_tex.Sample(point_sampler, tc).r, near_q.x, near_q.y);
	dist *= length(view_dir) / view_dir.z;

#if KLAYGE_DERIVATIVES
	float2 dxdy = float2(ddx(dist), ddy(dist));
#else
	float2 dxdy = 0;
#endif
	return float4(dist, dist * dist + 0.2f * dot(dxdy, dxdy), 0, 1);
}
		]]>
	</shader>

	<technique name="DepthToSM">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DepthToSMVS()"/>
			<state name="pixel_shader" value="DepthToSMPS()"/>
		</pass>
	</technique>

	<technique name="DepthToVSM">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DepthToSMVS()"/>
			<state name="pixel_shader" value="DepthToVSMPS()"/>
		</pass>
	</technique>
</effect>
