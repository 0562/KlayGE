<?xml version='1.0'?>

<effect>
	<shader>
		<![CDATA[
float get_x_channel(float4 v)
{
#ifdef KLAYGE_BC4_AS_G
	return v.g;
#else
	return v.r;
#endif
}

float2 get_xy_channel(float4 v)
{
#ifdef KLAYGE_BC5_AS_AG
	return v.ag;
#else
#ifdef KLAYGE_BC5_AS_GA
	return v.ga;
#else
	return v.rg;
#endif
#endif
}

float3 restore_normal(float2 normal_xy)
{
	float3 normal;
	normal.xy = normal_xy;
	normal.z = sqrt(max(0.0f, 1 - dot(normal.xy, normal.xy)));
	return normalize(normal);
}

float3 decompress_normal(float4 comp_normal)
{
	return restore_normal(get_xy_channel(comp_normal) * 2 - 1);
}

float4 decode_hdr_yc(float y, float4 c)
{
	float Y = exp2(y * 65536 / 2048 - 16);
	float2 C = get_xy_channel(c);
	C *= C;
	
	return float4(Y * float3(C.g, (1.0f - C.g - C.r), C.r) / float3(0.2126f, 0.7152f, 0.0722f), 1);
}

float mipmap_level(float2 uv, float2 texture_size)
{
#if KLAYGE_DERIVATIVES
	float2 dx = ddx(uv * texture_size.x);
	float2 dy = ddy(uv * texture_size.y);
	float d = max(dot(dx, dx), dot(dy, dy));

	return log2(sqrt(d));
#else
	return 0;
#endif
}

float non_linear_depth_to_linear(float depth, float near_mul_q, float q)
{
	return near_mul_q / (q - depth);
}

float linear_depth_to_non_linear(float depth, float near_mul_q, float q)
{
	return (depth * q - near_mul_q) / depth;
}

float3 linear_to_srgb(float3 rgb)
{
	const float ALPHA = 0.055f;
	return rgb < 0.0031308f ? 12.92f * rgb : (1 + ALPHA) * pow(rgb, 1 / 2.4f) - ALPHA;
}

float3 srgb_to_linear(float3 srgb)
{
	const float ALPHA = 0.055f;
	return srgb < 0.04045f ? srgb / 12.92f : pow((srgb + ALPHA) / (1 + ALPHA), 2.4f);
}

// Encoding a [0, 1) float into a rgba8. From http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
float4 EncodeFloatRGBA(float v)
{
	float4 enc = float4(1.0f, 255.0f, 65025.0f, 16581375.0f) * v;
	enc = frac(enc);
	enc -= enc.yzww * float4(1 / 255.0f, 1 / 255.0f, 1 / 255.0f, 0);
	return enc;
}

float DecodeFloatRGBA(float4 rgba)
{
	return dot(rgba, float4(1, 1 / 255.0f, 1 / 65025.0f, 1 / 16581375.0f));
}
		]]>
	</shader>
</effect>
