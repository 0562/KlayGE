<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>

	<parameter type="texture2D" name="src_tex"/>
	<parameter type="sampler" name="src_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float4" name="tex_coord_offset" array_size="2"/>

	<parameter type="texture2D" name="last_lum_tex"/>
	<parameter type="sampler" name="last_lum_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float" name="frame_delta"/>

	<shader>
		<![CDATA[
void SumLumVS(float4 pos : POSITION,
					out float4 oTex0 : TEXCOORD0,
					out float4 oTex1 : TEXCOORD1,
					out float4 oPos : SV_Position)
{
	oPos = AdjustPos(pos);

	float2 tex = TexCoordFromPos(pos);
	oTex0 = tex.xyxy + tex_coord_offset[0];
	oTex1 = tex.xyxy + tex_coord_offset[1];
}

float4 SumLum4x4LogPS(float4 iTex0 : TEXCOORD0,
						float4 iTex1 : TEXCOORD1) : SV_Target
{
	const float3 RGB_TO_LUM = float3(0.27, 0.67, 0.06);
	float4 tex[2] = { iTex0, iTex1 };

	float s = 0;
	for (int i = 0; i < 2; ++ i)
	{
		s += log(dot(src_tex.Sample(src_sampler, tex[i].xy).rgb, RGB_TO_LUM) + 0.001f);
		s += log(dot(src_tex.Sample(src_sampler, tex[i].zw).rgb, RGB_TO_LUM) + 0.001f);
	}

	return s / 4;
}

float4 SumLum4x4IterativePS(float4 iTex0 : TEXCOORD0,
								float4 iTex1 : TEXCOORD1) : SV_Target
{
	float4 tex[2] = { iTex0, iTex1 };

	float s = 0;
	for (int i = 0; i < 2; ++ i)
	{
		s += src_tex.Sample(src_sampler, tex[i].xy).r;
		s += src_tex.Sample(src_sampler, tex[i].zw).r;
	}

	return s / 4;
}

float4 AdaptedLumPS(float4 tex0 : TEXCOORD0,
				float4 tex1 : TEXCOORD1) : SV_Target
{
	float adapted_lum = last_lum_tex.Sample(last_lum_sampler, float2(0.5f, 0.5f)).r;
	float current_lum = exp(src_tex.Sample(src_sampler, float2(0.5f, 0.5f)).r);

	return adapted_lum + (current_lum - adapted_lum) * (1 - pow(0.98f, 50 * frame_delta));
}
		]]>
	</shader>
	
	<technique name="SumLumLog">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="SumLumVS()"/>
			<state name="pixel_shader" value="SumLum4x4LogPS()"/>
		</pass>
	</technique>
	
	<technique name="SumLumIterative">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="SumLumVS()"/>
			<state name="pixel_shader" value="SumLum4x4IterativePS()"/>
		</pass>
	</technique>
	
	<technique name="AdaptedLum">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="SumLumVS()"/>
			<state name="pixel_shader" value="AdaptedLumPS()"/>
		</pass>
	</technique>
</effect>
