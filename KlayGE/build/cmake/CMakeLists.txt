PROJECT(KlayGE)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4.7)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(KLAYGE_MAJOR_VERSION 4)
SET(KLAYGE_MINOR_VERSION 1)
SET(KLAYGE_PATCH_VERSION 0)
SET(KLAYGE_VERSION ${KLAYGE_MAJOR_VERSION}.${KLAYGE_MINOR_VERSION}.${KLAYGE_PATCH_VERSION})

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF(WIN32)
	IF(MSVC)
		ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX")

		SET(KLAYGE_COMPILER_NAME "vc")
		IF(MSVC_VERSION GREATER 1600)
			SET(KLAYGE_COMPILER_VERSION "11")
		ELSEIF(MSVC_VERSION GREATER 1500)
			SET(KLAYGE_COMPILER_VERSION "10")
		ELSEIF(MSVC_VERSION GREATER 1400)
			SET(KLAYGE_COMPILER_VERSION "9")
		ENDIF()

		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /fp:fast /GS-")
		SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /fp:fast /GS-")
		SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /fp:fast /GS-")

		IF(MSVC_VERSION GREATER 1500)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MP")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MP")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MP")
		ENDIF()
		IF(MSVC_VERSION GREATER 1600)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /ZW:nostdlib /Qpar")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /ZW:nostdlib /Qpar")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /ZW:nostdlib /Qpar")
		ENDIF()
	ENDIF()
	IF(MINGW)
		SET(KLAYGE_COMPILER_NAME "mgw")
		SET(KLAYGE_COMPILER_VERSION "")
	ENDIF()
ELSE()
	SET(KLAYGE_COMPILER_NAME "gcc")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused")
ENDIF()

IF(WIN32)
	IF(CMAKE_GENERATOR MATCHES "Win64")
		SET(KLAYGE_ARCH_NAME "x64")
		SET(KLAYGE_VS_PLATFORM_NAME "x64")
	ELSEIF(CMAKE_GENERATOR MATCHES "ARM")
		SET(KLAYGE_ARCH_NAME "arm")
		SET(KLAYGE_VS_PLATFORM_NAME "ARM")
	ELSE()
		SET(KLAYGE_ARCH_NAME "x86")
		SET(KLAYGE_VS_PLATFORM_NAME "Win32")
	ENDIF()
	SET(KLAYGE_PLATFORM_NAME "win")
ENDIF()

IF(UNIX)
	IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
		SET(KLAYGE_ARCH_NAME "x64")
	ELSE()
		SET(KLAYGE_ARCH_NAME "x86")
	ENDIF()
	SET(KLAYGE_PLATFORM_NAME "linux")
ENDIF()
SET(KLAYGE_PLATFORM_NAME ${KLAYGE_PLATFORM_NAME}_${KLAYGE_ARCH_NAME})

# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")


# Main settings and dependencies
SET(KLAYGE_CORELIB_NAME KlayGE_Core)  # Dependency of all other targets
FIND_PATH(KLAYGE_PROJECT_DIR klayge_logo.ico PATHS ../../)

SET(KLAYGE_OUTPUT_DIR "${KLAYGE_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME}")
SET(KLAYGE_BIN_DIR "${KLAYGE_PROJECT_DIR}/bin/${KLAYGE_PLATFORM_NAME}")

# Target name postfix
SET(KLAYGE_NAME_POSTFIX "_${KLAYGE_COMPILER_NAME}")


# create vcproj.user file for Visual Studio to set debug working directory
FUNCTION(KLAYGE_CREATE_VCPROJ_USERFILE TARGETNAME)
	IF(MSVC)
		SET(SYSTEM_NAME $ENV{USERDOMAIN})
		SET(USER_NAME $ENV{USERNAME})

		IF(MSVC_VERSION GREATER 1500)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/Build/cmake/VisualStudio2010UserFile.vcxproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcxproj.user
				@ONLY
			)
		ELSEIF(MSVC_VERSION GREATER 1400)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/Build/cmake/VisualStudio2008UserFile.vcproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcproj.${SYSTEM_NAME}.${USER_NAME}.user
				@ONLY
			)
		ELSEIF(MSVC_VERSION GREATER 1300)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/Build/cmake/VisualStudio2005UserFile.vcproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcproj.${SYSTEM_NAME}.${USER_NAME}.user
				@ONLY
			)
		ENDIF()
	ENDIF()
ENDFUNCTION()

FUNCTION(ADD_PRECOMPILED_HEADER TARGET_NAME PRECOMPILEDHEADER PRECOMPILEDSOURCE)
	IF(MSVC)
		GET_FILENAME_COMPONENT(PRECOMPILEDBASENAME ${PRECOMPILEDHEADER} NAME_WE)
		SET(PCHOUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${PRECOMPILEDBASENAME}.pch")

		SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES COMPILE_FLAGS "/Yu\"${PRECOMPILEDHEADER}\" /Fp\"${PCHOUTPUT}\"" OBJECT_DEPENDS "${PCHOUTPUT}")
		SET_SOURCE_FILES_PROPERTIES(${PRECOMPILEDSOURCE} PROPERTIES COMPILE_FLAGS "/Yc\"${PRECOMPILEDHEADER}\" /Fp\"${PCHOUTPUT}\"" OBJECT_OUTPUTS "${PCHOUTPUT}")
	ENDIF()
ENDFUNCTION()

FUNCTION(ADD_POST_BUILD TARGET_NAME SUBFOLDER)
	IF(SUBFOLDER STREQUAL "")
		SET(TARGET_FOLDER ${KLAYGE_BIN_DIR})
	ELSE()
		SET(TARGET_FOLDER ${KLAYGE_BIN_DIR}/${SUBFOLDER})
	ENDIF()

	GET_PROPERTY(OUT_LOCATION_DEBUG TARGET ${TARGET_NAME} PROPERTY LOCATION_DEBUG)
	ADD_CUSTOM_COMMAND(TARGET ${TARGET_NAME}
		POST_BUILD
		COMMAND IF EXIST ${OUT_LOCATION_DEBUG} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_DEBUG} ${TARGET_FOLDER})

	GET_PROPERTY(OUT_LOCATION_RELWITHDEBINFO TARGET ${TARGET_NAME} PROPERTY LOCATION_RELWITHDEBINFO)
	ADD_CUSTOM_COMMAND(TARGET ${TARGET_NAME}
		POST_BUILD
		COMMAND IF EXIST ${OUT_LOCATION_RELWITHDEBINFO} ${CMAKE_COMMAND} -E copy_if_different ${OUT_LOCATION_RELWITHDEBINFO} ${TARGET_FOLDER})
ENDFUNCTION()


# Projects
ADD_SUBDIRECTORY(Core)

ADD_SUBDIRECTORY(Plugins/Render/OpenGL)
ADD_SUBDIRECTORY(Plugins/Render/OpenGLES)

ADD_SUBDIRECTORY(Plugins/Audio/OpenAL)
ADD_SUBDIRECTORY(Plugins/Audio/OggVorbis)

ADD_SUBDIRECTORY(Plugins/Scene/OCTree)

IF(WIN32)
	ADD_SUBDIRECTORY(Plugins/Audio/DSound)
	
	ADD_SUBDIRECTORY(Plugins/Input/DInput)
	
	ADD_SUBDIRECTORY(Plugins/Show/DShow)
	
	ADD_SUBDIRECTORY(Plugins/Render/D3D11)
	
	ADD_SUBDIRECTORY(KGEConfig)
ENDIF(WIN32)
