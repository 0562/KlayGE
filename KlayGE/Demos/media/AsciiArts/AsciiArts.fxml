<?xml version='1.0'?>

<effect>
	<parameter type="sampler" name="src_sampler"/>
	<parameter type="sampler" name="lums_sampler"/>
	<parameter type="float2" name="cell_per_row_line"/>

	<shader>
		<![CDATA[
void PostProcessVS(float4 pos : POSITION,
					float2 tex : TEXCOORD0,
					out float4 oPos : POSITION,
					out float2 oTex : TEXCOORD0)
{
	oPos = pos;
	oTex = tex;
}

float4 AsciiArtsPS(float2 tex_coord0 : TEXCOORD0) : COLOR
{
	half lum = tex2D(src_sampler, tex_coord0).r;
	half2 t = half2(floor(lum * 31) / 32, 0) + frac(tex_coord0 / cell_per_row_line) / half2(32, 1);
	return lum * tex2D(lums_sampler, t);
}
		]]>
	</shader>

	<technique name="AsciiArts">
		<pass name="p0">
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="AsciiArtsPS()"/>
		</pass>
	</technique>


	<parameter type="float4" name="tex_coord_offset" array_size="8"/>

	<shader>
		<![CDATA[
float4 Downsample8x8PS(float2 oTex : TEXCOORD0) : COLOR
{
	const half3 rgb_to_lum = half3(0.299, 0.587, 0.114);

	half4 s = 0;
	for (int i = 0; i < 8; ++ i)
	{
		s += tex2D(src_sampler, oTex + tex_coord_offset[i].xy);
		s += tex2D(src_sampler, oTex + tex_coord_offset[i].zw);
	}

	return dot(s.rgb / 16, rgb_to_lum);
}
		]]>
	</shader>

	<technique name="Downsample8x8">
		<pass name="p0">
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="Downsample8x8PS()"/>
		</pass>
	</technique>
</effect>
