// RenderTarget.cpp
// KlayGE 渲染目标类 实现文件
// Ver 2.2.0
// 版权所有(C) 龚敏敏, 2003-2004
// Homepage: http://klayge.sourceforge.net
//
// 2.2.0
// 改用boost::timer计时 (2004.11.1)
//
// 2.1.2
// 简化了UpdateStats (2004.7.19)
//
// 修改记录
//////////////////////////////////////////////////////////////////////////////////

#include <KlayGE/KlayGE.hpp>
#include <KlayGE/Math.hpp>
#include <KlayGE/Viewport.hpp>
#include <KlayGE/SceneManager.hpp>
#include <KlayGE/Context.hpp>

#include <KlayGE/RenderTarget.hpp>

namespace KlayGE
{
	// 构造函数
	/////////////////////////////////////////////////////////////////////////////////
	RenderTarget::RenderTarget()
					: left_(0), top_(0), width_(0), height_(0), colorDepth_(0), format_(EF_Unknown),
						isDepthBuffered_(false), depthBits_(0), stencilBits_(0),
						active_(false)
	{
	}

	// 析构函数
	/////////////////////////////////////////////////////////////////////////////////
	RenderTarget::~RenderTarget()
	{
	}

	// 渲染目标的左坐标
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::Left() const
	{
		return left_;
	}

	// 渲染目标的顶坐标
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::Top() const
	{
		return top_;
	}

	// 渲染目标的宽度
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::Width() const
	{
		return width_;
	}

	// 渲染目标的高度
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::Height() const
	{
		return height_;
	}

	// 渲染目标的颜色深度
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::ColorDepth() const
	{
		return colorDepth_;
	}

	// 渲染目标的深度位数
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::DepthBits() const
	{
		return depthBits_;
	}

	// 渲染目标的模板位数
	/////////////////////////////////////////////////////////////////////////////////
	uint32_t RenderTarget::StencilBits() const
	{
		return stencilBits_;
	}

	// 渲染目标的元素格式
	/////////////////////////////////////////////////////////////////////////////////
	ElementFormat RenderTarget::Format() const
	{
		return format_;
	}

	// 刷新渲染目标
	/////////////////////////////////////////////////////////////////////////////////
	void RenderTarget::Update()
	{
		Context::Instance().SceneManagerInstance().Update();
		this->SwapBuffers();
	}

	// 获取视口
	/////////////////////////////////////////////////////////////////////////////////
	Viewport const & RenderTarget::GetViewport() const
	{
		return viewport_;
	}

	Viewport& RenderTarget::GetViewport()
	{
		return viewport_;
	}

	// 设置视口
	/////////////////////////////////////////////////////////////////////////////////
	void RenderTarget::SetViewport(Viewport const & viewport)
	{
		viewport_ = viewport;
	}

	// 获取该渲染目标是否处于活动状态
	/////////////////////////////////////////////////////////////////////////////////
	bool RenderTarget::Active() const
	{
		return active_;
	}

	// 设置该渲染目标是否处于活动状态
	/////////////////////////////////////////////////////////////////////////////////
	void RenderTarget::Active(bool state)
	{
		active_ = state;
	}
}
