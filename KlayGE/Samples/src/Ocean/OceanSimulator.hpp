#ifndef _OCEAN_WAVE_H
#define _OCEAN_WAVE_H

#include <KlayGE/PreDeclare.hpp>
#include <KlayGE/Math.hpp>

#include "FFT.hpp"

namespace KlayGE
{
	struct OceanParameter
	{
		// Must be power of 2.
		int dmap_dim;
		// Typical value is 10 ~ 20
		float patch_length;

		// Typical value is 5
		float time_peroid;
		uint32_t num_frames;

		// Adjust the time interval for simulation.
		float time_scale;
		// Amplitude for transverse wave. Around 1.0
		float wave_amplitude;
		// Wind speed (2 dimension).
		float2 wind_speed;
		// This value damps out the waves against the wind direction.
		// Smaller value means higher wind dependency.
		float wind_dependency;
		// The amplitude for longitudinal wave. Must be positive.
		float choppy_scale;
	};

	class OceanSimulator
	{
	public:
		OceanSimulator();
		~OceanSimulator();

		// Update ocean wave when tick arrives.
		void Update(uint32_t frame);

		// Texture access
		TexturePtr const & DisplacementTex() const;
		TexturePtr const & GradientTex() const;

		OceanParameter const & Parameters() const;
		void Parameters(OceanParameter const & params);

	private:
		void InitHeightMap(std::vector<float2>& out_h0, std::vector<float>& out_omega);

	private:
		OceanParameter param_;

		// ---------------------------------- GPU shading asset -----------------------------------
		
		// Displacement map
		TexturePtr displacement_tex_;		// (RGBA32F)
		FrameBufferPtr displacement_fb_;

		// Gradient field
		TexturePtr gradient_tex_;			// (RGBA16F)
		FrameBufferPtr gradient_fb_;

		// ----------------------------------- CS simulation data ---------------------------------

		// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
		GraphicsBufferPtr h0_buffer_;

		// Angular frequency
		GraphicsBufferPtr omega_buffer_;

		// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
		GraphicsBufferPtr ht_buffer_;

		// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
		GraphicsBufferPtr dxyz_buffer_;

		GraphicsBufferPtr quad_vb_;

		// Shaders, layouts and constants
		RenderTechniquePtr update_spectrum_tech_;
		RenderTechniquePtr update_displacement_tech_;
		RenderTechniquePtr gen_gradient_folding_tech_;
		RenderEffectParameterPtr time_param_;

		RenderLayoutPtr quad_layout_;

		// FFT wrap-up
		CSFFT_Plan fft_plan_;
	};
}

#endif	// _OCEAN_WAVE_H
