<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="inv_mvp"/>

		<parameter type="float3" name="light_in_eye"/>
		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<parameter type="textureCUBE" name="skybox_tex"/>
	<parameter type="textureCUBE" name="skybox_C_tex"/>

	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>
	
	<shader>
		<![CDATA[
float4 StoreNormalDepthMat(float3 normal, float depth, float mat_id)
{
	return float4(normal.xy, depth, mat_id);
}

float4 StoreDiffuseSpecular(float3 diffuse, float specular)
{
	return float4(diffuse, specular);
}
		]]>
	</shader>

	<shader>
		<![CDATA[
void GBufferVS(float4 pos : POSITION,
			float3 normal : NORMAL,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oNormal : TEXCOORD1,
			out float3 oPosES : TEXCOORD2,
			out float4 oPos : SV_Position)
{
	float4 pos_es = mul(pos, model_view);
	oPos = mul(pos_es, proj);
	oNormal.xyz = normal;
	oNormal.w = pos_es.z * depth_near_far_invfar.z;
	oPosES = pos_es.xyz;
	
	oTexCoord = texcoord;
}

void GBufferPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1, float3 pos_es : TEXCOORD2,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(mul(normal.xyz, (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMat(normal.xyz, normal.w, 0);
	
	float3 view_dir = normalize(-pos_es);
	float3 light_dir = normalize(light_in_eye - pos_es);
	float3 halfway = normalize(light_dir + view_dir);
	
	float3 diffuse_clr = 1;//diffuse_tex.Sample(linear_sampler, texcoord).rgb;
	float3 specular_clr = 1;
	float3 color = 0.1f + calc_brdf(diffuse_clr * 0.6f, specular_clr * 0.3f, 30.0f, 0.04f, light_dir, halfway, normal.xyz);
	oClr = StoreDiffuseSpecular(color, 0);
}


void GBufferSkyBoxVS(float4 pos : POSITION,
			out float3 texcoord0 : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = pos;
	texcoord0 = mul(pos, inv_mvp).xyz;
}

void GBufferSkyBoxPS(float3 texCoord0 : TEXCOORD0,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	oClr = decode_hdr_yc(skybox_tex.Sample(skybox_sampler, texCoord0).r,
					skybox_C_tex.Sample(skybox_sampler, texCoord0));
	oNormalDepth = StoreNormalDepthMat(0, 1, 0);
}
		]]>
	</shader>

	<technique name="GBufferTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>

	<technique name="GBufferSkyBoxTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_write_mask" value="0"/>
			<state name="depth_func" value="equal"/>

			<state name="vertex_shader" value="GBufferSkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferSkyBoxPS()"/>
		</pass>
	</technique>
</effect>
