<?xml version='1.0'?>

<effect>
	<include name="../../../RenderFX/Lighting.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="proj"/>

		<parameter type="float3" name="light_in_eye"/>
		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
float4 StoreNormalDepthMat(float3 normal, float depth, float mat_id)
{
	return float4(normal.xy, depth, mat_id);
}

float4 StoreDiffuseSpecular(float3 diffuse, float specular)
{
	return float4(diffuse, specular);
}
		]]>
	</shader>

	<shader>
		<![CDATA[
void GBufferVS(float4 pos : POSITION,
			float3 normal : NORMAL,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oNormal : TEXCOORD1,
			out float3 oPosES : TEXCOORD2,
			out float4 oPos : SV_Position)
{
	float4 pos_es = mul(pos, model_view);
	oPos = mul(pos_es, proj);
	oNormal.xyz = normal;
	oNormal.w = pos_es.z * depth_near_far_invfar.z;
	oPosES = pos_es;
	
	oTexCoord = texcoord;
}

void GBufferPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1, float3 pos_es : TEXCOORD2,
			out half4 oClr : SV_Target0, out half4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(mul(normal.xyz, (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMat(normal.xyz, normal.w, 0);
	
	float3 view_dir = -pos_es;
	float3 light_dir = normalize(light_in_eye - pos_es);
	
	float diffuse = diffuse_term(light_dir, normal);
	float specular = 0;
	if (diffuse > 0)
	{
		specular = dot(normalize(light_dir + view_dir), normal);
		if (specular > 0)
		{
			specular = pow(specular, 8.0f);
		}
		else
		{
			specular = 0;
		}
	}
	else
	{
		diffuse = 0;
	}
	
	float3 diffuse_clr = 1;//diffuse_tex.Sample(linear_sampler, texcoord).rgb;
	float3 specular_clr = 0;
	float4 color = float4(0.15f + diffuse_clr * diffuse * 0.7f + specular_clr * specular * 0.3f, 1);

	oClr = StoreDiffuseSpecular(color, 0);
}
		]]>
	</shader>

	<technique name="GBufferTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>
</effect>
