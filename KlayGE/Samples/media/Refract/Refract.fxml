<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model"/>
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="mv"/>
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="modelviewit"/>
		<parameter type="float4x4" name="inv_view"/>
		<parameter type="float4x4" name="inv_vp"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="int" name="flip"/>
	</cbuffer>
	<parameter type="float3" name="eta_ratio"/>

	<parameter type="textureCUBE" name="skybox_Ycube_tex"/>
	<parameter type="sampler" name="skybox_YcubeMapSampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>
	<parameter type="textureCUBE" name="skybox_Ccube_tex"/>
	<parameter type="sampler" name="skybox_CcubeMapSampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>
	<parameter type="texture2D" name="BackFace_tex"/>
	<parameter type="sampler" name="BackFace_Sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float3x3 my_refract3(float3 i, float3 n, float3 eta)
{
	float cosi = dot(i, n);
	float3 cost2 = 1.0 - eta * eta * (1.0 - cosi * cosi);
	float3 tmp = eta * cosi + sqrt(abs(cost2));

	float3x3 ret;
	ret[0] = (cost2.x < 0) ? 0 : (eta.x * i - tmp.x * n);
	ret[1] = (cost2.y < 0) ? 0 : (eta.y * i - tmp.y * n);
	ret[2] = (cost2.z < 0) ? 0 : (eta.z * i - tmp.z * n);
    return ret;
}

void RefractVS(float4 pos			: POSITION,
				float3 normal		: NORMAL,
				out float3 out_normal	: TEXCOORD0,
				out float4 incident : TEXCOORD1,
				out float4 refract_vec : TEXCOORD2,
				out float4 pos_ss	: TEXCOORD3,
				out float4 dir_ss	: TEXCOORD4,
				out float4 oPos		: SV_Position)
{
	oPos = mul(pos, mvp);
	pos_ss = oPos;

	out_normal = mul(normal, (float3x3)modelviewit);
	incident.xyz = mul(pos, mv).xyz;
	incident.w = incident.z;
	
	float3 n_incident = normalize(incident.xyz);
	float3 n_normal = normalize(out_normal);
	refract_vec.xyz = refract(n_incident, n_normal, eta_ratio.g);
	refract_vec.w = fresnel_term_schlick(-n_incident, n_normal, 0.0977f);
	dir_ss = mul(float4(refract_vec.xyz, 0), proj);
}

float4 RefractPS(float3 normal			: TEXCOORD0,
					float4 incident		: TEXCOORD1,
					float4 refract_vec	: TEXCOORD2,
					float4 pos_ss		: TEXCOORD3,
					float4 dir_ss		: TEXCOORD4) : SV_Target
{
	normal = normalize(normal);
	incident.xyz = normalize(incident.xyz);

	float2 tex = pos_ss.xy / pos_ss.w;
	tex.y *= flip;
	tex = tex / 2 + 0.5f;
	float4 backface = BackFace_tex.Sample(BackFace_Sampler, tex);
	
	pos_ss += dir_ss * (backface.z - incident.w);
	
	tex = pos_ss.xy / pos_ss.w;
	tex.y *= flip;
	tex = tex / 2 + 0.5f;
	backface = BackFace_tex.Sample(BackFace_Sampler, tex);

	float3 back_face_normal = -restore_normal(backface.xy);

	float3x3 refract_rgb = my_refract3(refract_vec.xyz, back_face_normal, 1 / eta_ratio);
	float3 reflect_vec = reflect(incident.xyz, normal);
	
	refract_rgb[0] = mul(float4(refract_rgb[0], 0), inv_view).xyz;
	refract_rgb[1] = mul(float4(refract_rgb[1], 0), inv_view).xyz;
	refract_rgb[2] = mul(float4(refract_rgb[2], 0), inv_view).xyz;
	reflect_vec = mul(float4(reflect_vec, 0), inv_view).xyz;

	float4 y = float4(skybox_Ycube_tex.Sample(skybox_YcubeMapSampler, refract_rgb[0]).r,
									skybox_Ycube_tex.Sample(skybox_YcubeMapSampler, refract_rgb[1]).r,
									skybox_Ycube_tex.Sample(skybox_YcubeMapSampler, refract_rgb[2]).r,
									skybox_Ycube_tex.Sample(skybox_YcubeMapSampler, reflect_vec).r);
	y = exp2(y * 65536 / 2048 - 16);
	float4 refracted_c = float4(get_xy_channel(skybox_Ccube_tex.Sample(skybox_CcubeMapSampler, refract_rgb[0])).y,
									get_xy_channel(skybox_Ccube_tex.Sample(skybox_CcubeMapSampler, refract_rgb[1])).x,
									get_xy_channel(skybox_Ccube_tex.Sample(skybox_CcubeMapSampler, refract_rgb[2])));
	float2 reflected_c = get_xy_channel(skybox_Ccube_tex.Sample(skybox_CcubeMapSampler, reflect_vec));
	refracted_c *= refracted_c;
	reflected_c *= reflected_c;

	float3 refracted_clr = y.xyz * float3(refracted_c.x, (1 - refracted_c.z - refracted_c.w), refracted_c.y);
	float3 reflected_clr = y.w * float3(reflected_c.y, (1 - reflected_c.y - reflected_c.x), reflected_c.x);

	return float4(lerp(refracted_clr, reflected_clr, refract_vec.w) / float3(0.299f, 0.587f, 0.114f), 1);
}
		]]>
	</shader>

	<technique name="Refract">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_func" value="less_equal"/>

			<state name="vertex_shader" value="RefractVS()"/>
			<state name="pixel_shader" value="RefractPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void RefractBackFaceVS(float4 pos : POSITION,
							float3 normal : NORMAL,
							out float4 normal_depth : TEXCOORD0,
							out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
	normal_depth.xyz = mul(normal, (float3x3)modelviewit);
	normal_depth.w = oPos.w;
}

float4 RefractBackFacePS(float4 normal_depth : TEXCOORD0) : SV_Target
{
	return float4(normalize(normal_depth.xyz).xy, normal_depth.w, 1);
}
		]]>
	</shader>

	<technique name="RefractBackFace">
		<pass name="p0">
			<state name="cull_mode" value="front"/>
			<state name="depth_func" value="greater"/>

			<state name="vertex_shader" value="RefractBackFaceVS()"/>
			<state name="pixel_shader" value="RefractBackFacePS()"/>
		</pass>
	</technique>
</effect>
