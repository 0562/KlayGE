<?xml version='1.0'?>

<effect>
	<include name="../../../RenderFX/Lighting.fxml"/>
	<include name="../../../RenderFX/PostProcess.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float3" name="light_in_eye"/>

		<parameter type="float3" name="upper_left"/>
		<parameter type="float3" name="upper_right"/>
		<parameter type="float3" name="lower_left"/>
		<parameter type="float3" name="lower_right"/>

		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="texture2D" name="bump_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	
	<shader>
		<![CDATA[
float3 texcoord_to_view(float2 tex)
{
	return lerp(lerp(upper_left, upper_right, tex.x),
				lerp(lower_left, lower_right, tex.x),
				tex.y);
}

float4 StoreNormalDepthMat(float3 normal, float depth, float mat_id)
{
	return float4(normal.xy, depth, mat_id);
}

float4 StoreDiffuseSpecular(float3 diffuse, float specular)
{
	return float4(diffuse, specular);
}

float3 GetNormal(float4 ndc)
{
	return float3(ndc.xy, -sqrt(1 - dot(ndc.xy, ndc.xy)));
}

float GetDepth(float4 ndc)
{
	return ndc.z;
}

float3 GetDiffuse(float4 clr)
{
	return clr.xyz;
}

float3 GetSpecular(float4 clr)
{
	return clr.www;
}
		]]>
	</shader>
	
	<shader>
		<![CDATA[
void GBufferVS(float4 pos : POSITION,
			float3 normal : NORMAL,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oNormal : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	float4 pos_es = mul(pos, model_view);
	oPos = mul(pos_es, proj);
	oNormal.xyz = normal;
	oNormal.w = pos_es.z * depth_near_far_invfar.z;
	
	oTexCoord = texcoord;
}

void GBufferPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out half4 oClr : SV_Target0, out half4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(mul(normal.xyz + 0.1f * bump_tex.Sample(linear_sampler, texcoord), (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMat(normal.xyz, normal.w, 0);

	oClr = StoreDiffuseSpecular(diffuse_tex.Sample(linear_sampler, texcoord).rgb, 0);
}

void GBufferNoBumpPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out half4 oClr : SV_Target0, out half4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(mul(normal.xyz, (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMat(normal.xyz, normal.w, 0);

	oClr = StoreDiffuseSpecular(diffuse_tex.Sample(linear_sampler, texcoord).rgb, 0);
}
		]]>
	</shader>

	<technique name="GBufferTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>

	<technique name="GBufferNoBumpTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferNoBumpPS()"/>
		</pass>
	</technique>

	<parameter type="float2" name="inv_width_height"/>

	<parameter type="texture2D" name="rand_normal_tex">
		<annotation type="string" name="SasResourceAddress" value="rand_normal.dds"/>
	</parameter>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="bilinear_clamp_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="bilinear_wrap_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<parameter type="texture2D" name="src_tex"/>
	<parameter type="texture2D" name="color_tex"/>
	<parameter type="texture2D" name="ssao_tex"/>

	<parameter type="bool" name="ssao_enabled"/>

	<parameter type="float4" name="ssao_param"/>

	<shader>
		<![CDATA[
float4 SSAO(float2 tc0)
{
	float4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	
	const half fScale = 0.025f; 
	const half3 samples[8] =
	{
		normalize(half3( 1, 1, 1)) * fScale * 1,
		normalize(half3(-1,-1,-1)) * fScale * 2,
		normalize(half3(-1,-1, 1)) * fScale * 3,
		normalize(half3(-1, 1,-1)) * fScale * 4,
		normalize(half3(-1, 1 ,1)) * fScale * 5,
		normalize(half3( 1,-1,-1)) * fScale * 6,
		normalize(half3( 1,-1, 1)) * fScale * 7,
		normalize(half3( 1, 1,-1)) * fScale * 8,
	};

	float3 randNormal = rand_normal_tex.Sample(bilinear_wrap_sampler, tc0 * float2(1280 / 4, 800 / 4)).rgb * 2 - 1;
	
	float scene_depth_m = depth * depth_near_far_invfar.y;
	
	float3 sample_scale = ssao_param.zzw
		* saturate(scene_depth_m / 5.3f) // make area smaller if distance less than 5 meters
		* (1.f + scene_depth_m / 8.f ); // make area bigger if distance more than 32 meters

	float depth_range_scale = depth_near_far_invfar.y / sample_scale.z * 0.85f;
	
	// convert from meters into SS units
	sample_scale.xy *= 1.0f / scene_depth_m;
	sample_scale.z *= 2.0f / depth_near_far_invfar.y;

	float depth_test_softness = 64.f / sample_scale.z;

	float4 sky_access = 0.0f;
	float4 arr_scene_depth2[2];
	float3 ray;

	for (int i = 0; i < 2; ++ i)
	{
		ray = reflect(samples[i * 4 + 0].xyz, randNormal) * sample_scale;
		arr_scene_depth2[0].x = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;
		ray *= 0.5;
		arr_scene_depth2[1].x = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;

		ray = reflect(samples[i * 4 + 1].xyz, randNormal) * sample_scale;
		arr_scene_depth2[0].y = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;
		ray *= 0.5;
		arr_scene_depth2[1].y = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;

		ray = reflect(samples[i * 4 + 2].xyz, randNormal) * sample_scale;
		arr_scene_depth2[0].z = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;
		ray *= 0.5;
		arr_scene_depth2[1].z = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;
		
		ray = reflect(samples[i * 4 + 3].xyz, randNormal) * sample_scale;
		arr_scene_depth2[0].w = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;
		ray *= 0.5;
		arr_scene_depth2[1].w = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) + ray.z;

		for (int j = 0; j < 2; ++ j)
		{
			float4 dist = depth - arr_scene_depth2[j];
			float4 dist_scaled = dist * depth_range_scale;
			float4 range_is_invalid = (saturate(abs(dist_scaled)) + saturate(dist_scaled)) / 2;
			sky_access += lerp(saturate((-dist) * depth_test_softness), 0.55, range_is_invalid);
		}
	}

	return saturate(lerp(0.9, dot(sky_access, 1 / 8.0f) - ssao_param.y, ssao_param.x));
}

float GetEdgeWeight(float2 tc0)
{
	float4 tc1 = tc0.xyxy + inv_width_height.xyxy * float4(-1, -1, +1, +1);
	float4 tc2 = tc0.xyxy + inv_width_height.xyxy * float4(+1, -1, -1, +1);
	float4 tc3 = tc0.xyxy + inv_width_height.xyxy * float4(-1, 0, +1, 0);
	float4 tc4 = tc0.xyxy + inv_width_height.xyxy * float4(0, -1, 0, +1);
	
	float4 nd[9];  
	// Retrieve normal and depth data for all neighbors.
	nd[0] = src_tex.Sample(point_sampler, tc0);
	nd[1] = src_tex.Sample(point_sampler, tc1.xy);
	nd[2] = src_tex.Sample(point_sampler, tc1.zw);
	nd[3] = src_tex.Sample(point_sampler, tc2.xy);
	nd[4] = src_tex.Sample(point_sampler, tc2.zw);
	nd[5] = src_tex.Sample(point_sampler, tc3.xy);
	nd[6] = src_tex.Sample(point_sampler, tc3.zw);
	nd[7] = src_tex.Sample(point_sampler, tc4.xy);
	nd[8] = src_tex.Sample(point_sampler, tc4.zw);

	// Compute Deltas in Depth.
	float4 Deltas1;
	float4 Deltas2;
	Deltas1.x = GetDepth(nd[1]);
	Deltas1.y = GetDepth(nd[2]);
	Deltas1.z = GetDepth(nd[3]);
	Deltas1.w = GetDepth(nd[4]);
	Deltas2.x = GetDepth(nd[5]);
	Deltas2.y = GetDepth(nd[6]);
	Deltas2.z = GetDepth(nd[7]);
	Deltas2.w = GetDepth(nd[8]);
	// Compute andbsolute gradients from center.
	Deltas1 = abs(Deltas1 - GetDepth(nd[0]));
	Deltas2 = abs(GetDepth(nd[0]) - Deltas2);
	// Find min and max gradient, ensuring min != 0
	float4 maxDeltas = max(Deltas1, Deltas2);
	float4 minDeltas = max(min(Deltas1, Deltas2), 0.00001);
	// Compare change in gradients, flagging ones that change
	// significantly.
	// How severe the change must be to get flagged is a function of the
	// minimum gradient. It is not resolution dependent. The constant
	// number here would change based on how the depth values are stored
	// and how sensitive the edge detection should be.
	float4 depthResults = step(minDeltas * 25.0, maxDeltas);
	// Compute change in the cosine of the angle between normals.
	float3 normal0 = GetNormal(nd[0]);
	Deltas1.x = dot(GetNormal(nd[1]), normal0);
	Deltas1.y = dot(GetNormal(nd[2]), normal0);
	Deltas1.z = dot(GetNormal(nd[3]), normal0);
	Deltas1.w = dot(GetNormal(nd[4]), normal0);
	Deltas2.x = dot(GetNormal(nd[5]), normal0);
	Deltas2.y = dot(GetNormal(nd[6]), normal0);
	Deltas2.z = dot(GetNormal(nd[7]), normal0);
	Deltas2.w = dot(GetNormal(nd[8]), normal0);
	Deltas1 = abs(Deltas1 - Deltas2);
	// Compare change in the cosine of the angles, flagging changes
	// above some constant threshold. The cosine of the angle is not a
	// linear function of the angle, so to have the flagging be
	// independent of the angles involved, an arccos function would be
	// required.
	float4 normalResults = step(0.4, Deltas1);
	normalResults = max(normalResults, depthResults);
	return dot(normalResults, 0.25);
}  

void DeferredShadingVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0,
				out float3 view_dir : TEXCOORD1,
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);
	
	float4 PosSS = oPos / oPos.w;
	view_dir = texcoord_to_view(float2(PosSS.x, -PosSS.y) / 2 + 0.5f);
}

float4 DeferredShadingPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}
	float3 normal = GetNormal(ndc);
	
	view_dir = normalize(view_dir);

	float3 pos_es = view_dir * (depth * depth_near_far_invfar.y);
	float3 light_dir = normalize(light_in_eye - pos_es);
	
	float diffuse = diffuse_term(light_dir, normal);
	float specular = 0;
	if (diffuse > 0)
	{
		specular = dot(normalize(light_dir - view_dir), normal);
		if (specular > 0)
		{
			specular = pow(specular, 8.0f);
		}
		else
		{
			specular = 0;
		}
	}
	else
	{
		diffuse = 0;
	}

	float4 color = color_tex.Sample(point_sampler, tc0);
	float3 diffuse_clr = GetDiffuse(color);
	if (ssao_enabled)
	{
		diffuse_clr *= ssao_tex.Sample(point_sampler, tc0).xxx;
	}
	float3 specular_clr = GetSpecular(color);
	return float4(diffuse_clr * (0.15f + diffuse) * 0.7f + specular_clr * specular * 0.3f, 1);
}

float4 ShowPositionPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}
	
	view_dir = normalize(view_dir);
	float3 pos_es = view_dir * (depth * depth_near_far_invfar.y);
	
	return float4(pos_es, 1);
}

float4 ShowNormalPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}
	float3 normal = GetNormal(ndc);
	
	return float4(normal / 2 + 0.5f, 1);
}

float4 ShowDepthPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}
	float3 normal = GetNormal(ndc);
	
	return float4(depth.xxx, 1);
}

float4 ShowDiffusePS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}

	float4 color = color_tex.Sample(point_sampler, tc0);
	float3 diffuse_clr = GetDiffuse(color);
	return float4(diffuse_clr, 1);
}

float4 ShowSpecularPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}
	
	float4 color = color_tex.Sample(point_sampler, tc0);
	float3 specular_clr = GetSpecular(color);
	return float4(specular_clr, 1);
}

float4 ShowEdgePS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}

	float4 color = GetEdgeWeight(tc0);
	return color;
}

float4 ShowSSAOPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}

	float4 color = ssao_tex.Sample(point_sampler, tc0).xxxx;
	return color;
}

float4 AntiAliasPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}

	float edge = GetEdgeWeight(tc0);
	return (color_tex.Sample(bilinear_clamp_sampler, tc0 + edge * float2(-inv_width_height.x, -inv_width_height.y))
			+ color_tex.Sample(bilinear_clamp_sampler, tc0 + edge * float2(+inv_width_height.x, -inv_width_height.y))
			+ color_tex.Sample(bilinear_clamp_sampler, tc0 + edge * float2(-inv_width_height.x, +inv_width_height.y))
			+ color_tex.Sample(bilinear_clamp_sampler, tc0 + edge * float2(+inv_width_height.x, +inv_width_height.y))) * 0.25f;
}

float4 SSAOPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	half4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	if (1 == depth)
	{
		clip(-1);
	}

	float4 color = SSAO(tc0);
	return color;
}
		]]>
	</shader>

	<technique name="DeferredShading">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>
			
			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="DeferredShadingPS()"/>
		</pass>
	</technique>

	<technique name="ShowPosition">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowPositionPS()"/>
		</pass>
	</technique>

	<technique name="ShowNormal">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowNormalPS()"/>
		</pass>
	</technique>

	<technique name="ShowDepth">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowDepthPS()"/>
		</pass>
	</technique>

	<technique name="ShowDiffuse">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowDiffusePS()"/>
		</pass>
	</technique>

	<technique name="ShowSpecular">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowSpecularPS()"/>
		</pass>
	</technique>

	<technique name="ShowEdge">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowEdgePS()"/>
		</pass>
	</technique>

	<technique name="ShowSSAO">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DeferredShadingVS()"/>
			<state name="pixel_shader" value="ShowSSAOPS()"/>
		</pass>
	</technique>

	<technique name="AntiAlias">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="AntiAliasPS()"/>
		</pass>
	</technique>

	<technique name="SSAO">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SSAOPS()"/>
		</pass>
	</technique>
</effect>
