<?xml version='1.0'?>

<effect>
	<include name="DeferredShadingUtil.fxml"/>
	<include name="util.fxml"/>
	
	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="inv_mvp"/>

		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="float" name="shininess"/>

	<parameter type="texture2D" name="bump_tex"/>
	<parameter type="bool" name="bump_map_enabled"/>

	<parameter type="sampler" name="aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="8"/>
	</parameter>
	
	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void GBufferVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float3 normal : NORMAL,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oNormalDepth : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
	oNormalDepth.xyz = mul(normal, (float3x3)model_view);
	oNormalDepth.w = oPos.w * depth_near_far_invfar.z;

	oTexCoord = texcoord;
}

float4 GBufferPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1) : SV_Target
{
	if (bump_map_enabled)
	{
		normal.xyz += 0.1f * mul(bump_tex.Sample(aniso_sampler, texcoord).xyz, (float3x3)model_view);
	}
	normal.xyz = normalize(normal.xyz);	
	return StoreNormalDepthMtl(normal.xyz, normal.w, 1, shininess);
}

void GBufferSkyBoxVS(float4 pos : POSITION,
			out float3 texcoord0 : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = pos;
	texcoord0 = mul(pos, inv_mvp).xyz;
}

float4 GBufferSkyBoxPS(float3 texCoord0 : TEXCOORD0) : SV_Target
{
	return StoreNormalDepthMtl(0, 1, 0, 0);
}
		]]>
	</shader>

	<technique name="GBufferTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>

	<technique name="GBufferSkyBoxTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="GBufferSkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferSkyBoxPS()"/>
		</pass>
	</technique>
	
	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos : POSITION,
						out float oDist : TEXCOORD0,
						out float4 oPos : SV_Position)
{
	float4 pos_es = mul(pos, model_view);
	oPos = mul(pos, mvp);
	oDist = length(pos_es.xyz);
}

float4 GenShadowMapPS(float dist : TEXCOORD0) : SV_Target
{
	float2 dxdy = float2(ddx(dist), ddy(dist));
	return float4(dist, dist * dist + 0.25f * dot(dxdy, dxdy), 0, 1);
}
		]]>
	</shader>

	<technique name="GenShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			
			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>


	<cbuffer name="model">
		<parameter type="float4" name="diffuse_clr"/>
		<parameter type="float4" name="emit_clr"/>
		<parameter type="float" name="specular_level"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="bool" name="diffuse_map_enabled"/>

	<parameter type="textureCUBE" name="skybox_tex"/>
	<parameter type="textureCUBE" name="skybox_C_tex"/>

	<parameter type="texture2D" name="lighting_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<cbuffer name="per_frame2">
		<parameter type='float4' name='texel_to_pixel_offset'/>
		<parameter type='int' name='flipping'/>
	</cbuffer>

	<parameter type="texture2D" name="ssao_tex"/>
	<parameter type="bool" name="ssao_enabled"/>
	
	<shader>
		<![CDATA[
void ShadingVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oPosSS : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
	oPosSS = oPos;
	oTexCoord = texcoord;
}

float4 Shading(float2 tc, float3 diffuse, float3 emit, float specular_level)
{
	float ssao = 1;
	if (ssao_enabled)
	{
		ssao = ssao_tex.Sample(point_sampler, tc).x;
	}
	
	float4 lighting = lighting_tex.Sample(point_sampler, tc);
	return float4((lighting.rgb * diffuse + emit + lighting.a * specular_level) * ssao, 1);
}

float4 ShadingPS(float2 texcoord : TEXCOORD0, float4 pos_ss : TEXCOORD1) : SV_Target
{
	pos_ss += texel_to_pixel_offset;
	float2 tc = pos_ss.xy / pos_ss.w * 0.5f;
	tc.y *= flipping;
	tc += 0.5;
	
	float3 diffuse;
	if (diffuse_map_enabled)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}

	return Shading(tc, diffuse, emit_clr.rgb, specular_level);
}

float4 ShadingSkyBoxPS(float3 texcoord : TEXCOORD0) : SV_Target
{
	return decode_hdr_yc(skybox_tex.Sample(skybox_sampler, texcoord).r,
					skybox_C_tex.Sample(skybox_sampler, texcoord));
}
		]]>
	</shader>

	<technique name="Shading">
		<pass name="p0">
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="ShadingVS()"/>
			<state name="pixel_shader" value="ShadingPS()"/>
		</pass>
	</technique>

	<technique name="ShadingSkyBox">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="GBufferSkyBoxVS()"/>
			<state name="pixel_shader" value="ShadingSkyBoxPS()"/>
		</pass>
	</technique>
</effect>
