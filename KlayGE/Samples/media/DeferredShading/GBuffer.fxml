<?xml version='1.0'?>

<effect>
	<include name="DeferredShadingUtil.fxml"/>
	<include name="util.fxml"/>
	
	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="inv_mvp"/>

		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="float4" name="diffuse_clr"/>
	<parameter type="float4" name="emit_clr"/>
	<parameter type="float" name="specular_level"/>
	<parameter type="float" name="shininess"/>
	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="texture2D" name="bump_tex"/>
	<parameter type="textureCUBE" name="skybox_tex"/>
	<parameter type="textureCUBE" name="skybox_C_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	
	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void GBufferVS(float4 pos : POSITION,
			float3 normal : NORMAL,
			float3 tangent : TANGENT,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oNormalDepth : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
	oNormalDepth.xyz = mul(normal, (float3x3)model_view);
	oNormalDepth.w = oPos.w * depth_near_far_invfar.z;

	oTexCoord = texcoord;
}

void GBufferDiffBumpPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(normal.xyz + 0.1f * mul(bump_tex.Sample(linear_sampler, texcoord).xyz, (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMtl(normal.xyz, normal.w, 1, shininess);
	
	oClr = StoreDiffuseSpecular(diffuse_tex.Sample(linear_sampler, texcoord).rgb, specular_level);
}

void GBufferDiffPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(normal.xyz);
	oNormalDepth = StoreNormalDepthMtl(normal.xyz, normal.w, 1, shininess);
	
	oClr = StoreDiffuseSpecular(diffuse_tex.Sample(linear_sampler, texcoord).rgb, specular_level);
}

void GBufferBumpPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(normal.xyz + 0.1f * mul(bump_tex.Sample(linear_sampler, texcoord).xyz, (float3x3)model_view));
	oNormalDepth = StoreNormalDepthMtl(normal.xyz, normal.w, 1, shininess);

	oClr = StoreDiffuseSpecular(diffuse_clr.rgb, specular_level);
}

void GBufferNoTexPS(float2 texcoord : TEXCOORD0, float4 normal : TEXCOORD1,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	normal.xyz = normalize(normal.xyz);
	oNormalDepth = StoreNormalDepthMtl(normal.xyz, normal.w, 1, shininess);
	
	oClr = StoreDiffuseSpecular(diffuse_clr.rgb, specular_level);
}

void GBufferSkyBoxVS(float4 pos : POSITION,
			out float3 texcoord0 : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = pos;
	texcoord0 = mul(pos, inv_mvp).xyz;
}

void GBufferSkyBoxPS(float3 texCoord0 : TEXCOORD0,
			out float4 oClr : SV_Target0, out float4 oNormalDepth : SV_Target1)
{
	oClr = decode_hdr_yc(skybox_tex.Sample(skybox_sampler, texCoord0).r,
					skybox_C_tex.Sample(skybox_sampler, texCoord0));
	oNormalDepth = StoreNormalDepthMtl(0, 1, 0, 0);
}
		]]>
	</shader>

	<technique name="GBufferDiffBumpTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferDiffBumpPS()"/>
		</pass>
	</technique>

	<technique name="GBufferDiffTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferDiffPS()"/>
		</pass>
	</technique>

	<technique name="GBufferBumpTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferBumpPS()"/>
		</pass>
	</technique>

	<technique name="GBufferNoTexTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferNoTexPS()"/>
		</pass>
	</technique>

	<technique name="GBufferSkyBoxTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_write_mask" value="0"/>
			<state name="depth_func" value="equal"/>

			<state name="vertex_shader" value="GBufferSkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferSkyBoxPS()"/>
		</pass>
	</technique>
	
	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos : POSITION,
						float3 normal : NORMAL,
						float3 tangent : TANGENT,
						float2 texcoord : TEXCOORD0,
						out float oDist : TEXCOORD0,
						out float4 oPos : SV_Position)
{
	float4 pos_es = mul(pos, model_view);
	oPos = mul(pos, mvp);
	oDist = length(pos_es.xyz);
}

float4 GenShadowMapPS(float dist : TEXCOORD0) : SV_Target
{
	float2 dxdy = float2(ddx(dist), ddy(dist));
	return float4(dist, dist * dist + 0.25f * dot(dxdy, dxdy), 0, 1);
}
		]]>
	</shader>

	<technique name="GenShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			
			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void EmitOnlyVS(float4 pos : POSITION,
			float3 normal : NORMAL,
			float3 tangent : TANGENT,
			float2 texcoord : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
}

float4 EmitOnlyPS() : SV_Target
{
	return emit_clr;
}
		]]>
	</shader>

	<technique name="EmitOnly">
		<pass name="p0">
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>
			
			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>

			<state name="vertex_shader" value="EmitOnlyVS()"/>
			<state name="pixel_shader" value="EmitOnlyPS()"/>
		</pass>
	</technique>
</effect>
