<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="DeferredShadingUtil.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="bilinear_wrap_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<parameter type="texture2D" name="src_tex"/>

	<shader>
		<![CDATA[
float4 SSAO(float2 tc0)
{
	float4 ndc = src_tex.Sample(point_sampler, tc0);
	float depth = GetDepth(ndc);
	
	const float scale = 0.025f; 
	const float3 samples[8] =
	{
		normalize(half3( 1,  1,  1)) * scale * 1,
		normalize(half3(-1, -1, -1)) * scale * 2,
		normalize(half3(-1, -1,  1)) * scale * 3,
		normalize(half3(-1,  1, -1)) * scale * 4,
		normalize(half3(-1,  1,  1)) * scale * 5,
		normalize(half3( 1, -1, -1)) * scale * 6,
		normalize(half3( 1, -1,  1)) * scale * 7,
		normalize(half3( 1,  1, -1)) * scale * 8,
	};

	float3 normal = GetNormal(src_tex.Sample(point_sampler, tc0));

	float3 sample_scale = float3(depth_near_far_invfar.zz / depth, depth_near_far_invfar.z);

	float4 sky_access = 0.0f;
	float4 arr_scene_depth2[2];
	float3 ray;

	for (int i = 0; i < 2; ++ i)
	{
		for (int j = 0; j < 4; ++ j)
		{
			ray = reflect(samples[i * 4 + j].xyz, normal) * sample_scale;
			arr_scene_depth2[0][j] = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) - ray.z;
			ray *= 0.5;
			arr_scene_depth2[1][j] = GetDepth(src_tex.Sample(point_sampler, tc0 + ray.xy)) - ray.z;
		}

		sky_access += (depth < arr_scene_depth2[0]);
		sky_access += (depth < arr_scene_depth2[1]);
	}

	return saturate(dot(sky_access, 1 / 8.0f));
}

float4 SSAOPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	return SSAO(tc0);
}
		]]>
	</shader>

	<technique name="SSAO">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SSAOPS()"/>
		</pass>
	</technique>
</effect>
