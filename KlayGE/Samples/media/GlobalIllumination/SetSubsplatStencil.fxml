<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="gbuffer_tex"/>
	<parameter type="texture2D" name="depth_deriv_tex"/>
	<parameter type="texture2D" name="normal_cone_tex"/>
	<parameter type="float3" name="near_q_far"/>
	<parameter type="float2" name="depth_normal_threshold"/>
	<parameter type="float2" name="cur_lower_level"/>
	<parameter type="int2" name="is_not_first_last_level"/>

	<shader>
		<![CDATA[
void SetSubsplatStencilPS(float2 tc: TEXCOORD0,
		out float4 out_clr : SV_Target,
		out float out_depth : SV_Depth)
{
	if (is_not_first_last_level.x)
	{
		float depth_deriv = depth_deriv_tex.SampleLevel(point_sampler, tc, cur_lower_level.x).r;  
		float4 normal_cone = normal_cone_tex.SampleLevel(point_sampler, tc, cur_lower_level.x);
		normal_cone.xy -= normal_cone.zw;
		float normal_deriv = max(normal_cone.x, normal_cone.y);
		if (any(float2(depth_deriv, normal_deriv) > depth_normal_threshold))
		{
			discard;
		}
	}

	if (is_not_first_last_level.y)
	{
		float depth_deriv = depth_deriv_tex.SampleLevel(point_sampler, tc, cur_lower_level.y).r;
		float4 normal_cone = normal_cone_tex.SampleLevel(point_sampler, tc, cur_lower_level.y);
		normal_cone.xy -= normal_cone.zw;
		float normal_deriv = max(normal_cone.x, normal_cone.y);
		if (all(float2(depth_deriv, normal_deriv) <= depth_normal_threshold))
		{
			discard;
		}
	}

	out_clr = 1;
	out_depth = near_q_far.y - near_q_far.x / (GetDepth(gbuffer_tex.Sample(point_sampler, tc)) * near_q_far.z);
}
		]]>
	</shader>

	<technique name="SetSubsplatStencil">
		<pass name="p0">
			<state name="color_write_mask" value="0"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="always_pass"/>
			<state name="depth_write_mask" value="true"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="127"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_read_mask" value="127"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="127"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_read_mask" value="127"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="SetSubsplatStencilPS()"/>
		</pass>
	</technique>
</effect>
