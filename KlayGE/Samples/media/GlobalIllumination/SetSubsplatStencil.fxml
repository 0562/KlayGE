<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="MultiresPostProcess.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="depth_deriv_tex"/>
	<parameter type="texture2D" name="normal_cone_tex"/>
	<parameter type="float" name="num_levels"/>
	<parameter type="float" name="depth_threshold"/>
	<parameter type="float" name="normal_threshold"/>

	<shader>
		<![CDATA[
float4 SetSubsplatStencilPS(float3 tc: TEXCOORD0) : SV_Target
{
	float2 mip_tc = tc.xy;
	float mip_level = tc.z;
    
	float depth_deriv_0 = depth_deriv_tex.SampleLevel(point_sampler, mip_tc, mip_level).r;
	float depth_deriv_1 = depth_deriv_tex.SampleLevel(point_sampler, mip_tc, mip_level + 1).r;
  
	float4 normal_cone_0 = normal_cone_tex.SampleLevel(point_sampler, mip_tc, mip_level);
	float4 normal_cone_1 = normal_cone_tex.SampleLevel(point_sampler, mip_tc, mip_level + 1);
	float normal_deriv_0 = max(normal_cone_0.x - normal_cone_0.z, normal_cone_0.y - normal_cone_0.w);
	float normal_deriv_1 = max(normal_cone_1.x - normal_cone_1.z, normal_cone_1.y - normal_cone_1.w);
  
	bool at_coarest_level = (mip_level > num_levels - 1.5);
	bool at_finest_level = (mip_level < 0.5);
  
	bool need_refinement_0 = (depth_deriv_0 > depth_threshold) || (normal_deriv_0 > normal_threshold);
	bool need_refinement_1 = (depth_deriv_1 > depth_threshold) || (normal_deriv_1 > normal_threshold);
  
	if (need_refinement_0 && !at_finest_level)
		discard;
    
	if (!at_coarest_level && !need_refinement_1)
		discard;
  
	return float4(1, 1, 1, 1);
}
		]]>
	</shader>

	<technique name="SetSubsplatStencil">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="127"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_read_mask" value="127"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="127"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_read_mask" value="127"/>

			<state name="vertex_shader" value="MultiresPostProcessVS()"/>
			<state name="pixel_shader" value="SetSubsplatStencilPS()"/>
		</pass>
	</technique>
</effect>
