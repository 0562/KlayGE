<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float" name="scaling_factor"/>
	<parameter type="float2" name="inv_width_height"/>
	<parameter type="float3" name="depth_near_far_invfar"/>
	<parameter type="texture2D" name="indirect_lighting_tex"/>
	<parameter type="texture2D" name="g_buffer_tex"/>

	<shader>
		<![CDATA[
void CopyToLightBufferVS(float4 pos: POSITION,
      out float2 oTex : TEXCOORD0,
      out float4 oPos : SV_Position)
{
	oPos = pos;
	oTex = TexCoordFromPos(pos);
	oTex.x = oTex.x / 2;
}

float4 NearestDepthUpsamplingIL(float2 tc)
{
	return indirect_lighting_tex.Sample(linear_sampler, tc);

	float2 l1_inv_width_height = inv_width_height * 2;
	float z00 = GetDepth(g_buffer_tex.SampleLevel(point_sampler, tc, 1));
	float z10 = GetDepth(g_buffer_tex.SampleLevel(point_sampler, tc + float2(l1_inv_width_height.x, 0), 1));
	float z01 = GetDepth(g_buffer_tex.SampleLevel(point_sampler, tc + float2(0, l1_inv_width_height.y), 1));
	float z11 = GetDepth(g_buffer_tex.SampleLevel(point_sampler, tc + l1_inv_width_height, 1));
	float z_full = GetDepth(g_buffer_tex.Sample(point_sampler, tc));
	float threshold = 0.25f * depth_near_far_invfar.z;

	float3 ndus = NearestDepthUpsampling(tc, float4(z00, z10, z01, z11), z_full, l1_inv_width_height, threshold);
	if (ndus.z > 0)
	{
		return indirect_lighting_tex.Sample(linear_sampler, tc);
	}
	else
	{
		return indirect_lighting_tex.Sample(point_sampler, ndus.xy);
	}
}

float4 CopyToLightBufferPS(float2 tc : TEXCOORD0) : SV_Target
{
	float3 color = NearestDepthUpsamplingIL(tc).xyz;
	return float4(color * scaling_factor, 0);
}
    ]]>
	</shader>

	<technique name="CopyToLightBuffer">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="CopyToLightBufferVS()"/>
			<state name="pixel_shader" value="CopyToLightBufferPS()"/>
		</pass>
	</technique>

	<technique name="CopyToLightBufferI">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="false"/>

			<state name="vertex_shader" value="CopyToLightBufferVS()"/>
			<state name="pixel_shader" value="CopyToLightBufferPS()"/>
		</pass>
	</technique>
</effect>
