<?xml version='1.0'?>

<effect>
	<parameter type="float4x4" name="model_view_proj"/>
	<parameter type="float4x4" name="model"/>
	<parameter type="float4x4" name="obj_model_to_light_model"/>

	<shader>
		<![CDATA[
void GenShadowMapVS(float4 Position : POSITION,
						float3 Normal   : NORMAL,
						out float4 oPos : POSITION,
						out float4 oLightWorldPos : TEXCOORD0)
{
    oPos = mul(Position, model_view_proj);
    oLightWorldPos = mul(Position, obj_model_to_light_model);
}

float4 GenShadowMapPS(float4 pos : POSITION, float4 LightWorldPos : TEXCOORD0) : COLOR
{
	LightWorldPos /= LightWorldPos.w;
	float dist = length(LightWorldPos.xyz);
	
	float2 dxdy = float2(ddx(dist), ddy(dist));

	return float4(dist, dist * dist + 0.25f * dot(dxdy, dxdy), 0, 1);
}
		]]>
	</shader>

	<technique name="GenShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>

	<parameter type="float" name="min_variance"/>
	<parameter type="float" name="bleeding_reduce"/>
	<parameter type="float3" name="light_pos"/>
	<parameter type="int" name="flip"/>
	<parameter type="float4x4" name="light_view_proj" array_size="6"/>

	<parameter type="samplerCUBE" name="lamp_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_x_pos_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_x_neg_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_y_pos_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_y_neg_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_z_pos_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>
	<parameter type="sampler2D" name="shadow_map_z_neg_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>

	<shader>
		<![CDATA[
void RenderSceneVS(float4 Position : POSITION,
					float3 Normal   : NORMAL,
					out float4 oPos : POSITION,
					out float3 oDiffuse : COLOR0,
					out float4 oLightWorldPos : TEXCOORD0,
					out float4 oLightProjPos[6] : TEXCOORD1)
{
	float4 world_pos = mul(Position, model);
	float3 world_normal = normalize(mul(Normal, (float3x3)model));

	oPos = mul(Position, model_view_proj);
	oLightWorldPos = mul(Position, obj_model_to_light_model);
	for (int i = 0; i < 6; ++ i)
	{
		oLightProjPos[i] = mul(world_pos, light_view_proj[i]);
	}
	
	world_pos /= world_pos.w;
	oDiffuse = dot(normalize(light_pos - world_pos.xyz), world_normal);
}

float linstep(float min, float max, float v)
{
	return clamp((v - min) / (max - min), 0, 1);
}

float4 RenderScenePS(float4 pos : POSITION, float3 diffuse : COLOR0,
				float4 LightWorldPos : TEXCOORD0,
				float4 LightProjPos[6] : TEXCOORD1) : COLOR 
{
	float3 ori_color = diffuse * texCUBE(lamp_sampler, LightWorldPos).rgb;
	LightWorldPos /= LightWorldPos.w;
	float dist_sq = dot(LightWorldPos.xyz, LightWorldPos.xyz);
	float dist = sqrt(dist_sq);

	for (int i = 0; i < 6; ++ i)
	{
		LightProjPos[i] /= LightProjPos[i].w;
		LightProjPos[i].y *= flip;
		LightProjPos[i].xy = LightProjPos[i].xy / 2 + 0.5f;
	}
	
	float2 moments[6];
	moments[0] = tex2D(shadow_map_x_pos_sampler, LightProjPos[0].xy);
	moments[1] = tex2D(shadow_map_x_neg_sampler, LightProjPos[1].xy);
	moments[2] = tex2D(shadow_map_y_pos_sampler, LightProjPos[2].xy);
	moments[3] = tex2D(shadow_map_y_neg_sampler, LightProjPos[3].xy);
	moments[4] = tex2D(shadow_map_z_pos_sampler, LightProjPos[4].xy);
	moments[5] = tex2D(shadow_map_z_neg_sampler, LightProjPos[5].xy);

	float3 final_color = 0;
	for (int j = 0; j < 6; ++ j)
	{
		if (LightProjPos[j].z > 0)
		{
			float3 color = ori_color / (0.01f + 0.5f * dist * dist);
			
			float p = (dist <= moments[j].x);
			// Variance shadow mapping
			float variance = moments[j].y - moments[j].x * moments[j].x;
			variance = max(variance, min_variance);
			float m_d = moments[j].x - dist;
			float p_max = variance / (variance + m_d * m_d);
			p_max = linstep(bleeding_reduce, 1, p_max);

			color *= max(p, p_max);
			
			final_color += color;
		}
	}

	return float4(final_color, 1.0);
}
		]]>
	</shader>

	<technique name="RenderScene">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="RenderSceneVS()"/>
			<state name="pixel_shader" value="RenderScenePS()"/>
		</pass>
	</technique>
</effect>
