<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="2D.fxml"/>

	<parameter type="float" name="point_radius"/>
	<parameter type="float" name="init_life"/>

	<parameter type="float2" name="size_over_life" array_size="8"/>
	<parameter type="int" name="num_size_over_life"/>

	<parameter type="float2" name="weight_over_life" array_size="8"/>
	<parameter type="int" name="num_weight_over_life"/>

	<parameter type="float2" name="transparency_over_life" array_size="8"/>
	<parameter type="int" name="num_transparency_over_life"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="View"/>
		<parameter type="float4x4" name="Proj"/>

		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="float4" name="particle_color_from"/>
	<parameter type="float4" name="particle_color_to"/>

	<parameter type="texture2D" name="particle_alpha_from_tex"/>
	<parameter type="texture2D" name="particle_alpha_to_tex"/>
	<parameter type="sampler" name="particle_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="texture2D" name="scene_tex"/>
	<parameter type="sampler" name="scene_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float GetSizeOverLife(float p)
{
	float ret = 0;
	p /= init_life;
	for (int i = 0; (i < 7) && (i < num_size_over_life - 1); ++ i)
	{
		if (size_over_life[i + 1].x >= p)
		{
			float s = (p - size_over_life[i].x) / (size_over_life[i + 1].x - size_over_life[i].x);
			ret = 1 - (size_over_life[i].y + (size_over_life[i + 1].y - size_over_life[i].y) * s);
			break;
		}
	}
	return ret;
}

float GetTransparencyOverLife(float p)
{
	float ret = 0;
	p /= init_life;
	for (int i = 0; (i < 7) && (i < num_transparency_over_life - 1); ++ i)
	{
		if (transparency_over_life[i + 1].x >= p)
		{
			float s = (p - transparency_over_life[i].x) / (transparency_over_life[i + 1].x - transparency_over_life[i].x);
			ret = 1 - (transparency_over_life[i].y + (transparency_over_life[i + 1].y - transparency_over_life[i].y) * s);
			break;
		}
	}
	return ret;
}
		]]>
	</shader>

	<shader>
		<![CDATA[
struct PS_IN
{
	float4 pos : SV_Position;
	float4 clr : COLOR0;
	float4 PosSS : TEXCOORD0;
	float4 CenterView : TEXCOORD1;
	float4 view_dir : TEXCOORD2;
	float3 tex : TEXCOORD3;
};

void ParticleVS(float4 pos : TEXCOORD0,
					float spin : TEXCOORD1,
					float2 tex : POSITION,
					out PS_IN vs_out)
{
	float radius = point_radius * GetSizeOverLife(init_life - pos.w) * 2;

	float life_factor = (init_life - pos.w) / init_life;

	vs_out.CenterView = mul(float4(pos.xyz, 1), View);
	float4 view_pos = vs_out.CenterView;
	float2 offset = tex * radius;
	float cz = cos(spin);
	float sz = sin(spin);
	view_pos.xy += float2(offset.x * cz - offset.y * sz, offset.x * sz + offset.y * cz);
	vs_out.pos = mul(view_pos, Proj);
	vs_out.clr.rgb = lerp(particle_color_from, particle_color_to, life_factor).rgb;
	vs_out.clr.a = GetTransparencyOverLife(init_life - pos.w);
	vs_out.PosSS = vs_out.pos;
	vs_out.view_dir.xyz = view_pos.xyz;
	vs_out.view_dir.w = radius;
	vs_out.tex = float3(float2(tex.x, -tex.y) / 2 + 0.5f, life_factor);
}

float4 ParticlePS(PS_IN ps_in) : SV_Target
{
	ps_in.CenterView /= ps_in.CenterView.w;
	ps_in.view_dir.xyz = normalize(ps_in.view_dir.xyz);
	
	float4 clr = ps_in.clr;
	
	float v = dot(ps_in.CenterView.xyz, ps_in.view_dir.xyz);
	float disc = ps_in.view_dir.w * ps_in.view_dir.w - (dot(ps_in.CenterView.xyz, ps_in.CenterView.xyz) - v * v);
	if (disc < 0)
	{
		discard;
	}
	else
	{
		float2 tex_coord = ps_in.PosSS.xy / ps_in.PosSS.w;
		tex_coord.y *= KLAYGE_FLIPPING;
		tex_coord = tex_coord / 2 + 0.5f;
		
		float depth = scene_tex.SampleLevel(scene_sampler, tex_coord, 0).a * depth_near_far_invfar.y;

		clr.a *= lerp(particle_alpha_from_tex.SampleLevel(particle_sampler, ps_in.tex.xy, 0).r,
						particle_alpha_to_tex.SampleLevel(particle_sampler, ps_in.tex.xy, 0).r,
						ps_in.tex.z);
		float intersect_z = (v - sqrt(disc)) * ps_in.view_dir.z;
		clr.a *= saturate((depth - intersect_z) * 5);
#if !KLAYGE_OPENGL && !KLAYGE_OPENGLES
		clip(clr.a - 0.03f);
#endif
	}

	return clr;
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
void ParticleVS2(float4 pos : POSITION,
					float spin : TEXCOORD0,
					out float4 oCenterView_Life : SV_Position,
					out float oRadius : TEXCOORD0,
					out float oSpin : TEXCOORD1)
{
	oCenterView_Life = float4(mul(float4(pos.xyz, 1), View).xyz, pos.w);
	oRadius = point_radius * GetSizeOverLife(init_life - pos.w) * 2;
	oSpin = spin;
}

#if KLAYGE_OPENGL
POINT TRIANGLE_OUT void ParticleGS(AttribArray<float4> in_CenterView_Life : SV_Position, AttribArray<float> in_radius : TEXCOORD0, AttribArray<float> in_spin : TEXCOORD1)
{
#else
[maxvertexcount(4)]
void ParticleGS(point float4 in_CenterView_Life[1] : SV_Position, point float in_radius[1] : TEXCOORD0, point float in_spin[1] : TEXCOORD1,
					inout TriangleStream<PS_IN> out_stream)
{
#endif

	float4 CenterView_Life = in_CenterView_Life[0];
	float radius = in_radius[0];
	float spin = in_spin[0];
	
	PS_IN gs_out;
	
	float life_factor = (init_life - CenterView_Life.w) / init_life;
	gs_out.CenterView = float4(CenterView_Life.xyz, 1);
	float cz = cos(spin);
	float sz = sin(spin);
	gs_out.clr.rgb = lerp(particle_color_from, particle_color_to, life_factor).rgb;
	gs_out.clr.a = GetTransparencyOverLife(init_life - CenterView_Life.w);
	gs_out.view_dir.w = radius;

	for (int i = 0; i < 4; ++ i)
	{
		float2 tex;
		if (0 == i)
		{
			tex = float2(-1, 1);
		}
		if (1 == i)
		{
			tex = float2(1, 1);
		}
		if (2 == i)
		{
			tex = float2(-1, -1);
		}
		if (3 == i)
		{
			tex = float2(1, -1);
		}
		
		float2 offset = tex * radius;
		float4 view_pos = gs_out.CenterView;
		view_pos.xy += float2(offset.x * cz - offset.y * sz, offset.x * sz + offset.y * cz);
		gs_out.pos = mul(view_pos, Proj);
		gs_out.PosSS = gs_out.pos;
		gs_out.view_dir.xyz = view_pos.xyz;
		gs_out.tex = float3(float2(tex.x, -tex.y) / 2 + 0.5f, life_factor);

#if KLAYGE_OPENGL
		emitVertex(gs_out.pos : POSITION, gs_out.clr : COLOR0, gs_out.PosSS : TEXCOORD0,
			gs_out.CenterView : TEXCOORD1, gs_out.view_dir : TEXCOORD2, gs_out.tex : TEXCOORD3);
#else
		out_stream.Append(gs_out);
#endif
	}
}
		]]>
	</shader>

	<technique name="Particle">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>

			<state name="vertex_shader" value="ParticleVS()"/>
			<state name="pixel_shader" value="ParticlePS()"/>
		</pass>
	</technique>

	<technique name="ParticleWithGS" inherit="Particle">
		<pass name="p0">
			<state name="vertex_shader" value="ParticleVS2()"/>
			<state name="geometry_shader" value="ParticleGS()"/>
		</pass>
	</technique>

	<parameter type="float3" name="LightPos" x="0" y="10" z="3"/>
	<parameter type="texture2D" name="grass_tex"/>
	<parameter type="texture2D" name="logo_tex">
		<annotation type="string" name="SasResourceAddress" value="klayge_logo_sm.dds"/>
	</parameter>
	<parameter type="sampler" name="grass_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="8"/>
	</parameter>

	<shader>
		<![CDATA[
void TerrainVS(float4 Position : POSITION,
					out float4 oTex0 : TEXCOORD0,
					out float3 oPosOS : TEXCOORD1,
					out float3 oNormal : TEXCOORD2,
					out float2 oDepth : TEXCOORD3,
					out float4 oPos : SV_Position)
{
	float4 pos_es = mul(Position, View);
	oPos = mul(pos_es, Proj);
	oNormal = float3(0, 1, 0);
	oPosOS = Position.xyz;
	oDepth = pos_es.zw;
	oTex0 = Position.xzxz * float4(1, 1, 0.5, -0.8f);
}

float4 TerrainPS(float4 tex0 : TEXCOORD0,
					float3 pos_os : TEXCOORD1,
					float3 normal : TEXCOORD2,
					float2 depth : TEXCOORD3) : SV_Target 
{
	float4 logo = logo_tex.Sample(grass_sampler, tex0.zw);
	float4 clr = float4(grass_tex.Sample(grass_sampler, tex0.xy).rgb * dot(normalize(LightPos - pos_os), normal),
				depth.x / depth.y * depth_near_far_invfar.z);
	return float4(lerp(clr.rgb, logo.rgb, 0.3f), 1);
}
		]]>
	</shader>

	<technique name="Terrain">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainVS()"/>
			<state name="pixel_shader" value="TerrainPS()"/>
		</pass>
	</technique>
</effect>
