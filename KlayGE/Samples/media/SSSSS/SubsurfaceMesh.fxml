<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="Lighting.fxml"/>
	
	<parameter type="float3" name="pos_center"/>
	<parameter type="float3" name="pos_extent"/>
	<parameter type="float2" name="tc_center"/>
	<parameter type="float2" name="tc_extent"/>

	<parameter type="float4x4" name="mvp"/>
	<parameter type="float4x4" name="model_view"/>
	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float3" name= "light_pos"/>
	<parameter type="float3" name= "light_color"/>
	<parameter type="float3" name= "eye_pos"/>

	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos: POSITION,
				   float4 tangent_quat  : TANGENT,
				   out float4 oPos: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	tangent_quat = tangent_quat * 2 - 1;
	float3 normal = transform_quat(float3(0, 0, 1), tangent_quat);
	pos.xyz = pos.xyz + normal * 0.005f;
	oPos = mul(pos, mvp);
}				   

float4 GenShadowMapPS() : SV_Target
{
	return 0;
}

void ShadingVS(float4 pos : POSITION,
					float2 texcoord : TEXCOORD0,
					float4 tangent_quat : TANGENT,
					out float4 oTexCoord_2xy : TEXCOORD0,
					out float4 oTsToView0_2z : TEXCOORD1,
					out float4 oTsToView1_Depth : TEXCOORD2,
					out float3 oLightVec : TEXCOORD3,
					out float3 oViewVec : TEXCOORD4,
					out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTexCoord_2xy.xy = texcoord;

	tangent_quat = tangent_quat * 2 - 1;

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), tangent_quat);
	oTsToView0_2z.xyz = obj_to_ts[0];
	oTsToView1_Depth.xyz = obj_to_ts[1];
	oTexCoord_2xy.zw = obj_to_ts[2].xy;
	oTsToView0_2z.w = obj_to_ts[2].z;

	oTsToView1_Depth.w = oPos.w;
	
	oLightVec = light_pos - pos.xyz;
	oViewVec.xyz = eye_pos - pos.xyz;
}

void ShadingPS(float4 texcoord_2xy : TEXCOORD0,
					float4 ts_to_view0_2z : TEXCOORD1,
					float3 ts_to_view1 : TEXCOORD2,
					float3 light_vec : TEXCOORD3,
					float3 view_vec : TEXCOORD4,
					out float4 oNormal : SV_Target0,
					out float4 oAlbedo : SV_Target1,
					out float4 oShading : SV_Target2)
{
	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	float3x3 ts_to_obj;
	ts_to_obj[0] = normalize(ts_to_view0_2z.xyz);
	ts_to_obj[1] = normalize(ts_to_view1);
	ts_to_obj[2] = normal;
	normal = normalize(mul(decompress_normal(normal_tex.Sample(linear_sampler, texcoord_2xy.xy)), ts_to_obj));

	float3 L = normalize(light_vec);
	float3 V = normalize(view_vec);
	float3 H = normalize(V + L);
	
	oNormal = float4(mul(normal, (float3x3)model_view), 1);	
	oAlbedo = diffuse_tex.Sample(linear_sampler, texcoord_2xy.xy);
	
	float3 ambient = 0.1f * (0.5f * normal.y + 0.5f) * oAlbedo.xyz;
	// Diffuse and specular are suppose to be separated. But combine them are faster and also good quality.
	oShading = float4(ambient + light_color * calc_brdf(oAlbedo.xyz, 0.028f, 32, L, H, normal), 1);
}
		]]>
	</shader>

	<technique name="GenShadowMap">
		<pass name="p0">
			<state name="color_write_mask" value="0"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>

	<technique name="Shading">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			
			<state name="vertex_shader" value="ShadingVS()"/>
			<state name="pixel_shader" value="ShadingPS()"/>
		</pass>
	</technique>
</effect>
