<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="JudaTexture.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="float3" name="light_pos"/>
	</cbuffer>

	<parameter type="float" name="parallax_scale"/>
	<parameter type="float" name="parallax_bias"/>

	<parameter type="int4" name="diffuse_tex_bb"/>
	<parameter type="int4" name="normal_tex_bb"/>
	<parameter type="int4" name="height_tex_bb"/>

	<shader>
		<![CDATA[
void ParallaxVS(float4 pos				: POSITION,
					float2 texcoord0	: TEXCOORD0,
					float3 N			: NORMAL,
					float3 T			: TANGENT,
					out float4 oL			: TEXCOORD0,	// in tangent space
					out float4 oV			: TEXCOORD1,	// in tangent space
					out float3 oH			: TEXCOORD2,	// in tangent space
					out float4 oPos			: SV_Position)
{
	oPos = mul(pos, mvp);
	
	N = N * 2 - 1;
	T = T * 2 - 1;

	float3x3 objToTangentSpace;
	objToTangentSpace[0] = T;
	objToTangentSpace[1] = cross(N, T);
	objToTangentSpace[2] = N;

	float3 lightVec = light_pos - pos.xyz;
	float3 viewVec = eye_pos - pos.xyz;
	float3 halfVec = normalize(lightVec) + normalize(viewVec);

	oL.xyz = mul(objToTangentSpace, lightVec);
	oV.xyz = mul(objToTangentSpace, viewVec);
	oH = mul(objToTangentSpace, halfVec);
	
	oL.w = texcoord0.x;
	oV.w = texcoord0.y;
}

float4 ParallaxPS(float4 L		: TEXCOORD0,
					float4 V		: TEXCOORD1,
					float3 H		: TEXCOORD2) : SV_Target
{
	float2 texCoord0 = float2(L.w, V.w);
	
	float3 view = normalize(V.xyz);

	float height = judatex2d_wrap(height_tex_bb, texCoord0).r * parallax_scale - parallax_bias;
	float2 texUV = texCoord0 + (view.xy * height);

	float3 diffuse = judatex2d_wrap(diffuse_tex_bb, texUV).rgb;

	float3 bump_normal = normalize(judatex2d_wrap(normal_tex_bb, texUV).rgb * 2 - 1);
	float3 light_vec = normalize(L.xyz);
	float3 halfway = normalize(H);

	return float4(calc_brdf(diffuse, 1, 32, 0.04f, light_vec, halfway, bump_normal), 1);
}
		]]>
	</shader>
	
	<technique name="Parallax">
		<pass name="p0">
			<state name="vertex_shader" value="ParallaxVS()"/>
			<state name="pixel_shader" value="ParallaxPS()"/>
		</pass>
	</technique>
</effect>
