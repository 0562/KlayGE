<?xml version='1.0'?>

<effect>
	<include name="../../../RenderFX/Lighting.fxml"/>
	<include name="../../../RenderFX/PostProcess.fxml"/>

	<parameter type="float3" name="light_pos"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
		<parameter type="float" name="depth_min"/>
		<parameter type="float" name="inv_depth_range"/>

		<parameter type="float2" name="offset"/>
		<parameter type="int" name="flip"/>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="last_depth_tex"/>

	<shader>
		<![CDATA[
void DepthPeelingVS(float4 pos				: POSITION,
					float3 normal			: NORMAL,
					out float4 oPos			: SV_Position,
					out float4 oPosSS		: TEXCOORD0,
					out float4 oClr			: COLOR0)
{
	oPos = mul(pos, mvp);
	oClr = float4(max(point_lighting(light_pos, pos.xyz, normal), 0.0f).xxx, 0.5f);
	oPosSS = oPos;
}

void DepthPeeling1stPS(float4 pos : SV_Position,
					float4 pos_ss : TEXCOORD0,
					float4 clr : COLOR0,
					out float4 oClr : SV_Target0,
					out float4 oDepth : SV_Target1)
{
	oClr = clr;
	oDepth = (pos_ss.w - depth_min) * inv_depth_range;
}

void DepthPeelingNthPS(float4 pos : SV_Position,
					float4 pos_ss : TEXCOORD0,
					float4 clr : COLOR0,
					out float4 oClr : SV_Target0,
					out float4 oDepth : SV_Target1)
{
	oDepth = (pos_ss.w - depth_min) * inv_depth_range;
  
	float2 tex_coord = pos_ss.xy / pos_ss.w - offset;
	tex_coord.y *= flip;
	tex_coord = tex_coord / 2 + 0.5f;

	float last_depth = last_depth_tex.Sample(point_sampler, tex_coord).r;
	if (oDepth.r <= last_depth)
	{
		oClr = 0;
		clip(-1);
	}
	else
	{
		oClr = clr;
	}
}
		]]>
	</shader>

	<technique name="DepthPeeling1st">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeeling1stPS()"/>
		</pass>
	</technique>

	<technique name="DepthPeelingNth">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeelingNthPS()"/>
		</pass>
	</technique>

	<parameter type="texture2D" name="src_tex"/>

	<shader>
		<![CDATA[
float4 BlendPS(float4 pos : SV_Position, float2 tex : TEXCOORD0) : SV_Target
{
	return src_tex.Sample(point_sampler, tex);
}
		]]>
	</shader>

	<technique name="Blend">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlendPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
float4 NoDepthPeelingPS(float4 pos : SV_Position, float4 clr : COLOR0) : SV_Target
{
	return clr;
}
		]]>
	</shader>

	<technique name="NoDepthPeeling">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="NoDepthPeelingPS()"/>
		</pass>
	</technique>
</effect>
