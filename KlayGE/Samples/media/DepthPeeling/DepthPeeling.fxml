<?xml version='1.0'?>

<effect>
	<include name="../../../RenderFX/Lighting.fxml"/>
	<include name="../../../RenderFX/PostProcess.fxml"/>
	
	<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
	<parameter type="float3" name="light_pos"/>

	<parameter type="float2" name="offset"/>
	<parameter type="sampler2D" name="last_depth_sampler">
		<state name="filtering" value="point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void DepthPeelingVS(float4 pos				: POSITION,
					float3 normal			: NORMAL,
					out float4 oPos			: POSITION,
					out float4 oPosSS		: TEXCOORD0,
					out float4 oClr			: COLOR0)
{
	oPos = mul(pos, mvp);
	oClr = float4(point_lighting(light_pos, pos.xyz, normal).xxx, 0.5f);
	oPosSS = oPos;
}

void DepthPeeling1stPS(float4 pos_ss : TEXCOORD0,
					float4 clr : COLOR0,
					out float4 oClr : COLOR0,
					out float4 oDepth : COLOR1)
{
	oClr = clr;
	oDepth = pos_ss.z / pos_ss.w;
}

void DepthPeelingNthPS(float4 pos_ss : TEXCOORD0,
					float4 clr : COLOR0,
					out float4 oClr : COLOR0,
					out float4 oDepth : COLOR1)
{
	pos_ss /= pos_ss.w;
	   
	float2 tex_coord = pos_ss.xy;
	tex_coord.y = -tex_coord.y;
	tex_coord += float2(-offset.x, offset.y);
	tex_coord = tex_coord / 2 + 0.5f;

	float last_depth = tex2D(last_depth_sampler, tex_coord).r;
	if (pos_ss.z <= last_depth)
	{
		clip(-1);
	}
	else
	{
		oClr = clr;
		oDepth = pos_ss.z;
	}
}
		]]>
	</shader>
	
	<technique name="DepthPeeling1st">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeeling1stPS()"/>
		</pass>
	</technique>

	<technique name="DepthPeelingNth">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeelingNthPS()"/>
		</pass>
	</technique>

	<parameter type="sampler2D" name="src_sampler">
		<state name="filtering" value="point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float4 BlendPS(float2 tex : TEXCOORD0) : COLOR
{
	return tex2D(src_sampler, tex);
}
		]]>
	</shader>

	<technique name="Blend">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>
			
			<state name="depth_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlendPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void NoDepthPeelingPS(float4 clr : COLOR0,
					out float4 oClr : COLOR0)
{
	oClr = clr;
}
		]]>
	</shader>

	<technique name="NoDepthPeeling">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_mask" value="false"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="NoDepthPeelingPS()"/>
		</pass>
	</technique>
</effect>
