<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>

	<parameter type="float3" name="light_pos"/>

	<cbuffer name="per_frame">
		<parameter type="float3" name="pos_center"/>
		<parameter type="float3" name="pos_extent"/>
		
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
		<parameter type="float2" name="near_q"/>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="last_depth_tex"/>

	<shader>
		<![CDATA[
void DepthPeelingVS(float4 pos				: POSITION,
					float4 tangent_quat		: TANGENT,
					out float4 oClr			: COLOR0,
					out float4 oPosSS		: TEXCOORD0,
					out float4 oPos			: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	oPos = mul(pos, mvp);
	oClr = float4(max(point_lighting(light_pos, pos.xyz, transform_quat(float3(0, 0, 1), tangent_quat * 2 - 1)), 0.0f) * float3(1, 1, 0), 0.3f);
	oPosSS = oPos;
}

float4 DepthPeeling1stPS(float4 clr : COLOR0) : SV_Target
{
	return clr;
}

float4 DepthPeelingNthPS(float4 clr : COLOR0, float4 pos_ss : TEXCOORD0) : SV_Target
{
	float2 tex_coord = pos_ss.xy / pos_ss.w;
	tex_coord.y *= KLAYGE_FLIPPING;
	tex_coord = tex_coord / 2 + 0.5f;

	float last_depth = non_linear_depth_to_linear(last_depth_tex.Sample(point_sampler, tex_coord).r, near_q.x, near_q.y);
	clip(pos_ss.w - (last_depth + 1e-5f));

	return clr;
}
		]]>
	</shader>

	<technique name="DepthPeeling1st">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeeling1stPS()"/>
		</pass>
	</technique>

	<technique name="DepthPeelingNth" inherit="DepthPeeling1st">
		<pass name="p0">
			<state name="pixel_shader" value="DepthPeelingNthPS()"/>
		</pass>
	</technique>

	<parameter type="texture2D" name="src_tex"/>

	<shader>
		<![CDATA[
float4 BlendPS(float2 tex : TEXCOORD0) : SV_Target
{
	return src_tex.Sample(point_sampler, tex);
}
		]]>
	</shader>

	<technique name="Blend">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_write_mask" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlendPS()"/>
		</pass>
	</technique>

	<technique name="NoDepthPeeling">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_write_mask" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="DepthPeelingVS()"/>
			<state name="pixel_shader" value="DepthPeeling1stPS()"/>
		</pass>
	</technique>
</effect>
