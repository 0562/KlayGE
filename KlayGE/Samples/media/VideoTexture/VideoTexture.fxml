<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>

	<parameter type="float4x4" name="mvp"/>
	<parameter type="float4x4" name="mv"/>
	<parameter type="float3" name="eye_pos"/>
	<parameter type="float3" name="light_pos" x="0.5" y="1" z="-2"/>

	<parameter type="texture2D" name="video_tex"/>
	<parameter type="sampler" name="video_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
void ObjectVS(float4 Position : POSITION,
					float3 Normal : NORMAL,
					float2 Tex0 : TEXCOORD0,
					out float2 oTex0 : TEXCOORD0,
					out float3 oNormal : TEXCOORD1,
					out float3 oLightVec : TEXCOORD2,
					out float3 oHalfVec : TEXCOORD3,
					out float4 oPos : SV_Position)
{
	oPos = mul(Position, mvp);
	oNormal = mul(Normal, (float3x3)mv);
	oTex0 = Tex0;

	oLightVec = light_pos - Position.xyz;
	float3 view_vec = eye_pos - Position.xyz;
	oHalfVec = normalize(oLightVec) + normalize(view_vec);
}

float4 ObjectPS(float2 Tex0 : TEXCOORD0, float3 normal : TEXCOORD1, float3 light_vec : TEXCOORD2, float3 half_vec : TEXCOORD3) : SV_Target 
{
	light_vec = normalize(light_vec);
	half_vec = normalize(half_vec);

	float3 diffuse = video_tex.Sample(video_sampler, Tex0).rgb;
	return float4(0.2f * diffuse + 0.8f * calc_brdf(diffuse, 0.1f, 32, light_vec, half_vec, normal, 1), 1);
}
		]]>
	</shader>

	<technique name="Object">
		<pass name="p0">
			<state name="vertex_shader" value="ObjectVS()"/>
			<state name="pixel_shader" value="ObjectPS()"/>
		</pass>
	</technique>
</effect>
