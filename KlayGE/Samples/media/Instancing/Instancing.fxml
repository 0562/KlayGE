<?xml version='1.0'?>

<effect>
	<include name="../../../RenderFX/Lighting.fxml"/>
	
	<parameter type="float4x4" name="ViewProj" semantic="VIEWPROJECTION"/>
	<parameter type="float3" name="light_in_world"/>

	<shader>
		<![CDATA[
void InstanceVS(float4 pos			: POSITION,
					float3 normal		: NORMAL,

					float4 row0			: TEXCOORD1,
					float4 row1			: TEXCOORD2,
					float4 row2			: TEXCOORD3,
					float4 clr			: COLOR0,

					out float4 oClr		: COLOR,
					out float4 oPos		: SV_Position)
{
	float4x4 model = { row0, row1, row2, float4(0, 0, 0, 1) };
	model = transpose(model);

	float4 pos_ws = mul(pos, model);
	oPos = mul(pos_ws, ViewProj);
	
	normal = mul(normal, (float3x3)model);
	oClr = float4(clr.rgb * point_lighting(light_in_world, pos_ws, normal), clr.a);
}

float4 PS(float4 clr : COLOR) : SV_Target
{
	return clr;
}
		]]>
	</shader>
	
	<technique name="Instance">
		<pass name="p0">
			<state name="vertex_shader" value="InstanceVS()"/>
			<state name="pixel_shader" value="PS()"/>
		</pass>
	</technique>

	<parameter type="float4x4" name="modelmat" semantic="WORLD"/>
	<parameter type="float4" name="color"/>

	<shader>
		<![CDATA[
void NormalMeshVS(float4 pos			: POSITION,
					float3 normal		: NORMAL,

					out float4 oClr		: COLOR,
					out float4 oPos		: SV_Position)
{
	float4 pos_ws = mul(pos, modelmat);
	oPos = mul(pos_ws, ViewProj);
	
	normal = mul(normal, (float3x3)modelmat);
	oClr = float4(color.rgb * point_lighting(light_in_world, pos_ws, normal), color.a);
}
		]]>
	</shader>

	<technique name="NormalMesh">
		<pass name="p0">
			<state name="vertex_shader" value="NormalMeshVS()"/>
			<state name="pixel_shader" value="PS()"/>
		</pass>
	</technique>
</effect>
