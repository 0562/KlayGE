<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="PostProcess.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="view"/>
		<parameter type="float4x4" name="view_proj"/>
		<parameter type="float3" name="light_in_world"/>
		<parameter type="float" name="depth_min"/>
		<parameter type="float" name="inv_depth_range"/>
	</cbuffer>

	<shader>
		<![CDATA[
void ColorDepthVS(float4 pos			: POSITION,
					float3 normal		: NORMAL,

					float4 row0			: TEXCOORD1,
					float4 row1			: TEXCOORD2,
					float4 row2			: TEXCOORD3,
					float3 clr			: COLOR0,

					out float3 oClr		: COLOR,
					out float2 oDepth : TEXCOORD0,
					out float4 oPos		: SV_Position)
{
	float4x4 model = { row0, row1, row2, float4(0, 0, 0, 1) };
	model = transpose(model);

	float4 pos_ws = mul(pos, model);
	oPos = mul(pos_ws, view_proj);
	oDepth = mul(pos_ws, view).zw;

	oClr = saturate(clr.rgb * point_lighting(light_in_world, pos_ws.xyz, mul(normal, (float3x3)model))) - 0.5f;
}

float4 ColorDepthPS(float3 clr : COLOR,
				float2 depth : TEXCOORD0) : SV_Target
{
	return float4(clr, (depth.x / depth.y - depth_min) * inv_depth_range);
}
		]]>
	</shader>

	<technique name="ColorDepth">
		<pass name="p0">
			<state name="vertex_shader" value="ColorDepthVS()"/>
			<state name="pixel_shader" value="ColorDepthPS()"/>
		</pass>
	</technique>


	<cbuffer name="per_frame2">
		<parameter type="float" name="focus_plane"/>
		<parameter type="float" name="inv_focus_range"/>
	</cbuffer>
	<parameter type="float4" name="sat_size"/>
	<parameter type="bool" name="show_blur_factor"/>

	<parameter type="texture2D" name="src_tex"/>
	<parameter type="texture2D" name="sat_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float4 DepthOfFieldPS(float2 tex_coord0 : TEXCOORD0) : SV_Target
{
	float4 clr;
	float blur_factor = saturate(abs(src_tex.Sample(point_sampler, tex_coord0).a - focus_plane) * inv_focus_range);
	if (show_blur_factor)
	{
		clr = blur_factor;
	}
	else
	{
		int2 rect = clamp(blur_factor * 0.01f * sat_size.xy + 0.5f, 1, 8);
		float4 corner = (floor(tex_coord0 * sat_size.xy).xyxy + float4(rect - 1, -rect) + 0.5f) * sat_size.zwzw;
		float2 left_top = max(0.5f * sat_size.zw, corner.zw);
		float2 right_bottom = min(1 - 0.5f * sat_size.zw, corner.xy);
		float2 width_height = (right_bottom - left_top) * sat_size.xy;
		clr = (sat_tex.Sample(point_sampler, corner.xy) - sat_tex.Sample(point_sampler, corner.zy)
				- sat_tex.Sample(point_sampler, corner.xw) + sat_tex.Sample(point_sampler, corner.zw))
							/ (width_height.x * width_height.y) + 0.5f;
	}
	
	return clr;
}
		]]>
	</shader>
	<technique name="DepthOfField">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="DepthOfFieldPS()"/>
		</pass>
	</technique>

	<parameter type="float4" name="clear_clr"/>
	<shader>
		<![CDATA[
float4 ClearFloatPS(float2 tex_coord0 : TEXCOORD0) : SV_Target
{
	return clear_clr;
}
		]]>
	</shader>
	<technique name="ClearFloat">
		<pass name="p0">
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="ClearFloatPS()"/>
		</pass>
	</technique>
</effect>
