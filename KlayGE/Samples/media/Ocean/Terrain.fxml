<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Noise.fxml"/>
	<include name="InfTerrain.fxml"/>

	<parameter type="float3" name="sun_dir"/>
	<parameter type="float4" name="fog_color" x="0.807843" y="0.858824" z="0.839216" w="1"/>

	<parameter type="texture2D" name="ground_tex_detail">
		<annotation type="string" name="SasResourceAddress" value="RealSand38BoH.dds"/>
	</parameter>
	<parameter type="texture2D" name="ground_tex_base">
		<annotation type="string" name="SasResourceAddress" value="RealSand40BoH.dds"/>
	</parameter>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
void TerrainVS(float2 pos : POSITION,
					out float3 normal_os_fog : TEXCOORD0,
					out float2 tex_coord : TEXCOORD1,
					out float2 oPosOS_Y_PosSS_W : TEXCOORD2,
					out float4 oPos : SV_Position)
{
	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;

	float4 pos_os = GetInfTerrainPosOS(pos, 0);

	float fog_scale = saturate(length(pos_os.xz - eye_pos.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;

	pos_os.y = fBm(pos_os.xz / 128, 4, lacunarity, gain);
	
	float d = 1.0f;
	float fx = fBm((pos_os.xz + float2(d, 0)) / 128, 4, lacunarity, gain);
	float fy = fBm((pos_os.xz + float2(0, d)) / 128, 4, lacunarity, gain);
	normal_os_fog.xy = (float2(fx, fy) - pos_os.y) * stretch * height_scale;
	pos_os.y *= stretch * height_scale;
	pos_os.y += base_level;

	oPos = mul(pos_os, mvp);
	tex_coord = pos_os.xz / 8;
	normal_os_fog.z = fog_scale;

	oPosOS_Y_PosSS_W = float2(pos_os.y, oPos.w);
}

float4 TerrainPS(float3 normal_os_fog : TEXCOORD0, float2 tex_coord : TEXCOORD1, float2 pos_os_y_pos_ss_w : TEXCOORD2) : SV_Target0
{
	float4 color = (directional_lighting(sun_dir, normalize(float3(normal_os_fog.x, 1, normal_os_fog.y))) + 0.1f)
		* (ground_tex_detail.Sample(linear_sampler, tex_coord) + ground_tex_base.Sample(linear_sampler, tex_coord / 16)) / 2;
	return float4(lerp(saturate(color), fog_color, normal_os_fog.z).rgb, pos_os_y_pos_ss_w.y);
}

float4 TerrainReflectionPS(float3 normal_os_fog : TEXCOORD0, float2 tex_coord : TEXCOORD1, float2 pos_os_y_pos_ss_w : TEXCOORD2) : SV_Target0
{
	clip(pos_os_y_pos_ss_w.x);

	return TerrainPS(normal_os_fog, tex_coord, pos_os_y_pos_ss_w);
}
		]]>
	</shader>
	
	<technique name="Terrain">
		<pass name="p0">
			<state name="polygon_mode" value="fill"/>
			
			<state name="vertex_shader" value="TerrainVS()"/>
			<state name="pixel_shader" value="TerrainPS()"/>
		</pass>
	</technique>

	<technique name="TerrainReflection">
		<pass name="p0">
			<state name="polygon_mode" value="fill"/>

			<state name="vertex_shader" value="TerrainVS()"/>
			<state name="pixel_shader" value="TerrainReflectionPS()"/>
		</pass>
	</technique>
</effect>
