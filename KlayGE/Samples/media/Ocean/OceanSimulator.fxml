<?xml version='1.0'?>

<effect>
	<macro name="PI" value="3.1415926536"/>
	<macro name="BLOCK_SIZE_X" value="16"/>
	<macro name="BLOCK_SIZE_Y" value="16"/>
	
	<parameter type="uint" name="actual_dim"/>
	<parameter type="uint" name="in_width"/>
	<parameter type="uint" name="out_width"/>
	<parameter type="uint" name="out_height"/>
	<parameter type="uint" name="dx_addr_offset"/>
	<parameter type="uint" name="dy_addr_offset"/>

	<cbuffer name="per_frame">
		<parameter type="float" name="time"/>
	</cbuffer>

	<parameter type="structured_buffer" elem_type="float2" name="input_h0"/>
	<parameter type="structured_buffer" elem_type="float" name="input_omega"/>
	<parameter type="rw_structured_buffer" elem_type="float2" name="output_ht"/>

	<shader type="compute_shader" version="4">
		<![CDATA[
// Pre-FFT data preparation:

// Notice: In CS5.0, we can output up to 8 RWBuffers but in CS4.x only one output buffer is allowed,
// that way we have to allocate one big buffer and manage the offsets manually. The restriction is
// not caused by NVIDIA GPUs and does not present on NVIDIA GPUs when using other computing APIs like
// CUDA and OpenCL.

// H(0) -> H(t)
[numthreads(BLOCK_SIZE_X, BLOCK_SIZE_Y, 1)]
void UpdateSpectrumCS(uint3 DTid : SV_DispatchThreadID)
{
	int in_index = DTid.y * in_width + DTid.x;
	int in_mindex = (actual_dim - DTid.y) * in_width + (actual_dim - DTid.x);
	int out_index = DTid.y * out_width + DTid.x;

	// H(0) -> H(t)
	float2 h0_k  = input_h0[in_index];
	float2 h0_mk = input_h0[in_mindex];
	float sin_v, cos_v;
	sincos(input_omega[in_index] * time, sin_v, cos_v);

	float2 h0_k_add_mk = h0_k + h0_mk;
	float2 h0_k_sub_mk = h0_k - h0_mk;

	float2 ht;
	ht.x = h0_k_add_mk.x * cos_v - h0_k_add_mk.y * sin_v;
	ht.y = h0_k_sub_mk.x * sin_v + h0_k_sub_mk.y * cos_v;

	// H(t) -> Dx(t), Dy(t)
	float2 kxy = DTid.xy - actual_dim * 0.5f;
	float sqr_k = dot(kxy, kxy);
	float rsqr_k = 0;
	if (sqr_k > 1e-12f)
	{
		rsqr_k = 1 / sqrt(sqr_k);
	}
	//float rsqr_k = 1 / sqrt(dot(kxy, kxy));
	kxy *= rsqr_k;
	float4 dt_xy = float2(ht.y, -ht.x).xyxy * float4(kxy.xx, kxy.yy);

    if ((DTid.x < out_width) && (DTid.y < out_height))
	{
        output_ht[out_index] = ht;
		output_ht[out_index + dx_addr_offset] = dt_xy.xy;
		output_ht[out_index + dy_addr_offset] = dt_xy.zw;
	}
}
		]]>
	</shader>

	<technique name="UpdateSpectrum">
		<pass name="p0">
			<state name="compute_shader" value="UpdateSpectrumCS()"/>
		</pass>
	</technique>

	
	<cbuffer name="per_frame2">
		<parameter type="float" name="choppy_scale"/>
		<parameter type="float" name="grid_len"/>
	</cbuffer>
	
	<parameter type="texture2D" name="displacement_tex"/>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<parameter type="structured_buffer" elem_type="float2" name="input_dxyz"/>

	<shader>
		<![CDATA[
void QuadVS(float3 vPos : POSITION,
		out float2 TexCoord : TEXCOORD0,
		out float4 Position : SV_Position)
{
	Position = float4(vPos, 1);
	TexCoord.x = 0.5f + vPos.x * 0.5f;
	TexCoord.y = 0.5f - vPos.y * 0.5f;
}

// Post-FFT data wrap up: Dx, Dy, Dz -> Displacement
float4 UpdateDisplacementPS(float2 TexCoord : TEXCOORD0) : SV_Target
{
	uint index_x = (uint)(TexCoord.x * out_width);
	uint index_y = (uint)(TexCoord.y * out_height);
	uint addr = index_y * out_width + index_x;

	// cos(pi * (m1 + m2))
	int sign_correction = ((index_x + index_y) & 1) ? -1 : 1;

	float3 dxyz;
	dxyz.x = input_dxyz[addr + dx_addr_offset].x;
	dxyz.y = input_dxyz[addr + dy_addr_offset].x;
	dxyz.z = input_dxyz[addr].x;
	dxyz.xy *= choppy_scale;
	dxyz *= sign_correction;

	return float4(dxyz, 1);
}

// Displacement -> Normal, Folding
float4 GenGradientFoldingPS(float2 tc : TEXCOORD0) : SV_Target
{
	// Sample neighbour texels
	float2 one_texel = float2(1.0f / out_width, 1.0f / out_height);

	float2 tc_left  = float2(tc.x - one_texel.x, tc.y);
	float2 tc_right = float2(tc.x + one_texel.x, tc.y);
	float2 tc_back  = float2(tc.x, tc.y - one_texel.y);
	float2 tc_front = float2(tc.x, tc.y + one_texel.y);

	float3 displace_left  = displacement_tex.Sample(linear_sampler, tc_left).xyz;
	float3 displace_right = displacement_tex.Sample(linear_sampler, tc_right).xyz;
	float3 displace_back  = displacement_tex.Sample(linear_sampler, tc_back).xyz;
	float3 displace_front = displacement_tex.Sample(linear_sampler, tc_front).xyz;
	
	// Do not store the actual normal value. Using gradient instead, which preserves two differential values.
	float2 gradient = float2(displace_left.z - displace_right.z, displace_back.z - displace_front.z);

	// Calculate Jacobian corelation from the partial differential of height field
	float2 Dx = (displace_right.xy - displace_left.xy) * choppy_scale * grid_len;
	float2 Dy = (displace_front.xy - displace_back.xy) * choppy_scale * grid_len;
	float J = (1.0f + Dx.x) * (1.0f + Dy.y) - Dx.y * Dy.x;

	// Practical subsurface scale calculation: max[0, (1 - J) + Amplitude * (2 * Coverage - 1)].
	float fold = max(1.0f - J, 0);

	// Output
	return float4(gradient * 0.5f + 0.5f, 0, fold);
}
		]]>
	</shader>
	
	<technique name="UpdateDisplacement">
		<pass name="p0">
			<state name="vertex_shader" value="QuadVS()"/>
			<state name="pixel_shader" value="UpdateDisplacementPS()"/>
		</pass>
	</technique>

	<technique name="GenGradientFolding">
		<pass name="p0">
			<state name="vertex_shader" value="QuadVS()"/>
			<state name="pixel_shader" value="GenGradientFoldingPS()"/>
		</pass>
	</technique>
</effect>
