<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>

	<parameter type="float4" name="actual_dim"/>
	<parameter type="float" name="inout_scale"/>

	<cbuffer name="per_frame">
		<parameter type="float" name="time"/>
	</cbuffer>

	<parameter type="texture2D" name="h0_tex"/>
	<parameter type="texture2D" name="omega_tex"/>
	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
// Pre-FFT data preparation:

// H(0) -> H(t)
void UpdateSpectrumPS(float2 tc : TEXCOORD0,
			out float4 oReal : SV_Target0,
			out float4 oImag : SV_Target1)
{
	float2 tc_out = tc * inout_scale;
	
	// H(0) -> H(t)
	float2 h0_k  = h0_tex.Sample(point_sampler, tc_out).xy;
	float2 h0_mk = h0_tex.Sample(point_sampler, 1 - tc_out).xy;
	float sin_v, cos_v;
	sincos(omega_tex.Sample(point_sampler, tc_out).x * time, sin_v, cos_v);

	float2 h0_k_add_mk = h0_k + h0_mk;
	float2 h0_k_sub_mk = h0_k - h0_mk;

	float2 ht;
	ht.x = h0_k_add_mk.x * cos_v - h0_k_add_mk.y * sin_v;
	ht.y = h0_k_sub_mk.x * sin_v + h0_k_sub_mk.y * cos_v;

	// H(t) -> Dx(t), Dy(t)
	// actual_dim.y is actual_dim.x * 0.5f
	float2 kxy = floor(tc * actual_dim.x) - actual_dim.y;
	float sqr_k = dot(kxy, kxy);
	float rsqr_k = 0;
	if (sqr_k > 1e-6f)
	{
		rsqr_k = 1 / sqrt(sqr_k);
	}
	kxy *= rsqr_k;
	float4 dt_xy = float2(ht.y, -ht.x).xyxy * float4(kxy.xx, kxy.yy);

	oReal = float4(ht.x, dt_xy.x, dt_xy.z, 1);
	oImag = float4(ht.y, dt_xy.y, dt_xy.w, 1);
}
		]]>
	</shader>

	<technique name="UpdateSpectrum">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			
			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="UpdateSpectrumPS()"/>
		</pass>
	</technique>

	
	<cbuffer name="per_frame2">
		<parameter type="float" name="choppy_scale"/>
		<parameter type="float" name="grid_len"/>
	</cbuffer>
	
	<parameter type="texture2D" name="displacement_tex"/>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<parameter type="texture2D" name="dxyz_tex"/>

	<shader>
		<![CDATA[
// Post-FFT data wrap up: Dx, Dy, Dz -> Displacement
float4 UpdateDisplacementPS(float2 tc : TEXCOORD0) : SV_Target
{
	int2 index_xy = (int2)(tc * actual_dim.x);

	// cos(pi * (m1 + m2))
	int sign_correction = ((index_xy.x + index_xy.y) & 1) ? -1 : 1;

	// actual_dim.w is dx_addr_offset
	float3 dxyz = dxyz_tex.Sample(linear_sampler, 1 - tc).yzx * actual_dim.w;
	dxyz.xy *= choppy_scale;
	dxyz *= sign_correction;

	return float4(dxyz, 1);
}

// Displacement -> Normal, Folding
float4 GenGradientFoldingPS(float2 tc : TEXCOORD0) : SV_Target
{
	// Sample neighbour texels
	// actual_dim.z is 1.0f / actual_dim.x
	float2 one_texel = actual_dim.z;

	float2 tc_left  = float2(tc.x - one_texel.x, tc.y);
	float2 tc_right = float2(tc.x + one_texel.x, tc.y);
	float2 tc_back  = float2(tc.x, tc.y - one_texel.y);
	float2 tc_front = float2(tc.x, tc.y + one_texel.y);

	float3 displace_left  = displacement_tex.Sample(linear_sampler, tc_left).xyz;
	float3 displace_right = displacement_tex.Sample(linear_sampler, tc_right).xyz;
	float3 displace_back  = displacement_tex.Sample(linear_sampler, tc_back).xyz;
	float3 displace_front = displacement_tex.Sample(linear_sampler, tc_front).xyz;
	
	// Do not store the actual normal value. Using gradient instead, which preserves two differential values.
	float2 gradient = float2(displace_left.z - displace_right.z, displace_back.z - displace_front.z);

	// Calculate Jacobian corelation from the partial differential of height field
	float2 Dx = (displace_right.xy - displace_left.xy) * choppy_scale * grid_len;
	float2 Dy = (displace_front.xy - displace_back.xy) * choppy_scale * grid_len;
	float J = (1.0f + Dx.x) * (1.0f + Dy.y) - Dx.y * Dy.x;

	// Practical subsurface scale calculation: max[0, (1 - J) + Amplitude * (2 * Coverage - 1)].
	float fold = max(1.0f - J, 0);

	// Output
	return float4(gradient * 0.5f + 0.5f, 0, fold);
}
		]]>
	</shader>
	
	<technique name="UpdateDisplacement">
		<pass name="p0">
			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="UpdateDisplacementPS()"/>
		</pass>
	</technique>

	<technique name="GenGradientFolding">
		<pass name="p0">
			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="GenGradientFoldingPS()"/>
		</pass>
	</technique>
</effect>
