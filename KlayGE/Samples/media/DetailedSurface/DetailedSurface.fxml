<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="JudaTexture.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
		<parameter type="float4x4" name="world"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="float3" name="light_pos"/>
		<parameter type="float3" name="light_color"/>
		<parameter type="float3" name="light_falloff"/>
	</cbuffer>

	<parameter type="float" name="height_scale"/>
	<parameter type="float" name="height_bias"/>

	<parameter type="int4" name="diffuse_tex_bb"/>
	<parameter type="int4" name="normal_tex_bb"/>
	<parameter type="int4" name="height_tex_bb"/>
	<parameter type="int2" name="tex_size"/>

	<parameter type="int" name="lod_threshold" value="3"/>
	<parameter type="int" name="min_samples" value="8"/>
	<parameter type="int" name="max_samples" value="50"/>
	<parameter type="float" name="shadow_softening" value="0.58"/>

	<shader>
		<![CDATA[
void CalcTBN(float4 pos,
					float2 texcoord0,
					float3 N,
					float4 T,
					out float4 oL,
					out float4 oV,
					out float3 oH,
					out float4 oPos)
{
	oPos = mul(pos, mvp);
	
	float3x3 objToTangentSpace;
	objToTangentSpace[0] = T.xyz;
	objToTangentSpace[1] = cross(N, T.xyz) * T.w;
	objToTangentSpace[2] = N;

	float3 lightVec = light_pos - pos.xyz;
	float3 viewVec = eye_pos - pos.xyz;
	float3 halfVec = normalize(lightVec) + normalize(viewVec);

	oL.xyz = mul(objToTangentSpace, lightVec);
	oV.xyz = mul(objToTangentSpace, viewVec);
	oH = mul(objToTangentSpace, halfVec);
	
	oL.w = texcoord0.x;
	oV.w = texcoord0.y;
}

void CalcTBNVS(float4 pos				: POSITION,
					float2 texcoord0	: TEXCOORD0,
					float3 N			: NORMAL,
					float4 T			: TANGENT,
					float distortion	: TEXCOORD1,
					out float4 oL			: TEXCOORD0,	// in tangent space
					out float4 oV			: TEXCOORD1,	// in tangent space
					out float3 oH			: TEXCOORD2,	// in tangent space
					out float oDistortion	: TEXCOORD3,
					out float4 oPos			: SV_Position)
{
	N = N * 2 - 1;
	T = T * 2 - 1;

	CalcTBN(pos, texcoord0, N, T,
		oL, oV, oH, oPos);

	oDistortion = distortion;
}

float4 Shading(float4 L, float3 H, float2 uv, float3 normal)
{
	float atten = attenuation_term(0, -L.xyz, light_falloff);

	float3 diffuse = judatex2d_wrap(diffuse_tex_bb, uv).rgb;

	float3 light_vec = normalize(L.xyz);
	float3 halfway = normalize(H);

	return float4(0.2f * diffuse + atten * light_color * calc_brdf(diffuse, 0.1f, 32, light_vec, halfway, normal), 1);
}

float4 NonePS(float4 L		: TEXCOORD0,
					float4 V		: TEXCOORD1,
					float3 H		: TEXCOORD2) : SV_Target
{
	return Shading(L, H, float2(L.w, V.w), float3(0, 0, 1));
}

float4 BumpMappingPS(float4 L		: TEXCOORD0,
					float4 V		: TEXCOORD1,
					float3 H		: TEXCOORD2) : SV_Target
{
	float2 uv = float2(L.w, V.w);
	return Shading(L, H, uv, normalize(judatex2d_wrap(normal_tex_bb, uv).rgb * 2 - 1));
}

float4 ParallaxMappingPS(float4 L		: TEXCOORD0,
					float4 V			: TEXCOORD1,
					float3 H			: TEXCOORD2,
					float distortion	: TEXCOORD3) : SV_Target
{
	float2 texCoord0 = float2(L.w, V.w);
	
	float3 view = normalize(V.xyz);
	
	float height = (judatex2d_wrap(height_tex_bb, texCoord0).r - 1) * distortion;
	float2 texUV = texCoord0 + (view.xy * height);

	return Shading(L, H, texUV, normalize(judatex2d_wrap(normal_tex_bb, texUV).rgb * 2 - 1));
}

void ParallaxOcclusionMappingVS(float4 pos				: POSITION,
					float2 texcoord0	: TEXCOORD0,
					float3 N			: NORMAL,
					float4 T			: TANGENT,
					float distortion	: TEXCOORD1,
					out float4 oL			: TEXCOORD0,	// in tangent space
					out float4 oV			: TEXCOORD1,	// in tangent space
					out float3 oH			: TEXCOORD2,	// in tangent space
					out float4 oParallaxOffsetTS : TEXCOORD3,   // Parallax offset vector in tangent space
					out float4 oPos			: SV_Position)
{
	N = N * 2 - 1;
	T = T * 2 - 1;

	CalcTBN(pos, texcoord0, N, T,
		oL, oV, oH, oPos);

	oParallaxOffsetTS = float4(normalize(oV.xyz).xy, normalize(oL.xyz).xy) * distortion;
}

float4 ParallaxOcclusionMappingPS(float4 L		: TEXCOORD0,
					float4 V					: TEXCOORD1,
					float3 H					: TEXCOORD2,
					float4 vParallaxOffsetTS	: TEXCOORD3,
					float distortion			: TEXCOORD4) : SV_Target
{
	float3 view = normalize(V.xyz);
	float2 texCoord = float2(L.w, V.w);

	float level = mipmap_level(texCoord, tex_size);

	float2 texUV = texCoord;
	float fOcclusionShadow = 1;
	if (level <= lod_threshold)
	{
		int nNumSteps = (int)lerp(max_samples, min_samples, dot(view, float3(0, 0, 1)));

		float fStepSize = 1.0f / nNumSteps;
		float fPrevHeight = 1;
		float fNextHeight = 0;

		int nStepIndex = 0;

		float2 vTexOffsetPerStep = fStepSize * vParallaxOffsetTS.xy;
		float2 vTexCurrentOffset = texCoord;
		float fCurrentBound = 1;

		float2 pt1 = 0;
		float2 pt2 = 0;

		while (nStepIndex < nNumSteps)
		{
			vTexCurrentOffset -= vTexOffsetPerStep;
			float fCurrHeight = judatex2d_level_wrap(height_tex_bb, vTexCurrentOffset, level).r;
			fCurrentBound -= fStepSize;

			if (fCurrHeight > fCurrentBound)
			{   
				pt1 = float2(fCurrentBound, fCurrHeight);
				pt2 = float2(fCurrentBound + fStepSize, fPrevHeight);

				nStepIndex = nNumSteps;
			}
			else
			{
				++ nStepIndex;
			}
			fPrevHeight = fCurrHeight;
		}   

		float fDelta2 = pt2.x - pt2.y;
		float fDelta1 = pt1.x - pt1.y;

		float fDenominator = fDelta2 - fDelta1;
		float fParallaxAmount;
		if (0 == fDenominator)
		{
			fParallaxAmount = 0;
		}
		else
		{
			fParallaxAmount = (pt1.x * fDelta2 - pt2.x * fDelta1) / fDenominator;
		}
      
		float2 texSampleBase = texCoord - vParallaxOffsetTS.xy * (1 - fParallaxAmount);
		if (level > lod_threshold - 1)
		{
			// Lerp the texture coordinate from parallax occlusion mapped coordinate to bump mapping
			// smoothly based on the current mip level
			texUV = lerp(texSampleBase, texCoord, frac(level));
		}
		else
		{
			texUV = texSampleBase;
		}

		// shadow
		{
			float2 vLightRayTS = vParallaxOffsetTS.zw;
      
			// Compute the soft blurry shadows taking into account self-occlusion for 
			// features of the height field

			float sh0 = judatex2d_level_wrap(height_tex_bb, texSampleBase, level).r;
			float4 shA987 = float4(judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.88f, level).r - 0.88f,
				judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.77f, level).r - 0.77f,
				judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.66f, level).r - 0.66f,
				judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.55f, level).r - 0.55f);
			float3 sh654 = float3(judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.44f, level).r - 0.44f,
				judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.33f, level).r - 0.33f,
				judatex2d_level_wrap(height_tex_bb, texSampleBase + vLightRayTS * 0.22f, level).r - 0.22f);
			shA987 = (shA987 - sh0) * shadow_softening * float4(1, 2, 4, 6);
			sh654 = (sh654 - sh0) * shadow_softening * float3(8, 10, 12);

			// Compute the actual shadow strength
			fOcclusionShadow = 1 - max(max(max(max(max(max(shA987.x, shA987.y), shA987.z), shA987.w), sh654.x), sh654.y), sh654.z);

			// The previous computation overbrightens the image, let's adjust for that
			fOcclusionShadow = saturate(fOcclusionShadow * 0.6f + 0.4f);
		}
	}

	return Shading(L, H, texUV, normalize(judatex2d_level_wrap(normal_tex_bb, texUV, level).rgb * 2 - 1)) * fOcclusionShadow;
}
		]]>
	</shader>

	<technique name="None">
		<pass name="p0">
			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="NonePS()"/>
		</pass>
	</technique>

	<technique name="Bump">
		<pass name="p0">
			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="BumpMappingPS()"/>
		</pass>
	</technique>
	
	<technique name="Parallax">
		<pass name="p0">
			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="ParallaxMappingPS()"/>
		</pass>
	</technique>

	<technique name="ParallaxOcclusion">
		<pass name="p0">
			<state name="vertex_shader" value="ParallaxOcclusionMappingVS()"/>
			<state name="pixel_shader" value="ParallaxOcclusionMappingPS()"/>
		</pass>
	</technique>


	<technique name="NoneWireframe">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>

			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="NonePS()"/>
		</pass>
	</technique>

	<technique name="BumpWireframe">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>

			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="BumpMappingPS()"/>
		</pass>
	</technique>

	<technique name="ParallaxWireframe">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>

			<state name="vertex_shader" value="CalcTBNVS()"/>
			<state name="pixel_shader" value="ParallaxMappingPS()"/>
		</pass>
	</technique>

	<technique name="ParallaxOcclusionWireframe">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>

			<state name="vertex_shader" value="ParallaxOcclusionMappingVS()"/>
			<state name="pixel_shader" value="ParallaxOcclusionMappingPS()"/>
		</pass>
	</technique>

	<shader version="5">
		<![CDATA[
struct VS_CONTROL_POINT_OUTPUT
{
	float3 Pos : POSITION;
	float2 Texcoord0 : TEXCOORD0;
	float3 Normal : TEXCOORD1;
	float3 Tangent : TEXCOORD2;
	float3 Binormal : TEXCOORD3;
	float Distortion : TEXCOORD4;
};

VS_CONTROL_POINT_OUTPUT TessellationVS(float4 pos	: POSITION,
					float2 texcoord0	: TEXCOORD0,
					float3 N			: NORMAL,
					float4 T			: TANGENT,
					float distortion	: TEXCOORD1)
{
	N = N * 2 - 1;
	T = T * 2 - 1;

	VS_CONTROL_POINT_OUTPUT output;
	
	output.Pos = pos.xyz;
	output.Texcoord0 = texcoord0;
	output.Normal = N;
	output.Tangent = T.xyz;
	output.Binormal = cross(N, T.xyz) * T.w;
	output.Distortion = distortion;

	return output;
}
		
struct HS_CONSTANT_DATA_OUTPUT
{
	// Tess factor for the FF HW block
	float edges[3]	: SV_TessFactor;
	float inside	: SV_InsideTessFactor;
};

HS_CONSTANT_DATA_OUTPUT TessellationConstantsHS(InputPatch<VS_CONTROL_POINT_OUTPUT, 3> ip)
{
	float4 tess_factors = float4(5, 5, 1, 9);
	
	HS_CONSTANT_DATA_OUTPUT output;
    
	// Calculate the tessellation factor per edge, based on distance from camera
	float dist;
	float3 mid_point;
	// Edge 0
	mid_point = (ip[2].Pos + ip[0].Pos) / 2;
	dist = distance(mid_point, eye_pos) - tess_factors.z;
	output.edges[0] = tess_factors.x * (1 - clamp(dist / tess_factors.w, 0, 1 - (1 / tess_factors.x)));
	// Edge 1
	mid_point = (ip[0].Pos + ip[1].Pos) / 2;
	dist = distance(mid_point, eye_pos) - tess_factors.z;
	output.edges[1] = tess_factors.x * (1 - clamp(dist / tess_factors.w, 0, 1 - (1 / tess_factors.x)));
	// Edge 2
	mid_point = (ip[1].Pos + ip[2].Pos) / 2;
	dist = distance(mid_point, eye_pos) - tess_factors.z;
	output.edges[2] = tess_factors.x * (1 - clamp(dist / tess_factors.w, 0, 1 - (1 / tess_factors.x)));
	// Inside
	output.inside = (output.edges[0] + output.edges[1] + output.edges[2]) / 3;

	return output;
}

struct HS_CONTROL_POINT
{
	float3 Pos : POSITION;
	float2 Texcoord0 : TEXCOORD0;
	float3 Normal : TEXCOORD1;
	float3 Tangent : TEXCOORD2;
	float3 Binormal : TEXCOORD3;
	float Distortion : TEXCOORD4;
};

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("TessellationConstantsHS")]
HS_CONTROL_POINT TessellationHS(InputPatch<VS_CONTROL_POINT_OUTPUT, 3> p, 
										uint i : SV_OutputControlPointID)
{
	HS_CONTROL_POINT output;
	output.Pos = p[i].Pos;
	output.Texcoord0 = p[i].Texcoord0;
	output.Normal = p[i].Normal;
	output.Tangent = p[i].Tangent;
	output.Binormal = p[i].Binormal;
	output.Distortion = p[i].Distortion;
	return output;
}

[domain("tri")]
void TessellationDS(HS_CONSTANT_DATA_OUTPUT HSConstantData, 
							float3 bc_coords : SV_DomainLocation,
							const OutputPatch<HS_CONTROL_POINT, 3> patch,

							out float4 oL : TEXCOORD0,
							out float4 oV : TEXCOORD1,
							out float3 oH : TEXCOORD2,
							out float4 oPos : SV_Position)
{
	// The barycentric coordinates
	float u = bc_coords.x;
	float v = bc_coords.y;
	float w = bc_coords.z;
	
	float2 texcoord0 = patch[0].Texcoord0 * w
			+ patch[1].Texcoord0 * u
			+ patch[2].Texcoord0 * v;
	float3 normal = patch[0].Normal * w
			+ patch[1].Normal * u
			+ patch[2].Normal * v;
	normal = normalize(normal);
	float3 tangent = patch[0].Tangent * w
			+ patch[1].Tangent * u
			+ patch[2].Tangent * v;
	tangent = normalize(tangent);
	float3 binormal = patch[0].Binormal * w
			+ patch[1].Binormal * u
			+ patch[2].Binormal * v;
	binormal = normalize(binormal);

	float distortion = patch[0].Distortion * w
			+ patch[1].Distortion * u
			+ patch[2].Distortion * v;

	float3 pos = patch[0].Pos * w
			+ patch[1].Pos * u
			+ patch[2].Pos * v;
	float height = (judatex2d_level_wrap(height_tex_bb, texcoord0, 0).r - 1) * distortion;
	pos += height * normal;
	
	oPos = mul(float4(pos, 1), mvp);
	
	float3x3 objToTangentSpace;
	objToTangentSpace[0] = tangent;
	objToTangentSpace[1] = binormal;
	objToTangentSpace[2] = normal;

	float3 lightVec = light_pos - pos.xyz;
	float3 viewVec = eye_pos - pos.xyz;
	float3 halfVec = normalize(lightVec) + normalize(viewVec);

	oL.xyz = mul(objToTangentSpace, lightVec);
	oV.xyz = mul(objToTangentSpace, viewVec);
	oH = mul(objToTangentSpace, halfVec);
	
	oL.w = texcoord0.x;
	oV.w = texcoord0.y;
}
		]]>
	</shader>

	<technique name="Tessellation">
		<pass name="p0">
			<state name="vertex_shader" value="TessellationVS()"/>
			<state name="hull_shader" value="TessellationHS()"/>
			<state name="domain_shader" value="TessellationDS()"/>
			<state name="pixel_shader" value="BumpMappingPS()"/>
		</pass>
	</technique>

	<technique name="TessellationWireframe">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>

			<state name="vertex_shader" value="TessellationVS()"/>
			<state name="hull_shader" value="TessellationHS()"/>
			<state name="domain_shader" value="TessellationDS()"/>
			<state name="pixel_shader" value="BumpMappingPS()"/>
		</pass>
	</technique>
</effect>
