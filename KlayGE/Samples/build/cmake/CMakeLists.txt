PROJECT(Samples)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

OPTION(KLAYGE_WITH_WINRT "WinRT support." FALSE)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF(WIN32)
	IF(CMAKE_GENERATOR MATCHES "Win64")
		SET(KLAYGE_ARCH_NAME "x64")
		SET(KLAYGE_VS_PLATFORM_NAME "x64")
	ELSEIF(CMAKE_GENERATOR MATCHES "ARM")
		SET(KLAYGE_ARCH_NAME "arm")
		SET(KLAYGE_VS_PLATFORM_NAME "ARM")
		SET(KLAYGE_WITH_WINRT TRUE)
	ELSE()
		SET(KLAYGE_ARCH_NAME "x86")
		SET(KLAYGE_VS_PLATFORM_NAME "Win32")
	ENDIF()
	SET(KLAYGE_PLATFORM_NAME "win")
ENDIF()
IF(UNIX)
	IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
		SET(KLAYGE_ARCH_NAME "x64")
	ELSE()
		SET(KLAYGE_ARCH_NAME "x86")
	ENDIF()
	SET(KLAYGE_PLATFORM_NAME "linux")
ENDIF()
IF(KLAYGE_WITH_WINRT)
	SET(KLAYGE_ARCH_NAME ${KLAYGE_ARCH_NAME}_app)
ENDIF()
SET(KLAYGE_PLATFORM_NAME ${KLAYGE_PLATFORM_NAME}_${KLAYGE_ARCH_NAME})

IF(WIN32)
	IF(MSVC)
		ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX")
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /WX")
		IF(KLAYGE_WITH_WINRT)
			SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG /WX /INCREMENTAL:NO")
			SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/DEBUG /WX /INCREMENTAL:NO")
		ENDIF()

		SET(KLAYGE_COMPILER_NAME "vc")
		IF(MSVC_VERSION GREATER 1600)
			SET(KLAYGE_COMPILER_VERSION "11")
		ELSEIF(MSVC_VERSION GREATER 1500)
			SET(KLAYGE_COMPILER_VERSION "10")
		ELSEIF(MSVC_VERSION GREATER 1400)
			SET(KLAYGE_COMPILER_VERSION "9")
		ENDIF()

		IF(KLAYGE_WITH_WINRT)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /fp:fast")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /fp:fast")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /fp:fast")
		ELSE()
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /fp:fast /GS-")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /fp:fast /GS-")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /fp:fast /GS-")
		ENDIF()

		IF(MSVC_VERSION GREATER 1500)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MP")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MP")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MP")

			SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
		ENDIF()
		IF(MSVC_VERSION GREATER 1600)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Qpar")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Qpar")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /Qpar")
		ENDIF()
	ENDIF()
	IF(MINGW)
		SET(KLAYGE_COMPILER_NAME "mgw")
		SET(KLAYGE_COMPILER_VERSION "")
	ENDIF()
ELSE()
	SET(KLAYGE_COMPILER_NAME "gcc")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused")
ENDIF()

# Set postfix
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")


# Main settings and dependencies
SET(KLAYGE_CORELIB_NAME KlayGE_Core)  # Dependency of all other targets
FIND_PATH(KLAYGE_PROJECT_DIR klayge_logo.ico PATHS ../../../)

SET(KLAYGE_OUTPUT_DIR "${KLAYGE_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME}")
SET(KLAYGE_BIN_DIR "${KLAYGE_PROJECT_DIR}/bin/${KLAYGE_PLATFORM_NAME}")


# create vcproj.user file for Visual Studio to set debug working directory
FUNCTION(KLAYGE_CREATE_VCPROJ_USERFILE TARGETNAME)
	IF(MSVC)
		SET(SYSTEM_NAME $ENV{USERDOMAIN})
		SET(USER_NAME $ENV{USERNAME})

		IF(MSVC_VERSION GREATER 1500)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/build/cmake/VisualStudio2010UserFile.vcxproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcxproj.user
				@ONLY
			)
		ELSEIF(MSVC_VERSION GREATER 1400)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/build/cmake/VisualStudio2008UserFile.vcproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcproj.${SYSTEM_NAME}.${USER_NAME}.user
				@ONLY
			)
		ELSEIF(MSVC_VERSION GREATER 1300)
			CONFIGURE_FILE(
				${KLAYGE_PROJECT_DIR}/build/cmake/VisualStudio2005UserFile.vcproj.user.in
				${CMAKE_CURRENT_BINARY_DIR}/${TARGETNAME}.vcproj.${SYSTEM_NAME}.${USER_NAME}.user
				@ONLY
			)
		ENDIF()
	ENDIF()
ENDFUNCTION()

# Required variables:
# - SOURCE_FILES/HEADER_FILES/RESOURCE_FILES
# - EFFECT_FILES/POST_PROCESSORS/UI_FILES
# - EXTRA_INCLUDE_DIRS: dependencies required besides KlarGE_Core and boost
# - EXTRA_LINKED_LIBRARIES: dependencies required besides KlarGE_Core and boost
#
MACRO(SETUP_SAMPLE EXE_NAME)
	SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})
	SOURCE_GROUP("Header Files" FILES ${HEADER_FILES})
	SOURCE_GROUP("Resource Files" FILES ${RESOURCE_FILES})
	SOURCE_GROUP("Effect Files" FILES ${EFFECT_FILES})
	SOURCE_GROUP("Post Processors" FILES ${POST_PROCESSORS})
	SOURCE_GROUP("UI Files" FILES ${UI_FILES})

	IF(KLAYGE_WITH_WINRT)
		ADD_DEFINITIONS(-ZW)
	ENDIF()

	INCLUDE_DIRECTORIES(${KLAYGE_PROJECT_DIR}/../External/boost)
	INCLUDE_DIRECTORIES(${KLAYGE_PROJECT_DIR}/Core/Include)
	INCLUDE_DIRECTORIES(${EXTRA_INCLUDE_DIRS})
	LINK_DIRECTORIES(${KLAYGE_PROJECT_DIR}/../External/boost/lib_${KLAYGE_COMPILER_NAME}${KLAYGE_COMPILER_VERSION}_${KLAYGE_ARCH_NAME}/lib)
	LINK_DIRECTORIES(${KLAYGE_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME})
	LINK_DIRECTORIES(${EXTRA_LINKED_DIRS})

	ADD_EXECUTABLE(${EXE_NAME} ${SOURCE_FILES} ${HEADER_FILES} ${RESOURCE_FILES} ${EFFECT_FILES} ${POST_PROCESSORS} ${UI_FILES})
	ADD_DEPENDENCIES(${EXE_NAME} ${KLAYGE_CORELIB_NAME})

	SET_TARGET_PROPERTIES(${EXE_NAME} PROPERTIES
		PROJECT_LABEL ${EXE_NAME}
		DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
		OUTPUT_NAME ${EXE_NAME}
	)
	IF(KLAYGE_WITH_WINRT)
		SET_TARGET_PROPERTIES(${EXE_NAME} PROPERTIES VS_WINRT_EXTENSIONS TRUE)
	ENDIF()

	IF(MSVC)
		SET(EXTRA_LINKED_LIBRARIES ${EXTRA_LINKED_LIBRARIES})
	ELSE()
		SET(EXTRA_LINKED_LIBRARIES boost_system ${EXTRA_LINKED_LIBRARIES})
	ENDIF()

	TARGET_LINK_LIBRARIES(${EXE_NAME} ${EXTRA_LINKED_LIBRARIES})

	IF(NOT KLAYGE_WITH_WINRT)
		ADD_CUSTOM_COMMAND(TARGET ${EXE_NAME}
			POST_BUILD
			COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE_DIR:${EXE_NAME}>/$<TARGET_FILE_NAME:${EXE_NAME}> ${KLAYGE_BIN_DIR})
 
		INSTALL(TARGETS ${EXE_NAME}
			RUNTIME DESTINATION ${KLAYGE_BIN_DIR}
			LIBRARY DESTINATION ${KLAYGE_BIN_DIR}
			ARCHIVE DESTINATION ${KLAYGE_OUTPUT_DIR}
		)

		KLAYGE_CREATE_VCPROJ_USERFILE(${EXE_NAME})
	ENDIF()
ENDMACRO(SETUP_SAMPLE)

IF(NOT KLAYGE_WITH_WINRT)
ADD_SUBDIRECTORY(AtmosphericScattering)
ADD_SUBDIRECTORY(CausticsMap)
ADD_SUBDIRECTORY(DeferredRendering)
ADD_SUBDIRECTORY(DepthPeeling)
ADD_SUBDIRECTORY(DetailedSurface)
ADD_SUBDIRECTORY(GlobalIllumination)
ADD_SUBDIRECTORY(GPUParticleSystem)
ADD_SUBDIRECTORY(JudaTexViewer)
ADD_SUBDIRECTORY(ModelViewer)
ADD_SUBDIRECTORY(MotionBlurDoF)
ADD_SUBDIRECTORY(Ocean)
ADD_SUBDIRECTORY(ParticleEditor)
ADD_SUBDIRECTORY(PostProcessing)
ADD_SUBDIRECTORY(ProceduralTex)
ADD_SUBDIRECTORY(Reflection)
ADD_SUBDIRECTORY(ScenePlayer)
ADD_SUBDIRECTORY(ShadowCubemap)
ADD_SUBDIRECTORY(SubSurface)
ENDIF()
ADD_SUBDIRECTORY(Text)
IF(NOT KLAYGE_WITH_WINRT)
ADD_SUBDIRECTORY(VideoTexture)
ENDIF()
